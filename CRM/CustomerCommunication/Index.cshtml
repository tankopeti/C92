@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Cloud9_2.Models
@using Microsoft.AspNetCore.Antiforgery
@model Cloud9_2.Pages.CRM.CustomerCommunication.IndexModel
@using System.Globalization

@functions {
    public string GetAntiForgeryToken()
    {
        var antiForgery = PageContext.HttpContext.RequestServices.GetService<IAntiforgery>();
        var tokenSet = antiForgery?.GetAndStoreTokens(PageContext.HttpContext);
        return tokenSet?.RequestToken ?? string.Empty;
    }
}
@{
    ViewData["Title"] = "Ügyfélkommunikáció";
    Layout = "_Layout";
}
@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Ügyfélkommunikáció</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Communications.Count of @Model.DistinctCommunicationIdCount kommunikáció (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newCommunicationButton" class="btn-new" data-bs-toggle="modal" data-bs-target="#newCommunicationModal" aria-label="Új kommunikáció hozzáadása">
                    <i class="bi bi-plus-circle me-1"></i>Új kommunikáció
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés kommunikációk között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
                <!-- Filter/Sort Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=all&SortBy=CommunicationDate">Összes kommunikáció (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=all&SortBy=CommunicationId">Rendezés: Kommunikáció ID (Csökkenő)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=all&SortBy=PartnerName">Partner neve</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=Email">Csak email</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=Phone">Csak telefonhívás</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&TypeFilter=Meeting">Csak találkozó</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Card Grid Header -->
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column communication-type-col">Típus</div>
                <div class="card-grid-column communication-partner-col">Partner</div>
                <div class="card-grid-column communication-date-col">Dátum</div>
                <div class="card-grid-column communication-subject-col">Tárgy</div>
                <div class="card-grid-column communication-status-col">Státusz</div>
                <div class="card-grid-column actions-column">Műveletek</div>
            </div>
        </div>
    </div>

    <!-- Card Grid Body -->
    <div class="scrollable-card-container">
        <div class="card-grid-body">
            @if (Model.Communications.Any())
            {
                @foreach (var communication in Model.Communications)
                {
                    <div class="card partner-card mb-3" data-communication-id="@communication.CustomerCommunicationId">
                        <div class="card-body p-2">
                            <div class="card-grid-row align-items-center">
                                <div class="card-grid-cell communication-type-col">
                                    <div class="">
                                        @if (communication.CommunicationTypeName == "Email")
                                        {
                                            <div class="fw-bold">E-mail</div>
                                        }
                                        else if (communication.CommunicationTypeName == "Phone")
                                        {
                                            <div class="fw-bold">Telefon</div>
                                        }
                                        else if (communication.CommunicationTypeName == "Meeting")
                                        {
                                            <div class="fw-bold">Találkozó</div>
                                        }
                                        else
                                        {
                                            <div class="fw-bold">Egyéb</div>
                                        }
                                    </div>
                                </div>
                                <div class="card-grid-cell communication-partner-col">
                                    <div class="communication-partner text-muted small">
                                        <i class="bi bi-person me-1"></i>@(string.Join(" ", new[] { communication.FirstName, communication.LastName }.Where(s => !string.IsNullOrEmpty(s))))
                                    </div>
                                </div>
                                <div class="card-grid-cell communication-date-col">
                                    <div class="communication-date text-muted small">
                                        <i class="bi bi-calendar me-1"></i>@(communication.Date.ToString("yyyy-MM-dd"))
                                    </div>
                                </div>
                                <div class="card-grid-cell communication-subject-col">
                                    <div class="communication-subject text-muted small">
                                        @communication.Subject
                                    </div>
                                </div>
                                <div class="card-grid-cell communication-status-col">
                                    @{
                                        var badgeClass = "badge bg-secondary";
                                        if (communication.StatusName == "Open") badgeClass = "badge badge-pending";
                                        else if (communication.StatusName == "Resolved") badgeClass = "badge badge-accepted";
                                        else if (communication.StatusName == "Escalated") badgeClass = "badge badge-rejected";
                                        else if (communication.StatusName == "InProgress") badgeClass = "badge badge-pending";
                                    }
                                    <span class="@badgeClass">@Model.StatusDisplayNames[communication.StatusName]</span>
                                </div>
                                <div class="card-grid-cell actions-cell">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-outline-info btn-sm view-communication-btn"
                                                data-bs-toggle="modal"
                                                data-bs-target="#viewCommunicationModal_@communication.CustomerCommunicationId"
                                                aria-label="Kommunikáció részleteinek megtekintése">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <div class="dropdown">
                                            <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                    id="actionsDropdown_@communication.CustomerCommunicationId"
                                                    data-bs-toggle="dropdown"
                                                    aria-expanded="false"
                                                    aria-label="További műveletek">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@communication.CustomerCommunicationId">
                                                <li>
                                                    <a class="dropdown-item" href="#"
                                                       data-bs-toggle="modal"
                                                       data-bs-target="#editCommunicationModal_@communication.CustomerCommunicationId">
                                                        <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                                    </a>
                                                </li>
                                                <li><a class="dropdown-item" href="#" onclick="copyCommunication(@communication.CustomerCommunicationId)"><i class="bi bi-copy me-2"></i>Másolás</a></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteCommunicationModal_@communication.CustomerCommunicationId"><i class="bi bi-trash me-2"></i>Törlés</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Communication Modal -->
                    <div class="modal fade" id="editCommunicationModal_@communication.CustomerCommunicationId" tabindex="-1" aria-labelledby="editCommunicationModalLabel_@communication.CustomerCommunicationId" aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editCommunicationModalLabel_@communication.CustomerCommunicationId">Kommunikáció szerkesztése: @communication.Subject</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="communicationForm_@communication.CustomerCommunicationId">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="CustomerCommunicationId" value="@communication.CustomerCommunicationId" />
                                        <table class="table table-sm mt-3">
                                            <tbody>
                                                <tr>
                                                    <th>Típus</th>
                                                    <td>
                                                        <select class="form-select" name="CommunicationTypeId" required>
                                                            <option value="1" selected="@(communication.CommunicationTypeName == "Email")">Email</option>
                                                            <option value="2" selected="@(communication.CommunicationTypeName == "Phone")">Telefonhívás</option>
                                                            <option value="3" selected="@(communication.CommunicationTypeName == "Meeting")">Találkozó</option>
                                                        </select>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th>Partner</th>
                                                    <td>
                                                        <select name="ContactId" class="form-select tom-select" data-selected-id="@communication.ContactId" data-selected-text="@(string.Join(" ", new[] { communication.FirstName, communication.LastName }.Where(s => !string.IsNullOrEmpty(s))))" autocomplete="off" required>
                                                            <option value=""></option>
                                                        </select>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th>Dátum</th>
                                                    <td><input type="date" class="form-control" name="Date" value="@(communication.Date.ToString("yyyy-MM-dd"))" required></td>
                                                </tr>
                                                <tr>
                                                    <th>Tárgy</th>
                                                    <td><input type="text" class="form-control" name="Subject" value="@communication.Subject" required maxlength="1000"></td>
                                                </tr>
                                                <tr>
                                                    <th>Tartalom</th>
                                                    <td><textarea class="form-control" name="Note" rows="6" maxlength="2000">@communication.Note</textarea></td>
                                                </tr>
                                                <tr>
                                                    <th>Státusz</th>
                                                    <td>
                                                        <select class="form-select" name="StatusId" required>
                                                            <option value="1" selected="@(communication.StatusName == "Open")">Nyitott</option>
                                                            <option value="2" selected="@(communication.StatusName == "InProgress")">Folyamatban</option>
                                                            <option value="3" selected="@(communication.StatusName == "Escalated")">Eskalálva</option>
                                                            <option value="4" selected="@(communication.StatusName == "Resolved")">Megoldva</option>
                                                        </select>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th>Partner ID</th>
                                                    <td><input type="number" class="form-control" name="PartnerId" value="@communication.PartnerId" /></td>
                                                </tr>
                                                <tr>
                                                    <th>Lead ID</th>
                                                    <td><input type="number" class="form-control" name="LeadId" value="@communication.LeadId" /></td>
                                                </tr>
                                                <tr>
                                                    <th>Árajánlat ID</th>
                                                    <td><input type="number" class="form-control" name="QuoteId" value="@communication.QuoteId" /></td>
                                                </tr>
                                                <tr>
                                                    <th>Rendelés ID</th>
                                                    <td><input type="number" class="form-control" name="OrderId" value="@communication.OrderId" /></td>
                                                </tr>
                                                <tr>
                                                    <th>Megjegyzések</th>
                                                    <td><textarea class="form-control" name="Metadata" rows="4" maxlength="1000">@communication.Metadata</textarea></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                                    <button type="button" class="btn btn-primary save-communication" data-communication-id="@communication.CustomerCommunicationId">Mentés</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- View Communication Modal -->
                    <div class="modal fade" id="viewCommunicationModal_@communication.CustomerCommunicationId" tabindex="-1" aria-labelledby="viewCommunicationModalLabel_@communication.CustomerCommunicationId" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="viewCommunicationModalLabel_@communication.CustomerCommunicationId">Részletek: @communication.Subject</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                                </div>
                                <div class="modal-body">
                                    <table class="table table-sm">
                                        <tbody>
                                            <tr>
                                                <th>Kommunikáció ID</th>
                                                <td>@communication.CustomerCommunicationId</td>
                                            </tr>
                                            <tr>
                                                <th>Típus</th>
                                                <td>@communication.CommunicationTypeName</td>
                                            </tr>
                                            <tr>
                                                <th>Partner</th>
                                                <td>@(string.Join(" ", new[] { communication.FirstName, communication.LastName }.Where(s => !string.IsNullOrEmpty(s))) ?? "Nincs partner megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Dátum</th>
                                                <td>@(communication.Date.ToString("yyyy-MM-dd") ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Tárgy</th>
                                                <td>@(string.IsNullOrEmpty(communication.Subject) ? "Nincs megadva" : communication.Subject)</td>
                                            </tr>
                                            <tr>
                                                <th>Tartalom</th>
                                                <td>@(string.IsNullOrEmpty(communication.Note) ? "Nincs megadva" : communication.Note)</td>
                                            </tr>
                                            <tr>
                                                <th>Státusz</th>
                                                <td>@(Model.StatusDisplayNames.ContainsKey(communication.StatusName) ? Model.StatusDisplayNames[communication.StatusName] : "Ismeretlen")</td>
                                            </tr>
                                            <tr>
                                                <th>Felelős</th>
                                                <td>@(string.IsNullOrEmpty(communication.AgentName) ? "Nincs megadva" : communication.AgentName)</td>
                                            </tr>
                                            <tr>
                                                <th>Megjegyzések</th>
                                                <td>@(string.IsNullOrEmpty(communication.Metadata) ? "Nincs megadva" : communication.Metadata)</td>
                                            </tr>
                                            <tr>
                                                <th>Csatolmány</th>
                                                <td>@(string.IsNullOrEmpty(communication.AttachmentPath) ? "Nincs megadva" : communication.AttachmentPath)</td>
                                            </tr>
                                            <tr>
                                                <th>Partner ID</th>
                                                <td>@(communication.PartnerId.HasValue ? communication.PartnerId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Lead ID</th>
                                                <td>@(communication.LeadId.HasValue ? communication.LeadId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Árajánlat ID</th>
                                                <td>@(communication.QuoteId.HasValue ? communication.QuoteId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Rendelés ID</th>
                                                <td>@(communication.OrderId.HasValue ? communication.OrderId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <!-- Communication History -->
                                    <h6 class="mt-3">Kommunikációs előzmények</h6>
                                    <div id="history_@communication.CustomerCommunicationId" class="history-container">
                                        <p class="text-muted">Előzmények betöltése...</p>
                                    </div>
                                    <!-- Add Post Form -->
                                    <h6 class="mt-3">Új hozzászólás</h6>
                                    <form id="addPostForm_@communication.CustomerCommunicationId" class="mt-2">
                                        @Html.AntiForgeryToken()
                                        <div class="mb-3">
                                            <textarea class="form-control" name="Content" rows="3" placeholder="Írja ide a hozzászólást..." required></textarea>
                                        </div>
                                        <button type="button" class="btn btn-primary btn-sm add-post" data-communication-id="@communication.CustomerCommunicationId">Hozzászólás hozzáadása</button>
                                    </form>
                                    <!-- Assign Responsible Form -->
                                    <h6 class="mt-3">Felelős kijelölése</h6>
                                    <form id="assignResponsibleForm_@communication.CustomerCommunicationId" class="mt-2">
                                        @Html.AntiForgeryToken()
                                        <div class="mb-3">
                                            <select name="ResponsibleContactId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                <option value="" disabled selected>-- Válasszon felelőst --</option>
                                            </select>
                                        </div>
                                        <button type="button" class="btn btn-primary btn-sm assign-responsible" data-communication-id="@communication.CustomerCommunicationId">Felelős kijelölése</button>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezárás</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Communication Modal -->
                    <div class="modal fade" id="deleteCommunicationModal_@communication.CustomerCommunicationId" tabindex="-1" aria-labelledby="deleteCommunicationModalLabel_@communication.CustomerCommunicationId" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deleteCommunicationModalLabel_@communication.CustomerCommunicationId">Kommunikáció törlése</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="deleteCommunicationForm_@communication.CustomerCommunicationId">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="communicationId" value="@communication.CustomerCommunicationId" />
                                        <p>Biztosan törölni szeretné a következő kommunikációt: <strong>@communication.Subject</strong>?</p>
                                        <div id="deleteWarning_@communication.CustomerCommunicationId" class="alert alert-warning" style="display: none;">
                                            Ez a kommunikáció nem törölhető, mert kapcsolódó rekordok léteznek.
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                                    <button type="button" class="btn btn-danger confirm-delete-communication" data-communication-id="@communication.CustomerCommunicationId" aria-label="Kommunikáció törlése">Törlés</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning text-center mt-3" role="alert">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        @:Nincs találat a "@Model.SearchTerm" keresésre az @Model.CurrentPage. oldalon.
                    }
                    else if (Model.TotalRecords > 0)
                    {
                        @:Nincs kommunikáció az @Model.CurrentPage. oldalon, de @Model.TotalRecords kommunikáció létezik. Próbáljon másik oldalt vagy szűrőt.
                    }
                    else
                    {
                        @:Nincs kommunikáció. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newCommunicationModal" aria-label="Első kommunikáció létrehozása">Hozza létre az elsőt?</button>
                    }
                    <div class="mt-2 small text-muted">
                        Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, DistinctCommunicationIdCount=@Model.DistinctCommunicationIdCount, SearchTerm="@Model.SearchTerm"
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Pagination Footer -->
    @await Html.PartialAsync("_PaginationFooter", new Cloud9_2.Models.PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Communications"
    })

    <div class="modal fade" id="newCommunicationModal" tabindex="-1" aria-labelledby="newCommunicationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newCommunicationModalLabel">Új kommunikáció hozzáadása</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="communicationForm_new">
                        @Html.AntiForgeryToken()
                        <table class="table table-sm mt-3">
                            <tbody>
                                <tr>
                                    <th>Típus</th>
                                    <td>
                                        <select class="form-select" name="CommunicationTypeId" required>
                                            <option value="" disabled selected>-- Válasszon típust --</option>
                                            <option value="1">Email</option>
                                            <option value="2">Telefonhívás</option>
                                            <option value="3">Találkozó</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Partner</th>
                                    <td>
                                        <select name="ContactId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                            <option value="" disabled selected>-- Válasszon partnert --</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Felelős</th>
                                    <td>
                                        <select name="ResponsibleContactId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                            <option value="" disabled selected>-- Válasszon felelőst --</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Dátum</th>
                                    <td><input type="date" class="form-control" name="Date" value="@DateTime.Today.ToString("yyyy-MM-dd")" required></td>
                                </tr>
                                <tr>
                                    <th>Tárgy</th>
                                    <td><input type="text" class="form-control" name="Subject" maxlength="1000" required></td>
                                </tr>
                                <tr>
                                    <th>Kezdeti hozzászólás</th>
                                    <td><textarea class="form-control" name="InitialPost" rows="4" maxlength="2000" placeholder="Adja meg az első hozzászólást (opcionális)"></textarea></td>
                                </tr>
                                <tr>
                                    <th>Tartalom</th>
                                    <td><textarea class="form-control" name="Note" rows="6" maxlength="2000"></textarea></td>
                                </tr>
                                <tr>
                                    <th>Státusz</th>
                                    <td>
                                        <select class="form-select" name="StatusId" required>
                                            <option value="" disabled selected>-- Válasszon státuszt --</option>
                                            <option value="1">Nyitott</option>
                                            <option value="2">Folyamatban</option>
                                            <option value="3">Eskalálva</option>
                                            <option value="4">Megoldva</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Partner</th>
                                    <td>
                                        <select name="PartnerId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off">
                                            <option value="" selected>-- Válasszon partnert --</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Árajánlat</th>
                                    <td>
                                        <select name="QuoteId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off">
                                            <option value="" selected>-- Válasszon árajánlatot --</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Rendelés</th>
                                    <td>
                                        <select name="OrderId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off">
                                            <option value="" selected>-- Válasszon rendelést --</option>
                                        </select>
                                    </td>
                                </tr>
                                @* <tr>
                                    <th>Lead ID</th>
                                    <td><input type="number" class="form-control" name="LeadId" /></td>
                                </tr> *@
                                <tr>
                                    <th>Megjegyzések</th>
                                    <td><textarea class="form-control" name="Metadata" rows="4" maxlength="1000"></textarea></td>
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                    <button type="button" class="btn btn-primary save-communication" data-communication-id="new">Mentés</button>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    console.log('Main script loaded');

    // --- Utility Functions ---
    function showToast(message, type = 'danger') {
        const toast = $(`
            <div class="toast custom-toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `);
        $('#toastContainer').append(toast);
        const bsToast = new bootstrap.Toast(toast[0]);
        bsToast.show();
        setTimeout(() => toast.remove(), 5500);
    }

    // --- Initialize TomSelect ---
    function initializeTomSelect(select, communicationId, options = {}) {
        const { endpoint = '/api/partners', dataKey = 'contacts', placeholder = '-- Válasszon --' } = options;
        const selectedId = select.dataset.selectedId || '';
        const selectedText = select.dataset.selectedText || '';
        console.log('TomSelect Init for:', communicationId, 'endpoint:', endpoint, 'dataKey:', dataKey, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (!select) {
            console.error('Select element is null for communicationId:', communicationId, 'options:', options);
            return null;
        }

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        return new TomSelect(select, {
            valueField: 'id',
            labelField: 'text',
            searchField: 'text',
            placeholder: placeholder,
            allowEmptyOption: true,
            maxOptions: 100,
            load: async (query, callback) => {
                try {
                    const url = endpoint === '/api/orders' 
                        ? `${endpoint}?searchTerm=${encodeURIComponent(query)}&take=50`
                        : `${endpoint}?search=${encodeURIComponent(query)}&take=50`;
                    console.log('TomSelect Query:', url);
                    const response = await fetch(url, {
                        headers: {
                            'Authorization': 'Bearer ' + (localStorage.getItem('token') || ''),
                            'Accept': 'application/json'
                        }
                    });
                    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                    const data = await response.json();
                    console.log('TomSelect Response:', data);

                    let items = [];
                    if (endpoint === '/api/partners') {
                        if (dataKey === 'partners') {
                            items = data.map(partner => ({
                                id: partner.id,
                                text: partner.text
                            }));
                        } else if (dataKey === 'quotes') {
                            items = data.flatMap(partner => 
                                partner.quotes && partner.quotes.length ? 
                                partner.quotes.map(quote => ({
                                    id: quote.id,
                                    text: quote.text
                                })) : []
                            );
                        } else if (dataKey === 'contacts') {
                            items = data.flatMap(partner => 
                                partner.contacts && partner.contacts.length ? 
                                partner.contacts.map(contact => ({
                                    id: contact.id,
                                    text: contact.text
                                })) : []
                            );
                        }
                    } else if (endpoint === '/api/orders') {
                        items = data.map(order => ({
                            id: order.orderId,
                            text: order.orderNumber || `Order ${order.orderId}` + (order.description ? ` (${order.description})` : '')
                        }));
                    }

                    if (!items.length) {
                        console.warn(`No items found for ${dataKey} from ${endpoint}`);
                        callback([{ id: 0, text: `Nincs elérhető ${dataKey === 'partners' ? 'partner' : dataKey === 'quotes' ? 'árajánlat' : dataKey === 'contacts' ? 'kapcsolat' : 'rendelés'}` }]);
                    } else {
                        callback(items);
                    }
                } catch (error) {
                    console.error('TomSelect Error:', error, 'endpoint:', endpoint, 'dataKey:', dataKey);
                    callback([{ id: 0, text: `Hiba: Nem sikerült betölteni a ${dataKey === 'partners' ? 'partnereket' : dataKey === 'quotes' ? 'árajánlatokat' : dataKey === 'contacts' ? 'kapcsolatokat' : 'rendeléseket'}` }]);
                }
            },
            shouldLoad: () => true,
            render: {
                option: (data, escape) => `<div>${escape(data.text)}</div>`,
                item: (data, escape) => `<div>${escape(data.text)}</div>`,
                no_results: (data, escape) => `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`
            },
            onInitialize: function() {
                console.log('TomSelect Initialized for select:', select.name);
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText });
                    this.setValue(selectedId);
                }
                this.load('');
            }
        });
    }

    // --- Load Communication History ---
    function loadCommunicationHistory(communicationId) {
        const historyContainer = $(`#history_${communicationId}`);
        historyContainer.html('<p class="text-muted">Előzmények betöltése...</p>');

        $.ajax({
            url: `/api/customercommunication/${communicationId}/history`,
            type: 'GET',
            headers: {
                'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
            },
            success: function (data) {
                console.log('History loaded:', data);
                if (!data || (!data.posts && !data.responsibleHistory)) {
                    historyContainer.html('<p class="text-muted">Nincs előzmény.</p>');
                    return;
                }

                let html = '<ul class="list-group">';
                if (data.posts && data.posts.length) {
                    data.posts.forEach(post => {
                        html += `
                            <li class="list-group-item">
                                <strong>Hozzászólás</strong> (${post.createdDate}): ${post.content}<br>
                                <small>Írta: ${post.createdBy || 'Ismeretlen'}</small>
                            </li>`;
                    });
                }
                if (data.responsibleHistory && data.responsibleHistory.length) {
                    data.responsibleHistory.forEach(responsible => {
                        html += `
                            <li class="list-group-item">
                                <strong>Felelős kijelölve</strong> (${responsible.assignedDate}): ${responsible.responsibleName}<br>
                                <small>Kijelölte: ${responsible.assignedBy || 'Ismeretlen'}</small>
                            </li>`;
                    });
                }
                html += '</ul>';
                historyContainer.html(html);
            },
            error: function (xhr) {
                console.error('History load error:', xhr.responseText);
                historyContainer.html('<p class="text-danger">Hiba az előzmények betöltésekor.</p>');
            }
        });
    }

    // --- Save Communication ---
    async function saveCommunication(communicationId) {
        const form = document.getElementById(`communicationForm_${communicationId}`);
        if (!form) {
            console.error('Form not found for communicationId:', communicationId);
            showToast('Hiba: Az űrlap nem található.', 'danger');
            return;
        }

        const contactSelect = form.querySelector('select[name="ContactId"]');
        const responsibleSelect = form.querySelector('select[name="ResponsibleContactId"]');
        if (!contactSelect || !contactSelect.value) {
            console.error('Contact selection is empty or not initialized');
            showToast('Kérjük, válasszon ki egy partnert.', 'danger');
            return;
        }
        if (!responsibleSelect || !responsibleSelect.value) {
            console.error('Responsible selection is empty or not initialized');
            showToast('Kérjük, válasszon ki egy felelőst.', 'danger');
            return;
        }

        const formData = new FormData(form);
        const contactText = contactSelect.selectedOptions[0]?.text || 'Unknown';
        const responsibleText = responsibleSelect.selectedOptions[0]?.text || 'Unknown';
        const username = localStorage.getItem('username') || 'System'; // Use localStorage for username
        console.log('Username for save:', username);

        const data = {
            CustomerCommunicationId: communicationId === 'new' ? 0 : parseInt(communicationId),
            CommunicationTypeId: parseInt(formData.get('CommunicationTypeId')) || null,
            ContactId: parseInt(formData.get('ContactId')) || null,
            Subject: formData.get('Subject')?.trim() || null,
            Date: formData.get('Date')?.trim() || null,
            Note: formData.get('Note')?.trim() || '',
            StatusId: parseInt(formData.get('StatusId')) || null,
            PartnerId: parseInt(formData.get('PartnerId')) || null,
            LeadId: parseInt(formData.get('LeadId')) || null,
            QuoteId: parseInt(formData.get('QuoteId')) || null,
            OrderId: parseInt(formData.get('OrderId')) || null,
            Metadata: formData.get('Metadata')?.trim() || '',
            Posts: formData.get('InitialPost')?.trim() ? [{
                Content: formData.get('InitialPost')?.trim(),
                CreatedBy: username,
                CreatedDate: new Date().toISOString()
            }] : [],
            CurrentResponsible: {
                ContactId: parseInt(formData.get('ResponsibleContactId')) || null,
                FirstName: responsibleText.split(' ')[0] || '',
                LastName: responsibleText.split(' ')[1]?.split('(')[0] || '',
                Email: responsibleText.match(/\(([^)]+)\)/)?.[1] || null
            },
            ResponsibleHistory: [{
                ResponsibleContactId: parseInt(formData.get('ResponsibleContactId')) || null,
                ResponsibleName: responsibleText.split('(')[0].trim() || 'Unknown',
                AssignedBy: username,
                AssignedDate: new Date().toISOString()
            }]
        };

        console.log('Processed data:', data);

        // Validate required fields
        if (!data.CommunicationTypeId || !data.ContactId || !data.Subject || !data.Date || !data.StatusId || !data.CurrentResponsible.ContactId) {
            console.error('Validation failed:', data);
            showToast('Kérjük, töltse ki az összes kötelező mezőt (Típus, Partner, Tárgy, Dátum, Státusz, Felelős).', 'danger');
            return;
        }

        try {
            const url = communicationId === 'new' ? '/api/customercommunication' : `/api/customercommunication/${communicationId}`;
            const method = communicationId === 'new' ? 'POST' : 'PUT';
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                    'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage = `Hiba: ${response.status} ${response.statusText}.`;
                try {
                    const errorJson = JSON.parse(errorText);
                    if (errorJson.errors) {
                        const errorMessages = Object.entries(errorJson.errors)
                            .map(([field, messages]) => `${field}: ${messages.join(', ')}`)
                            .join('; ');
                        errorMessage = `Érvényesítési hibák: ${errorMessages}`;
                    } else {
                        errorMessage += ` ${errorJson.title || errorText}`;
                    }
                } catch {
                    errorMessage += ` Szerver hiba: ${errorText}`;
                }
                throw new Error(errorMessage);
            }

            console.log('Save communication success:', response.status);
            showToast('Kommunikáció sikeresen mentve!', 'success');
            window.location.reload();
        } catch (error) {
            console.error('Save communication error:', error);
            showToast(`Kommunikáció mentése sikertelen: ${error.message}`, 'danger');
        }
    }

    // --- Add Post ---
    function addPost(communicationId) {
        const form = document.getElementById(`addPostForm_${communicationId}`);
        if (!form) {
            console.error('Post form not found for communicationId:', communicationId);
            showToast('Hiba: A hozzászólás űrlap nem található.', 'danger');
            return;
        }

        const formData = new FormData(form);
        const data = { Content: formData.get('Content')?.trim() || '' };

        if (!data.Content) {
            showToast('Kérjük, adja meg a hozzászólás tartalmát.', 'danger');
            return;
        }

        $.ajax({
            url: `/api/customercommunication/${communicationId}/post`,
            type: 'POST',
            headers: {
                'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value,
                'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
            },
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function () {
                console.log('Post added successfully');
                showToast('Hozzászólás sikeresen hozzáadva!', 'success');
                form.reset();
                loadCommunicationHistory(communicationId);
            },
            error: function (xhr) {
                console.error('Post add error:', xhr.responseText);
                showToast(`Hozzászólás hozzáadása sikertelen: ${xhr.responseText}`, 'danger');
            }
        });
    }

    // --- Assign Responsible ---
    function assignResponsible(communicationId) {
        const form = document.getElementById(`assignResponsibleForm_${communicationId}`);
        if (!form) {
            console.error('Responsible form not found for communicationId:', communicationId);
            showToast('Hiba: A felelős kijelölés űrlap nem található.', 'danger');
            return;
        }

        const formData = new FormData(form);
        const data = { ResponsibleContactId: parseInt(formData.get('ResponsibleContactId')) || null };

        if (!data.ResponsibleContactId) {
            showToast('Kérjük, válasszon ki egy felelőst.', 'danger');
            return;
        }

        $.ajax({
            url: `/api/customercommunication/${communicationId}/assign-responsible`,
            type: 'POST',
            headers: {
                'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value,
                'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
            },
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function () {
                console.log('Responsible assigned successfully');
                showToast('Felelős sikeresen kijelölve!', 'success');
                form.reset();
                loadCommunicationHistory(communicationId);
            },
            error: function (xhr) {
                console.error('Responsible assignment error:', xhr.responseText);
                showToast(`Felelős kijelölése sikertelen: ${xhr.responseText}`, 'danger');
            }
        });
    }

    // --- Initialize Modals ---
    const newCommunicationModal = document.getElementById('newCommunicationModal');
    if (newCommunicationModal) {
        newCommunicationModal.addEventListener('shown.bs.modal', function() {
            console.log('New Communication modal shown');
            const contactSelect = document.querySelector('#communicationForm_new select[name="ContactId"]');
            if (contactSelect) {
                initializeTomSelect(contactSelect, 'new', { endpoint: '/api/partners', dataKey: 'contacts', placeholder: '-- Válasszon partnert --' });
            } else {
                console.error('ContactId select not found');
            }
            const responsibleSelect = document.querySelector('#communicationForm_new select[name="ResponsibleContactId"]');
            if (responsibleSelect) {
                initializeTomSelect(responsibleSelect, 'new', { endpoint: '/api/partners', dataKey: 'contacts', placeholder: '-- Válasszon felelőst --' });
            } else {
                console.error('ResponsibleContactId select not found');
            }
            const partnerSelect = document.querySelector('#communicationForm_new select[name="PartnerId"]');
            if (partnerSelect) {
                initializeTomSelect(partnerSelect, 'new', { endpoint: '/api/partners', dataKey: 'partners', placeholder: '-- Válasszon partnert --' });
            } else {
                console.error('PartnerId select not found');
            }
            const quoteSelect = document.querySelector('#communicationForm_new select[name="QuoteId"]');
            if (quoteSelect) {
                initializeTomSelect(quoteSelect, 'new', { endpoint: '/api/partners', dataKey: 'quotes', placeholder: '-- Válasszon árajánlatot --' });
            } else {
                console.error('QuoteId select not found');
            }
            const orderSelect = document.querySelector('#communicationForm_new select[name="OrderId"]');
            if (orderSelect) {
                initializeTomSelect(orderSelect, 'new', { endpoint: '/api/orders', dataKey: 'orders', placeholder: '-- Válasszon rendelést --' });
            } else {
                console.error('OrderId select not found');
            }
        });
        newCommunicationModal.addEventListener('hidden.bs.modal', function () {
            console.log('New Communication modal hidden');
            document.querySelector('#communicationForm_new').reset();
            document.querySelectorAll('#communicationForm_new .tom-select').forEach(select => {
                if (select.tomselect) {
                    select.tomselect.destroy();
                }
            });
        });
    }

    document.querySelectorAll('.view-communication-btn').forEach(button => {
        button.addEventListener('click', () => {
            const communicationId = button.closest('.partner-card').dataset.communicationId;
            const contactSelect = document.querySelector(`#editCommunicationModal_${communicationId} select[name="ContactId"]`);
            if (contactSelect) {
                initializeTomSelect(contactSelect, communicationId, { endpoint: '/api/partners', dataKey: 'contacts' });
            }
            const responsibleSelect = document.querySelector(`#assignResponsibleForm_${communicationId} select[name="ResponsibleContactId"]`);
            if (responsibleSelect) {
                initializeTomSelect(responsibleSelect, communicationId, { endpoint: '/api/partners', dataKey: 'contacts' });
            }
            loadCommunicationHistory(communicationId);
        });
    });

    document.querySelectorAll('.save-communication').forEach(button => {
        button.addEventListener('click', () => {
            const communicationId = button.dataset.communicationId;
            saveCommunication(communicationId);
        });
    });

    document.querySelectorAll('.add-post').forEach(button => {
        button.addEventListener('click', () => {
            const communicationId = button.dataset.communicationId;
            addPost(communicationId);
        });
    });

    document.querySelectorAll('.assign-responsible').forEach(button => {
        button.addEventListener('click', () => {
            const communicationId = button.dataset.communicationId;
            assignResponsible(communicationId);
        });
    });

    // --- Delete Communication ---
    $(document).on('click', '.confirm-delete-communication', function (e) {
        e.preventDefault();
        const $button = $(this);
        const communicationId = $button.data('communication-id');
        console.log('Delete button clicked for communicationId:', communicationId);

        if (!communicationId) {
            console.error('communicationId is missing');
            showToast('Hiba: Kommunikáció azonosító hiányzik.', 'danger');
            return;
        }

        const $form = $(`#deleteCommunicationForm_${communicationId}`);
        if ($form.length) {
            const token = $form.find('input[name="__RequestVerificationToken"]').val();
            if (!token) {
                console.error('Anti-forgery token not found');
                showToast('Hiba: Biztonsági token hiányzik.', 'danger');
                return;
            }

            $button.prop('disabled', true);

            $.ajax({
                url: `/api/customercommunication/${communicationId}`,
                type: 'DELETE',
                headers: { 
                    'RequestVerificationToken': token,
                    'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
                },
                success: function (data, status, xhr) {
                    console.log('Delete response:', { status: xhr.status, data });
                    if (xhr.status === 204) {
                        $(`#deleteCommunicationModal_${communicationId}`).modal('hide');
                        showToast(`Kommunikáció azonosító: ${communicationId} sikeresen törölve!`, 'success');
                        $(`div[data-communication-id="${communicationId}"]`).fadeOut(500, function () {
                            $(this).remove();
                        });
                    } else {
                        showToast(`Sikeres törlés, de váratlan válasz: ${xhr.status}`, 'warning');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Delete error:', { status: xhr.status, response: xhr.responseText });
                    let message = 'Hiba történt a törlés során.';
                    if (xhr.status === 404) {
                        message = xhr.responseJSON?.error || 'A kommunikáció nem található.';
                    } else if (xhr.status === 500) {
                        message = xhr.responseJSON?.error || 'Szerver hiba történt.';
                    }
                    showToast(message, 'danger');
                },
                complete: function () {
                    $button.prop('disabled', false);
                }
            });
        } else {
            console.error('Form not found for communicationId:', communicationId);
            showToast('Hiba: Törlési űrlap nem található.', 'danger');
        }
    });

    // --- Copy Communication ---
    function copyCommunication(communicationId) {
        let isCopying = false;
        if (isCopying) {
            console.log('Copy in progress, ignoring additional click for communication ID:', communicationId);
            return;
        }
        isCopying = true;

        const dropdownItem = document.querySelector(`a[onclick="copyCommunication(${communicationId})"]`);
        if (dropdownItem) {
            dropdownItem.classList.add('disabled');
            dropdownItem.style.pointerEvents = 'none';
        }

        console.log('Initiating copy for communication ID:', communicationId);
        fetch(`/api/customercommunication/${communicationId}/copy`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
            }
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        let errorMessage;
                        try {
                            const err = JSON.parse(text);
                            errorMessage = err.error || `HTTP error: ${response.status}`;
                        } catch {
                            errorMessage = text || `HTTP error: ${response.status}`;
                        }
                        throw new Error(errorMessage);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Communication copied successfully:', data);
                showToast(`Kommunikáció azonosító: ${data.communicationId} sikeresen másolva!`, 'success');
                location.reload();
            })
            .catch(error => {
                console.error('Copy communication failed:', error.message);
                showToast(`Nem sikerült másolni a kommunikációt: ${error.message}`, 'danger');
            })
            .finally(() => {
                isCopying = false;
                if (dropdownItem) {
                    dropdownItem.classList.remove('disabled');
                    dropdownItem.style.pointerEvents = 'auto';
                }
            });
    }

    // --- Filter/Sort Dropdown Logic ---
    const filterItems = document.querySelectorAll('.dropdown-menu [data-filter]');
    filterItems.forEach(item => {
        item.addEventListener('click', function (e) {
            e.preventDefault();
            const filter = this.getAttribute('data-filter');
            const sort = this.getAttribute('data-sort') || 'CommunicationDate';
            console.log('Clicked filter/sort item:', { filter, sort });

            let form = document.querySelector('form.input-group');
            if (form) {
                console.log('Form found, submitting:', { filter, sort });
                form.querySelectorAll('input[name="TypeFilter"], input[name="SortBy"]').forEach(input => input.remove());

                const typeInput = document.createElement('input');
                typeInput.type = 'hidden';
                typeInput.name = 'TypeFilter';
                typeInput.value = filter === 'all' ? '' : filter;
                form.appendChild(typeInput);

                const sortInput = document.createElement('input');
                sortInput.type = 'hidden';
                sortInput.name = 'SortBy';
                sortInput.value = sort;
                form.appendChild(sortInput);

                form.submit();
            } else {
                console.error('Form not found.');
            }
        });
    });
});
</script>

<style>

    .custom-toast .toast-body {
        background-color: #ffffff !important; /* White background */
        color: #212529 !important; /* Dark text (Bootstrap's --bs-body-color) */
    }
    .toast-header.bg-success {
        background-color: #198754 !important; /* Ensure green header */
        color: #ffffff !important;
    }
    .toast-header.bg-danger {
        background-color: #dc3545 !important; /* Ensure red header */
        color: #ffffff !important;
    }

    .ts-wrapper.form-select {
    width: 100%;
    padding: 0;
    position: relative;
}
.ts-control {
    min-height: calc(1.5em + 0.75rem + 2px);
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    background-color: #fff;
    cursor: pointer;
}
.ts-dropdown {
    z-index: 1070 !important; /* Above Select2 (1060) and modal (1050) */
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    background-color: #fff;
    display: none; /* Tom Select toggles */
    visibility: visible !important;
    opacity: 1 !important;
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
}
.ts-dropdown.active {
    display: block !important;
}
.ts-dropdown .option {
    padding: 0.375rem 0.75rem;
    cursor: pointer;
}
.ts-dropdown .option:hover {
    background-color: #f8f9fa;
}
[data-theme="dark"] .ts-wrapper.form-select {
    background-color: #2a2a2a;
}
[data-theme="dark"] .ts-control {
    background-color: #333333 !important;
    border-color: #666 !important;
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown {
    background-color: #2a2a2a !important;
    border-color: #666 !important;
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown .option {
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown .option:hover {
    background-color: #3a3a3a !important;
}

    .table .description-row {
        background-color: #f8f9fa; /* Light background for description row */
    }
    .table .description-row td {
        padding: 10px;
    }
    .table .description {
        resize: vertical;
        min-height: 60px;
        max-height: 100px;
        width: 100%;
    }
    .table th:nth-child(1), .table td:nth-child(1) { /* Product column */
        max-width: 200px;
    }
    .btn-link {
        text-decoration: none;
    }
    .nav-tabs {
        margin-bottom: 15px;
    }
    .tab-content {
        min-height: 200px; /* Ensure tab content has enough space */
    }

.drag-handle {
    cursor: move;
    width: 30px;
    text-align: center;
    vertical-align: middle;
}

.drag-handle .bi-grip-vertical {
    font-size: 1.2rem;
    color: #6c757d;
}

#orderItemsTable tbody tr:hover .drag-handle .bi-grip-vertical {
    color: #007bff;
}

#orderItemsTable .placeholder {
    background-color: #f8f9fa;
    border: 2px dashed #007bff;
    height: 50px;
}



[data-theme="dark"] .partner-card {
        background-color: #2a2a2a;
        border: 1px solid #444;
    }


/* Badge styling */
.badge-draft { background-color: #6c757d; }
.badge-sent { background-color: #007bff; }
.badge-accepted { background-color: #28a745; }
.badge-rejected { background-color: #dc3545; }

    /* Ensure textarea in Leírás column is wider and readable */
    #orderItemsTable .itemDescription {
        width: 100%;
        min-width: 200px;
        height: 60px;
        resize: vertical;
    }
    /* Adjust table column widths */
    #orderItemsTable th:nth-child(2), #orderItemsTable td:nth-child(2) {
        width: 30%;
    }

        /* Card-based layout matching Leads page */
        .card-grid-header {
            padding: 0 15px 2px 15px;
            margin-top: 0px;
            background-color: #F1EFEC;
            border-bottom: 1px solid #dee2e6;
        }

        .card-grid-row {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr 1fr 1fr auto;
            gap: 10px;
            align-items: center;
        }

        .card-grid-column {
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .card-grid-cell {
            padding: 0 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

/* Column widths */
.communication-type-col { flex: 1 1 15%; min-width: 120px; }
.communication-partner-col { flex: 1 1 25%; min-width: 150px; }
.communication-date-col { flex: 1 1 15%; min-width: 100px; }
.communication-subject-col { flex: 1 1 15%; min-width: 100px; }
.communication-status-col { flex: 1 1 15%; min-width: 120px; }
.actions-column, .actions-cell { flex: 0 0 auto; width: auto; text-align: right; padding-right: 10px; }

        /* Button group styling */
        .btn-group-sm .btn {
            padding: 0.2rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Badge styling */
        .badge-draft { background-color: #6c757d; }
        .badge-sent { background-color: #007bff; }
        .badge-accepted { background-color: #28a745; }
        .badge-rejected { background-color: #dc3545; }

        /* Ensure pagination is centered */
        .fixed-footer .pagination {
            display: flex;
            justify-content: center;
            width: 100%;
            margin-bottom: 0;
        }

        .fixed-footer nav {
            flex-grow: 1;
            text-align: center;
        }

        /* Modal Sizing */
        .modal-lg { max-width: 1000px !important; }

        /* Consistent Tab Content Styling */
        #newOrderModal .tab-content,
        #newOrderItemModal .tab-content,
        [id^="editOrderModal_"] .tab-content,
        [id^="newOrderItemModal_"] .tab-content,
        [id^="viewOrderModal_"] .tab-content {
            min-width: 0;
            width: 100%;
            min-height: 450px;
            max-height: 65vh;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 1rem;
            background-color: #fff;
        }

        /* Consistent Tab Pane Styling */
        #newOrderModal .tab-pane,
        #newOrderItemModal .tab-pane,
        [id^="editOrderModal_"] .tab-pane,
        [id^="newOrderItemModal_"] .tab-pane,
        [id^="viewOrderModal_"] .tab-pane {
            width: 100%;
        }

        /* Adjust Modal Body Padding */
        #newOrderModal .modal-body,
        #newOrderItemModal .modal-body,
        [id^="editOrderModal_"] .modal-body,
        [id^="newOrderItemModal_"] .modal-body,
        [id^="viewOrderModal_"] .modal-body {
            padding: 1rem 1rem 0 1rem;
        }

        /* Remove margin below tabs */
        #newOrderModal .nav-tabs,
        [id^="editOrderModal_"] .nav-tabs,
        [id^="viewOrderModal_"] .nav-tabs {
            margin-bottom: 0 !important;
        }

        /* General Table Cell Styling */
        .table tbody tr td {
            vertical-align: middle;
        }

        /* View Modal Specific Content Styling */
        [id^="viewOrderModal_"] .table {
            margin-bottom: 0;
        }

        [id^="viewOrderModal_"] .tab-pane > p {
            padding: 1.5rem;
            text-align: center;
            color: #6c757d;
        }

        /* Select2 styling */
.select2-container {
            width: 100% !important;
        }

        .select2-container {
    z-index: 1060; /* Higher than Bootstrap modal */
}

        .select2-container--bootstrap-5 .select2-selection--single {
            height: 38px;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            background-color: #fff;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
            padding-top: 0;
            padding-bottom: 0;
            color: #495057;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: 38px;
            right: 0.75rem;
        }

        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        .select2-container-wrapper {
            position: relative;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single {
            background-color: #3a3a3a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-dropdown {
            background-color: #2a2a2a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option--highlighted {
            background-color: #357abd;
            color: #ffffff;
        }

        /* Dark mode overrides */
        [data-theme="dark"] .card-grid-header {
            background-color: #2a2a2a;
            border-bottom: 1px solid #444;
        }

        [data-theme="dark"] .card-grid-column {
            color: #b0b0b0;
        }

        [data-theme="dark"] .order-card {
            background-color: #2a2a2a;
            border: 1px solid #444;
        }

        [data-theme="dark"] .fixed-footer {
            background-color: #2a2a2a;
            border-top: 1px solid #444;
        }

        [data-theme="dark"] .alert-success {
            background-color: #2e7d32;
            border-color: #1b5e20;
            color: #e0e0e0;
        }

        [data-theme="dark"] .alert-danger {
            background-color: #d32f2f;
            border-color: #b71c1c;
            color: #e0e0e0;
        }

        [data-theme="dark"] #newOrderModal .tab-content,
        [data-theme="dark"] #newOrderItemModal .tab-content,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-content,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-content {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .tab-pane,
        [data-theme="dark"] #newOrderItemModal .tab-pane,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-pane,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-pane {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .modal-body,
        [data-theme="dark"] #newOrderItemModal .modal-body,
        [data-theme="dark"] [id^="editOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="newOrderItemModal_"] .modal-body,
        [data-theme="dark"] [id^="viewOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="deleteOrderModal_"] .modal-body {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control {
            background-color: #333333 !important;
            border-color: #666 !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control:focus {
            background-color: #333333 !important;
            border-color: #888 !important;
            color: #e0e0e0 !important;
            box-shadow: 0 0 0 0.2rem rgba(100, 100, 100, 0.25) !important;
        }

        [data-theme="dark"] .form-control::placeholder {
            color: #aaaaaa !important;
        }

        [data-theme="dark"] .form-label {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .modal-title {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs {
            background-color: #2a2a2a !important;
            border-bottom: 1px solid #444 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link {
            color: #b0b0b0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link:hover {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link.active {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
            border-color: #444 #444 #2a2a2a !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane > p {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table th,
        [data-theme="dark"] [id^="viewOrderModal_"] .table td {
            border-color: #444 !important;
            color: #e0e0e0 !important;
        }
    </style>