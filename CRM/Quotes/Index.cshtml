
@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Cloud9_2.Models
@using System.Globalization
@model Cloud9_2.Pages.CRM.Quotes.IndexModel
@section Styles {
    <link rel="stylesheet" href="~/css/Quotes.css" />
}
@using System.Security.Claims
@{
    var username = User.Identity?.Name ?? "System";
}


@{
    Layout = "_Layout";
}

@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Quotes</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Quotes.Count of @Model.TotalRecords quote@(Model.TotalRecords != 1 ? "s" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newQuoteButton" class="btn-new" data-bs-toggle="modal" data-bs-target="#newQuoteModal" aria-label="Új árajánlat létrehozása">
                    <i class="bi bi-plus-circle me-1"></i>Új árajánlat
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" asp-page="./Index" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés árajánlatok között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
        <!-- Filter/Sort Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item active" href="#" data-filter="all" data-sort="QuoteDate">Összes árajánlat (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="all" data-sort="QuoteId">Rendezés: Árajánlat ID (Csökkenő)</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="all" data-sort="ValidityDate">Érvényességi dátum</a></li>                    </ul>
                </div>
            </div>
        </div>

        <!-- Card Grid Header -->
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column quote-number-col">Ajánlat szám</div>
                <div class="card-grid-column quote-partner-col">Partner</div>
                <div class="card-grid-column quote-date-col">Dátum</div>
                <div class="card-grid-column quote-status-col">Státusz</div>
                <div class="card-grid-column quote-amount-col">Ajánlat összege</div>
                <div class="card-grid-column actions-column">Műveletek</div>
            </div>
        </div>
    </div>

    <!-- Card Grid Body -->
    <div class="scrollable-card-container">
        <div class="card-grid-body">
            @if (Model.Quotes.Any())
            {
                @foreach (var quote in Model.Quotes)
                {
                    <div class="card partner-card mb-3" data-quote-id="@quote.QuoteId">
                        <div class="card-body p-2">
                            <div class="card-grid-row align-items-center">
                                <div class="card-grid-cell quote-number-col">
                                    <div class="quote-info">
                                        <div class="fw-bold">@quote.QuoteNumber</div>
                                    </div>
                                </div>
                                <div class="card-grid-cell quote-partner-col">
                                    <div class="quote-partner text-muted small">
                                        <i class="bi bi-person me-1"></i>@quote.Partner.Name
                                    </div>
                                </div>
                                <div class="card-grid-cell quote-date-col">
                                    <div class="quote-date text-muted small">
                                        <i class="bi bi-calendar me-1"></i>@quote.QuoteDate?.ToString("yyyy-MM-dd")
                                    </div>
                                </div>
                                <div class="card-grid-cell quote-status-col">
                                    @{
                                        var badgeClass = "badge bg-secondary";
                                        if (quote.Status == "Tervezet") badgeClass = "badge badge-draft";
                                        else if (quote.Status == "Elküldve") badgeClass = "badge badge-sent";
                                        else if (quote.Status == "Elfogadva") badgeClass = "badge badge-accepted";
                                        else if (quote.Status == "Elutasítva") badgeClass = "badge badge-rejected";
                                    }
                                    <span class="@badgeClass">@quote.Status</span>
                                </div>
                                <div class="card-grid-cell quote-amount-col">
                                    <div class="quote-amount text-muted small">
                                        <i class="bi bi-currency-dollar me-1"></i>@quote.TotalAmount?.ToString("C")
                                    </div>
                                </div>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-info btn-sm view-quote-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewQuoteModal_@quote.QuoteId"
                                            aria-label="Árajánlat részleteinek megtekintése">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                id="actionsDropdown_@quote.QuoteId"
                                                data-bs-toggle="dropdown" 
                                                aria-expanded="false"
                                                aria-label="További műveletek">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@quote.QuoteId">
                                            <li>
                                            <a 
                                                class="dropdown-item" 
                                                href="#" 
                                                data-bs-toggle="modal" 
                                                data-bs-target="#editQuoteModal_@quote.QuoteId">
                                                <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                            </a>
                                            </li>
                                            <li><a class="dropdown-item" href="#" onclick="copyQuote(@quote.QuoteId)"><i class="bi bi-copy me-2"></i>Másolás</a></li>
                                                <li>
                                                <a 
                                                    class="dropdown-item" 
                                                    href="#" 
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#convertQuoteModal_@quote.QuoteId">
                                                    <i class="bi bi-arrow-right-circle me-2"></i>Átalakítás rendeléssé
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteQuoteModal_@quote.QuoteId"><i class="bi bi-trash me-2"></i>Törlés</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


@*                 <!-- Edit Quote Modal -->
                <div class="modal fade" id="editQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="editQuoteModalLabel_@quote.QuoteId" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false" data-partner-id="@quote.PartnerId" data-quote-date="@(quote.QuoteDate?.ToString("yyyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd"))">
                    <div class="modal-dialog" style="max-width: 95%;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editQuoteModalLabel_@quote.QuoteId">Árajánlat szerkesztése: @quote.QuoteNumber</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <!-- Tabs -->
                                <ul class="nav nav-tabs" id="quoteTabs_@quote.QuoteId" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="base-info-tab_@quote.QuoteId" data-bs-toggle="tab" data-bs-target="#base-info_@quote.QuoteId" type="button" role="tab" aria-controls="base-info_@quote.QuoteId" aria-selected="true">Alapadatok</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="items-tab_@quote.QuoteId" data-bs-toggle="tab" data-bs-target="#items_@quote.QuoteId" type="button" role="tab" aria-controls="items_@quote.QuoteId" aria-selected="false">Tételek</button>
                                    </li>
                                </ul>

                                <!-- Tab Content -->
                                <div class="tab-content" id="quoteTabContent_@quote.QuoteId">
                                    <!-- Base Info Tab -->
                                    <div class="tab-pane fade show active" id="base-info_@quote.QuoteId" role="tabpanel" aria-labelledby="base-info-tab_@quote.QuoteId">
                                        <form id="quoteBaseInfoForm_@quote.QuoteId">
                                            <table class="table table-sm mt-3">
                                                <tbody>
                                                    <tr>
                                                        <th>Árajánlat száma</th>
                                                        <td><input type="text" class="form-control" name="quoteNumber" value="@quote.QuoteNumber" readonly></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Dátum</th>
                                                        <td><input type="date" class="form-control" name="quoteDate" value="@quote.QuoteDate?.ToString("yyyy-MM-dd")" required></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Partner</th>
                                                        <td>
                                                            <select name="partnerId" class="form-select tom-select partner-select" data-selected-id="@quote.PartnerId" data-selected-text="@(quote.Partner?.CompanyName ?? "Unknown")" autocomplete="off" required>
                                                                <option value=""></option>
                                                            </select>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <th>Pénznem</th>
                                                        <td>
                                                            <select name="currencyId" class="form-select tom-select" data-selected-id="@quote.CurrencyId" data-selected-text="@(quote.Currency?.CurrencyName ?? "Unknown")" autocomplete="off" required>
                                                                <option value=""></option>
                                                            </select>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <th>Értékesítő</th>
                                                        <td><input type="text" class="form-control" name="salesPerson" value="@(quote.SalesPerson ?? "")"></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Érvényességi dátum</th>
                                                        <td><input type="date" class="form-control" name="validityDate" value="@(quote.ValidityDate?.ToString("yyyy-MM-dd") ?? "")"></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Tárgy</th>
                                                        <td><input type="text" class="form-control" name="subject" value="@(quote.Subject ?? "")" required></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Leírás</th>
                                                        <td><textarea class="form-control" name="description">@(quote.Description ?? "")</textarea></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Részletes leírás</th>
                                                        <td><textarea class="form-control" name="detailedDescription">@(quote.DetailedDescription ?? "")</textarea></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Státusz</th>
                                                        <td>
                                                            @{
                                                                var statusDisplay = new Dictionary<string, string>
                                                                {
                                                                    { "InProgress", "Folyamatban" },
                                                                    { "Accepted", "Elfogadva" },
                                                                    { "Rejected", "Elutasítva" },
                                                                    { "Draft", "Piszkozat" }
                                                                };
                                                            }
                                                            <select class="form-select" name="status" required>
                                                                @foreach (var status in Enum.GetValues(typeof(Cloud9_2.Pages.CRM.Quotes.QuoteStatus)))
                                                                {
                                                                    var displayText = statusDisplay.ContainsKey(status.ToString()) ? statusDisplay[status.ToString()] : status.ToString();
                                                                    <option value="@status" selected="@(quote.Status == status.ToString())">@displayText</option>
                                                                }
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </form>
                                    </div>

                                    <!-- Items Tab -->
                                    <div class="tab-pane fade" id="items_@quote.QuoteId" role="tabpanel" aria-labelledby="items-tab_@quote.QuoteId">
                                        <button type="button" class="btn btn-primary mb-3 add-item-row" data-quote-id="@quote.QuoteId">Tétel hozzáadása</button>
                                        <form id="quoteItemsForm_@quote.QuoteId" data-quote-id="@quote.QuoteId">
                                            <!-- Hidden fields for totals -->
                                            <input type="hidden" name="TotalNet" class="quote-total-net-input" value="0">
                                            <input type="hidden" name="TotalVat" class="quote-vat-amount-input" value="0">
                                            <input type="hidden" name="TotalGross" class="quote-gross-amount-input" value="0">
                                            <div class="table-responsive">
                                                <table class="table table-sm table-bordered" id="quoteItemsTable_@quote.QuoteId">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 25%;">Termék</th>
                                                            <th style="width: 5%;">Mennyiség</th>
                                                            <th style="width: 10%;">Listaár</th>
                                                            <th style="width: 10%;">Ügyfél ár</th>
                                                            <th style="width: 8%;">Mennyiségi kedvezmény</th>
                                                            <th style="width: 8%;">Egyedi kedvezmény</th>
                                                            <th style="width: 8%;">Kedvezmény típus</th>
                                                            <th style="width: 8%;">Listaár összesen</th>
                                                            <th style="width: 8%;">Nettó kedvezményes ár</th>
                                                            <th style="width: 3%;">ÁFA</th>
                                                            <th style="width: 10%;">ÁFA érték</th>
                                                            <th style="width: 10%;">Bruttó ár</th>
                                                            <th style="width: 3%;">Műveletek</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="items-tbody_@quote.QuoteId">
                                                        @foreach (var item in quote.Items)
                                                        {
                                                            <script>console.log('Server-side item ID:', '@item.QuoteItemId', 'ProductId:', '@item.ProductId', 'VatTypeId:', '@item.VatTypeId');</script>
                                                            <tr class="quote-item-row" data-item-id="@item.QuoteItemId">
                                                                <td>
                                                                    <select name="quoteItems[@item.QuoteItemId].ProductId" class="form-select tom-select-product" data-selected-id="@item.ProductId" data-selected-text="@(item.ItemDescription ?? "Unknown")" autocomplete="off" required>
                                                                        <option value="" disabled selected>-- Válasszon terméket --</option>
                                                                    </select>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="quoteItems[@item.QuoteItemId].Quantity" class="form-control form-control-sm item-quantity" value="@item.Quantity.ToString(CultureInfo.InvariantCulture)" min="0" step="1" required>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="quoteItems[@item.QuoteItemId].ListPrice" class="form-control form-control-sm item-list-price" value="@(item.ListPrice?.ToString(CultureInfo.InvariantCulture) ?? "0")" min="0" step="0.01" required readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="quoteItems[@item.QuoteItemId].PartnerPrice" class="form-control form-control-sm item-partner-price" value="@(item.PartnerPrice?.ToString(CultureInfo.InvariantCulture) ?? "0")" min="0" step="0.01" required readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="quoteItems[@item.QuoteItemId].VolumePrice" class="form-control form-control-sm quantity-discount" value="@(item.VolumePrice?.ToString(CultureInfo.InvariantCulture) ?? "0")" min="0" step="0.01" readonly style="background-color: #f8f9fa; cursor: not-allowed;">
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="quoteItems[@item.QuoteItemId].DiscountAmount" class="form-control form-control-sm discount-value" value="@(item.DiscountAmount?.ToString(CultureInfo.InvariantCulture) ?? "0")" min="0" step="0.01">
                                                                </td>
                                                                <td>
                                                                    <select name="quoteItems[@item.QuoteItemId].DiscountType" class="form-select form-select-sm discount-type" data-discount-name-prefix="quoteItems[@item.QuoteItemId]">
                                                                        <option value="NoDiscount" selected="@(item.DiscountType == null)">Nincs Kedvezmény</option>
                                                                        <option value="ListPrice" selected="@(item.DiscountType == DiscountType.ListPrice)">Listaár</option>
                                                                        <option value="PartnerPrice" selected="@(item.DiscountType == DiscountType.PartnerPrice)">Ügyfélár</option>
                                                                        <option value="VolumeDiscount" selected="@(item.DiscountType == DiscountType.VolumeDiscount)">Mennyiségi kedvezmény</option>
                                                                        <option value="CustomDiscountPercentage" selected="@(item.DiscountType == DiscountType.CustomDiscountPercentage)">Egyedi kedvezmény %</option>
                                                                        <option value="CustomDiscountAmount" selected="@(item.DiscountType == DiscountType.CustomDiscountAmount)">Egyedi kedvezmény Összeg</option>
                                                                    </select>
                                                                </td>
                                                                <td>
                                                                    <span class="item-list-price-total">@((item.Quantity * (item.ListPrice ?? 0)).ToString("F2", CultureInfo.InvariantCulture))</span>
                                                                </td>
                                                                <td>
                                                                    <span class="item-net-discounted-price">@item.NetDiscountedPrice.ToString("F2", CultureInfo.InvariantCulture)</span>
                                                                </td>
                                                                <td>
                                                                    <input type="text" name="quoteItems[@item.QuoteItemId].VatTypeId" class="form-control form-control-sm tom-select-vat item-vat" data-selected-id="@(item.VatTypeId > 0 ? item.VatTypeId.ToString() : "1")" data-selected-text="@(item.VatType != null && item.VatTypeId > 0 ? $"{item.VatType.Rate:F2}%" : "27,00%")" placeholder="Válasszon ÁFA-t" autocomplete="off" required>
                                                                </td>
                                                                <td>
                                                                    <span class="item-vat-amount">0.00</span>
                                                                </td>
                                                                <td>
                                                                    <span class="item-total">0.00</span>
                                                                    <input type="hidden" name="quoteItems[@item.QuoteItemId].ItemDescription" class="item-description" value="@(item.ItemDescription ?? "")">
                                                                </td>
                                                                <td>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="@item.QuoteItemId"><i class="bi bi-pencil"></i></button>
                                                                    <button type="button" class="btn btn-danger btn-sm remove-item-row" data-item-id="@item.QuoteItemId"><i class="bi bi-trash"></i></button>
                                                                </td>
                                                            </tr>
                                                            <tr class="description-row" data-item-id="@item.QuoteItemId" style="display: none;">
                                                                <td colspan="13">
                                                                    <div class="mb-2">
                                                                        <label class="form-label">Leírás (max 200 karakter)</label>
                                                                        <textarea name="quoteItems[@item.QuoteItemId].ItemDescriptionInput" class="form-control form-control-sm item-description-input" maxlength="200" rows="2">@(item.ItemDescription ?? "")</textarea>
                                                                        <div class="form-text">Karakterek: <span class="char-count">@((item.ItemDescription?.Length ?? 0))</span>/200</div>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                        <!-- Quote Total Row -->
                                                        <tr class="quote-total-row">
                                                            <td colspan="10" class="text-end"><strong>Kedvezmény a végösszegre %:</strong></td>
                                                            <td><input type="number" class="form-control total-discount-input" name="TotalDiscount" value="@(quote.DiscountPercentage?.ToString(CultureInfo.InvariantCulture) ?? (quote.QuoteDiscountAmount?.ToString(CultureInfo.InvariantCulture) ?? "0"))" min="0" step="0.01"></td>
                                                            <td colspan="2"></td>
                                                        </tr>
                                                        <tr class="quote-total-row">
                                                            <td colspan="10" class="text-end"><strong>Összesen Nettó:</strong></td>
                                                            <td><span class="quote-total-net">0.00</span></td>
                                                            <td colspan="2"></td>
                                                        </tr>
                                                        <tr class="quote-vat-row">
                                                            <td colspan="10" class="text-end"><strong>Összes ÁFA:</strong></td>
                                                            <td><span class="quote-vat-amount">0.00</span></td>
                                                            <td colspan="2"></td>
                                                        </tr>
                                                        <tr class="quote-gross-row">
                                                            <td colspan="10" class="text-end"><strong>Összesen Bruttó:</strong></td>
                                                            <td><span class="quote-gross-amount">0.00</span></td>
                                                            <td colspan="2"></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                                <button type="button" class="btn btn-primary save-quote" data-quote-id="@quote.QuoteId">Mentés</button>
                            </div>
                        </div>
                    </div>
                </div> *@


                <!-- New Quote Modal -->
                <div class="modal fade" id="newQuoteModal" tabindex="-1" aria-labelledby="newQuoteModalLabel" aria-hidden="true">
                    <div class="modal-dialog" style="max-width: 95%;"> 
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="newQuoteModalLabel">Új árajánlat létrehozása</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Tabs -->
                            <ul class="nav nav-tabs" id="quoteTabs_new" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="base-info-tab_new" data-bs-toggle="tab" data-bs-target="#base-info_new" type="button" role="tab" aria-controls="base-info_new" aria-selected="true">Alapadatok</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="items-tab_new" data-bs-toggle="tab" data-bs-target="#items_new" type="button" role="tab" aria-controls="items_new" aria-selected="false">Tételek</button>
                                </li>
                            </ul>

                            <!-- Tab Content -->
                            <div class="tab-content" id="quoteTabContent_new">
                                <!-- Base Info Tab -->
                                <div class="tab-pane fade show active" id="base-info_new" role="tabpanel" aria-labelledby="base-info-tab_new">
                                    <form id="quoteBaseInfoForm_new">
                                        <div class="table-responsive">
                                            <table class="table table-sm mt-3">
                                                <tbody>
                                                    <tr>
                                                        <th>Árajánlat száma</th>
                                                        <td><input type="text" class="form-control" name="quoteNumber" value="" placeholder="Automatikusan generálódik" readonly></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Dátum</th>
                                                        <td><input type="date" class="form-control" name="quoteDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" required></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Partner</th>
                                                        <td>
                                                            <select name="partnerId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                                <option value="" disabled selected> </option>
                                                            </select>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <th>Értékesítő</th>
                                                        <td><input type="text" class="form-control" name="salesPerson" value=""></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Érvényességi dátum</th>
                                                        <td><input type="date" class="form-control" name="validityDate" value="@DateTime.Today.AddDays(30).ToString("yyyy-MM-dd")"></td>
                                                    </tr>
                                                    <tr>
                                                    <th>Pénznem</th>
                                                    <td>
                                                        <select name="currencyId" class="form-select tom-select" id="currencySelect" required>
                                                            <option value="" disabled selected>-- Válasszon pénznemet --</option>
                                                        </select>
                                                    </td>
                                                    </tr>
                                                    <tr>
                                                        <th>Tárgy</th>
                                                        <td><input type="text" class="form-control" name="subject" value="" required></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Leírás</th>
                                                        <td><textarea class="form-control" name="description" ></textarea></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Részletes leírás</th>
                                                        <td><textarea class="form-control" name="detailedDescription" ></textarea></td>
                                                    </tr>
                                                    <tr>
                                                        <th>Státusz</th>
                                                        <td>
                                                            <select class="form-select" name="status" required>
                                                                @foreach (var status in Enum.GetValues(typeof(Cloud9_2.Pages.CRM.Quotes.QuoteStatus)))
                                                                {
                                                                    var displayText = new Dictionary<string, string>
                                                                    {
                                                                        { "InProgress", "Folyamatban" },
                                                                        { "Accepted", "Elfogadva" },
                                                                        { "Rejected", "Elutasítva" },
                                                                        { "Draft", "Piszkozat" }
                                                                    }.GetValueOrDefault(status.ToString(), status.ToString());
                                                                    <option value="@status" selected="@(status.ToString() == "Draft")">@displayText</option>
                                                                }
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </form>
                                </div>

                                <!-- Items Tab -->
                                <div class="tab-pane fade" id="items_new" role="tabpanel" aria-labelledby="items-tab_new">
                                    <button type="button" class="btn btn-primary mb-3 add-item-row" data-quote-id="new">Tétel hozzáadása</button>
                                    <form id="quoteItemsForm_new" data-quote-id="new">
                                        <!-- Hidden fields for totals -->
                                        <input type="hidden" name="TotalNet" class="quote-total-net-input" value="0">
                                        <input type="hidden" name="TotalVat" class="quote-vat-amount-input" value="0">
                                        <input type="hidden" name="TotalGross" class="quote-gross-amount-input" value="0">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-bordered" id="quoteItemsTable">
                                                <thead>
                                                    <tr>
                                                        <th style="width: 25%;">Termék</th>
                                                        <th style="width: 5%;">Mennyiség</th>
                                                        <th style="width: 10%;">Listaár</th>
                                                        <th style="width: 10%;">Ügyfél ár</th>
                                                        <th style="width: 8%;">Mennyiségi kedvezmény</th>
                                                        <th style="width: 8%;">Egyedi kedvezmény</th>
                                                        <th style="width: 8%;">Kedvezmény típus</th>
                                                        @* <th style="width: 3%;">Valuta</th> *@
                                                        <th style="width: 8%;">Listaár összesen</th>
                                                        <th style="width: 8%;">Nettó kedvezményes ár</th>
                                                        <th style="width: 3%;">ÁFA</th>
                                                        <th style="width: 10%;">ÁFA érték</th>
                                                        <th style="width: 10%;">Bruttó ár</th>
                                                        <th style="width: 3%;">Műveletek</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="items-tbody_new">
                                                    <!-- Quote Total Row -->
                                                    <tr class="quote-total-row">
                                                        <td colspan="10" class="text-end"><strong>Kedvezmény összege:</strong></td>
                                                        <td><input type="number" class="form-control total-discount-amount-input" name="TotalDiscountAmount" value="0" min="0" step="0.01"></td>
                                                    </tr>
                                                    <tr class="quote-total-row">
                                                        <td colspan="10" class="text-end"><strong>Összesen Nettó:</strong></td>
                                                        <td><span class="quote-total-net">0.00</span></td>
                                                    </tr>
                                                    <tr class="quote-vat-row">
                                                        <td colspan="10" class="text-end"><strong>Összes ÁFA:</strong></td>
                                                        <td><span class="quote-vat-amount">0.00</span></td>
                                                    </tr>
                                                    <tr class="quote-gross-row">
                                                        <td colspan="10" class="text-end"><strong>Összesen Bruttó:</strong></td>
                                                        <td><span class="quote-gross-amount">0.00</span></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                            <button type="button" class="btn btn-primary save-quote" data-quote-id="new">Mentés</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Description Modal -->
                <div class="modal fade" id="editDescriptionModal" tabindex="-1" aria-labelledby="editDescriptionModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-md">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editDescriptionModalLabel">Tétel leírás szerkesztése</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="editDescriptionForm" class="needs-validation" novalidate>
                                    <input type="hidden" id="editDescriptionItemId" name="itemId" />
                                    <div class="mb-3">
                                        <label for="editDescription" class="form-label">Leírás (max 200 karakter)</label>
                                        <textarea class="form-control" id="editDescription" name="description" rows="4" maxlength="200" required></textarea>
                                        <div class="form-text">Karakterek: <span id="charCount">0</span>/200</div>
                                        <div class="invalid-feedback">A leírás megadása kötelező.</div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                                <button type="button" class="btn btn-primary" id="saveDescriptionBtn">Mentés</button>
                            </div>
                        </div>
                    </div>
                </div>
                }
            }
            else
            {
                <div class="alert alert-warning text-center mt-3" role="alert">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        @:No quotes found matching "@Model.SearchTerm" on page @Model.CurrentPage.
                    }
                    else if (Model.TotalRecords > 0)
                    {
                        @:No quotes found on page @Model.CurrentPage, but @Model.TotalRecords quotes exist. Try changing the page or adjusting filters.
                    }
                    else
                    {
                        @:No quotes found. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newQuoteModal" aria-label="Első árajánlat létrehozása">Create the first one?</button>
                    }
                    <!-- Debug Info -->
                    <div class="mt-2 small text-muted">
                        Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, SearchTerm="@Model.SearchTerm"
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Pagination Footer -->
    @await Html.PartialAsync("_PaginationFooter", new PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Quotes"
    })



    <!-- Quote Items Modal -->
    @foreach (var quote in Model.Quotes)
    {

        <div class="modal fade" id="viewQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="viewQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewQuoteModalLabel_@quote.QuoteId">Részletek: @quote.QuoteNumber</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-sm">
                            <tbody>
                                <tr><th>Árajánlat száma</th><td>@quote.QuoteNumber</td></tr>
                                <tr><th>Dátum</th><td>@quote.QuoteDate?.ToString("yyyy-MM-dd")</td></tr>
                                <tr><th>Partner</th><td>@quote.Partner.Name</td></tr>
                                <tr><th>Pénznem</th><td>@quote.Currency?.CurrencyName</td></tr>
                                <tr><th>Értékesítő</th><td>@quote.SalesPerson</td></tr>
                                <tr><th>Érvényesség dátuma</th><td>@quote.ValidityDate?.ToString("yyyy-MM-dd")</td></tr>
                                <tr><th>Státusz</th><td>@quote.Status</td></tr>
                                <tr><th>Cég neve</th><td>@quote.CompanyName</td></tr>
                                <tr><th>Tárgy</th><td>@quote.Subject</td></tr>
                                <tr><th>Leírás</th><td>@quote.Description</td></tr>
                                <tr><th>Részletes leírás</th><td>@quote.DetailedDescription</td></tr>
                                <tr><th>Kedvezmény %</th><td>@(quote.DiscountPercentage?.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00")</td></tr>
                                @* <tr><th>Kedvezmény összeg</th><td>@(quote.QuoteDiscountAmount?.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00")</td></tr> *@
                                <tr><th>Összesen</th><td>@(quote.TotalAmount?.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00")</td></tr>
                                <tr><th>Létrehozta</th><td>@quote.CreatedBy</td></tr>
                                <tr><th>Létrehozás dátuma</th><td>@quote.CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss")</td></tr>
                                <tr><th>Módosította</th><td>@quote.ModifiedBy</td></tr>
                                <tr><th>Módosítás dátuma</th><td>@quote.ModifiedDate?.ToString("yyyy-MM-dd HH:mm:ss")</td></tr>
                                <tr><th>Referenciaszám</th><td>@quote.ReferenceNumber</td></tr>
                            </tbody>
                        </table>

                        <h5 class="mt-4">Tételek</h5>
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Termék</th>
                                    <th>Leírás</th>
                                    <th>Mennyiség</th>
                                    <th>Egységár</th>
                                    <th>Kedvezmény</th>
                                    <th>Összesen</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (quote.QuoteItems != null && quote.QuoteItems.Any())
                                {
                                    @* @foreach (var quoteItem in quote.QuoteItems)
                                    {
                                        <tr data-item-id="@quoteItem.QuoteItemId">
                                            <td>@(quoteItem.Product?.Name ?? "N/A")</td>
                                            <td>@quoteItem.ItemDescription</td>
                                            <td>@quoteItem.Quantity</td>
                                            <td>@quoteItem.UnitPrice.ToString("F2", CultureInfo.GetCultureInfo("hu-HU"))</td>
                                            <td>
                                                @(quoteItem.DiscountPercentage.HasValue && quoteItem.DiscountPercentage.Value > 0
                                                    ? $"{quoteItem.DiscountPercentage.Value:F2}%"
                                                    : quoteItem.DiscountAmount.HasValue && quoteItem.DiscountAmount.Value > 0
                                                        ? $"{quoteItem.DiscountAmount.Value:F2}"
                                                        : "0,00")
                                            </td>
                                            <td>
                                                @((quoteItem.Quantity * quoteItem.UnitPrice - (quoteItem.DiscountAmount ?? (quoteItem.DiscountPercentage.HasValue ? (quoteItem.Quantity * quoteItem.UnitPrice * quoteItem.DiscountPercentage.Value / 100) : 0))).ToString("F2", CultureInfo.GetCultureInfo("hu-HU")))
                                            </td>
                                        </tr>
                                    } *@
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6">Nincsenek tételek.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Bezárás">Bezárás</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Convert Modal -->
        <div class="modal fade" id="convertQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="convertQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="convertQuoteModalLabel_@quote.QuoteId">Árajánlat átalakítása rendeléssé</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="convertQuoteForm_@quote.QuoteId">
                            @Html.AntiForgeryToken()

                            <div class="mb-3">
                                <label for="quoteNumber_@quote.QuoteId" class="form-label">Ajánlat száma</label>
                                <input type="text" id="quoteNumber_@quote.QuoteId" name="quoteNumber" class="form-control" value="@quote.QuoteNumber" readonly>
                            </div>

                            <div class="mb-3">
                                <label for="currency_@quote.QuoteId" class="form-label">Pénznem</label>
                                <input type="text" id="currency_@quote.QuoteId" name="currency" class="form-control" value="@quote.Currency" readonly>
                            </div>

                            <div class="mb-3">
                                <label for="totalAmount_@quote.QuoteId" class="form-label">Összeg</label>
                                <input type="text" id="totalAmount_@quote.QuoteId" name="totalAmount" class="form-control" value="@quote.TotalAmount" readonly>
                            </div>

                            <div class="mb-3">
                                <label for="partner_@quote.QuoteId" class="form-label">Partner</label>
                                <input type="text" id="partner_@quote.QuoteId" name="partner" class="form-control" value="@quote.PartnerId" readonly>
                            </div>

                            <div class="mb-3">
                                <label for="quoteDate_@quote.QuoteId" class="form-label">Létrehozási dátum</label>
                                <input type="text" id="quoteDate_@quote.QuoteId" name="quoteDate" class="form-control" 
                                    value="@(quote.QuoteDate.HasValue ? quote.QuoteDate.Value.ToString("yyyy-MM-dd") : "N/A")" readonly>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                        <button type="button" class="btn btn-primary convert-quote" data-quote-id="@quote.QuoteId">Átalakítás</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Delete Quote Modal -->
        <div class="modal fade" id="deleteQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="deleteQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteQuoteModalLabel_@quote.QuoteId">Árajánlat törlése</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                    </div>
                    <div class="modal-body">
                        <form id="deleteQuoteForm_@quote.QuoteId" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="QuoteId" value="@quote.QuoteId" autocomplete="off" />
                            <p>Biztosan törölni szeretné a következő árajánlatot: <strong>@quote.QuoteNumber</strong>?</p>
                            <div id="deleteWarning_@quote.QuoteId" class="alert alert-warning" style="display: none;">
                                Ez az árajánlat nem törölhető, mert kapcsolódó rekordok léteznek.
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Mégse">Mégse</button>
                        <button type="button" class="btn btn-danger confirm-delete-quote" data-quote-id="@quote.QuoteId" aria-label="Árajánlat törlése">Törlés</button>
                    </div>
                </div>
            </div>
        </div>
    }


<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<!-- Tom Select Dependencies -->
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

<script>
    const currentUsername = "@username";
    document.addEventListener('DOMContentLoaded', function () {
        console.log('Script initialized');

        // Add this after your existing event listeners
        document.querySelector('.total-discount-input')?.addEventListener('input', function() {
            const quoteId = this.closest('form').dataset.quoteId;
            calculateQuoteTotals(quoteId);
        });

        // Status mapping (retained for use in saveQuote)
        const statusMapping = {
            'Folyamatban': 'InProgress',
            'Felfüggesztve': 'Suspended',
            'Jóváhagyásra_vár': 'PendingApproval',
            'Jóváhagyva': 'Approved',
            'Kiküldve': 'Sent',
            'Elfogadva': 'Accepted',
            'Megrendelve': 'Ordered',
            'Teljesítve': 'Fulfilled',
            'Lezárva': 'Closed',
            'InProgress': 'InProgress',
            'Accepted': 'Accepted',
            'Rejected': 'Rejected',
            'Draft': 'Draft'
        };

        // Debounce utility (moved to top for reuse)
        function debounce(fn, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => fn.apply(this, args), delay);
            };
        }

        // Unified filter/sort dropdown logic
        function initializeFilterDropdown() {
            const filterItems = document.querySelectorAll('.dropdown-menu [data-filter]');
            console.log('Found filter items:', filterItems.length);

            filterItems.forEach(item => {
                item.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filter = this.getAttribute('data-filter');
                    const sort = this.getAttribute('data-sort');
                    console.log('Clicked item:', { filter, sort });

                    const form = document.querySelector('form[asp-page="./Index"]') ||
                                document.querySelector('form[action="/CRM/Quotes"]') ||
                                document.querySelector('form[action="/CRM/Quotes/Index"]') ||
                                document.querySelector('form[action="./Index"]');

                    if (form) {
                        console.log('Form found, submitting:', { filter, sort });
                        form.querySelectorAll('input[name="StatusFilter"], input[name="SortBy"]').forEach(input => input.remove());

                        const statusInput = document.createElement('input');
                        statusInput.type = 'hidden';
                        statusInput.name = 'StatusFilter';
                        statusInput.value = filter === 'all' ? '' : filter;
                        form.appendChild(statusInput);

                        const sortInput = document.createElement('input');
                        sortInput.type = 'hidden';
                        sortInput.name = 'SortBy';
                        sortInput.value = sort;
                        form.appendChild(sortInput);

                        form.submit();
                    } else {
                        console.error('Form not found. Available forms:', document.querySelectorAll('form').length);
                        document.querySelectorAll('form').forEach(f => console.log('Form action:', f.getAttribute('action')));
                    }
                });
            });
        }

        function initializeCurrencyTomSelect(select) {
            fetch('/api/currencies')
                .then(response => response.json())
                .then(data => {
                    // Clear previous options
                    select.innerHTML = '';

                    // Populate the select element
                    data.forEach(currency => {
                        const option = new Option(currency.text, currency.id);
                        select.appendChild(option);
                    });

                    // Initialize TomSelect
                    new TomSelect(select, {
                        create: false,
                        valueField: 'id',
                        labelField: 'text',
                        searchField: 'text',
                        maxItems: 1
                    });
                })
                .catch(error => console.error('Failed to fetch currencies:', error));
        }

        // 🟩 Usage: attach to your dropdown
        document.querySelectorAll('.currency-select').forEach(select => initializeCurrencyTomSelect(select));


        // Partner TomSelect initialization
        function initializePartnerTomSelect(select, quoteId) {
            const modal = select.closest('.modal') || document.querySelector(`#${quoteId === 'new' ? 'newQuoteModal' : 'editQuoteModal_' + quoteId}`);
            const selectedId = select.dataset.selectedId || '5004';
            const selectedText = select.dataset.selectedText;

            fetch('/api/partners')
                .then(response => {
                    if (!response.ok) throw new Error(`Failed to fetch partners: ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    select.innerHTML = '';
                    data.forEach(partner => {
                        const option = new Option(partner.text, partner.id);
                        select.appendChild(option);
                    });

                    const tomSelect = new TomSelect(select, {
                        create: false,
                        searchField: ['text'],
                        maxItems: 1,
                        valueField: 'id',
                        labelField: 'text',
                        onInitialize: function () {
                            if (selectedId && selectedText) {
                                this.addOption({ id: selectedId, text: selectedText });
                                this.addItem(selectedId);
                                modal.dataset.partnerId = selectedId;
                            }
                        },
                        onChange: function (value) {
                            modal.dataset.partnerId = value || '';
                            const itemsTab = document.querySelector(`#items-tab_${quoteId}`);
                            const addItemButton = document.querySelector(`.add-item-row[data-quote-id="${quoteId}"]`);
                            if (itemsTab && addItemButton) {
                                itemsTab.disabled = !value;
                                addItemButton.disabled = !value;
                            }
                            document.querySelectorAll(`#items-tbody_${quoteId} .tom-select-product`).forEach(productSelect => {
                                const tomSelect = productSelect.tomselect;
                                if (tomSelect) {
                                    tomSelect.clear();
                                    tomSelect.clearOptions();
                                    initializeProductTomSelect(productSelect, quoteId);
                                }
                            });
                        }
                    });

                    modal.addEventListener('show.bs.modal', () => {
                        const currentValue = tomSelect.getValue();
                        modal.dataset.partnerId = currentValue || selectedId;
                    });
                })
                .catch(error => console.error(`Error fetching partners for quoteId ${quoteId}:`, error));
        }

        // VAT TomSelect initialization (input-based)
        function initializeVatTomSelect(input) {
            if (typeof TomSelect === 'undefined') {
                console.error('TomSelect not loaded, disabling VAT dropdown');
                input.disabled = true;
                return;
            }
            const name = input.name;
            const selectedId = input.dataset.selectedId;
            const selectedText = input.dataset.selectedText;

            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = name;
            input.removeAttribute('name');
            input.parentNode.insertBefore(hiddenInput, input.nextSibling);

            fetch('/api/vat/types')
                .then(response => response.json())
                .then(data => {
                    console.log('VAT Types fetched:', data);
                    const tomSelect = new TomSelect(input, {
                        create: true,
                        maxItems: 1,
                        valueField: 'vatTypeId',
                        labelField: 'formattedRate',
                        searchField: ['formattedRate'],
                        placeholder: 'Válasszon ÁFA-t',
                        options: data.map(v => ({
                        vatTypeId: v.vatTypeId,
                        formattedRate: v.formattedRate,
                        rate: v.rate // This is essential!
                        })),
                        onInitialize: function () {
                            if (selectedId && selectedText) {
                                this.addOption({ vatTypeId: selectedId, formattedRate: selectedText });
                                this.addItem(selectedId);
                            }
                        },
                        onChange: function (value) {
                            const selected = this.options[value];
                            const vatRate = parseFloat(selected?.rate) || 0;
                            hiddenInput.value = value;
                        }
                    });
                })
                .catch(error => console.error('Failed to fetch VAT types:', error));
        }

        // Modal initialization
        function initializeModals() {
            const newQuoteModal = document.getElementById('newQuoteModal');
            if (newQuoteModal) {
                newQuoteModal.addEventListener('shown.bs.modal', function () {
                    console.log('New quote modal shown for quoteId: new');
                    initializeEventListeners('new');
                    calculateQuoteTotals('new');
                });
                newQuoteModal.addEventListener('hidden.bs.modal', function () {
                    console.log('New Quote Modal closed, resetting forms');
                    const baseInfoForm = document.getElementById('quoteBaseInfoForm_new');
                    if (baseInfoForm) {
                        baseInfoForm.reset();
                        baseInfoForm.querySelector('[name="quoteDate"]').value = new Date().toISOString().split('T')[0];
                        baseInfoForm.querySelector('[name="validityDate"]').value = new Date(new Date().setDate(new Date().getDate() + 30)).toISOString().split('T')[0];
                        baseInfoForm.querySelector('[name="status"]').value = 'Draft';
                        const partnerSelect = baseInfoForm.querySelector('[name="partnerId"]');
                        const currencySelect = baseInfoForm.querySelector('[name="currencyId"]');
                        if (partnerSelect?.tomselect) partnerSelect.tomselect.destroy();
                        if (currencySelect?.tomselect) currencySelect.tomselect.destroy();
                    }
                    const itemsForm = document.getElementById('quoteItemsForm_new');
                    if (itemsForm) {
                        const tbody = document.getElementById('items-tbody_new');
                        if (tbody) {
                            tbody.querySelectorAll('.quote-item-row, .description-row').forEach(row => {
                                const productSelect = row.querySelector('.tom-select-product');
                                const vatSelect = row.querySelector('.tom-select-vat');
                                if (productSelect?.tomselect) productSelect.tomselect.destroy();
                                if (vatSelect?.tomselect) vatSelect.tomselect.destroy();
                                row.remove();
                            });
                            const totalAmount = tbody.querySelector('.quote-total-amount');
                            const finalTotal = tbody.querySelector('.quote-final-total');
                            if (totalAmount) totalAmount.textContent = '0.00';
                            if (finalTotal) finalTotal.textContent = '0.00';
                            const discountValue = itemsForm.querySelector('.quote-discount-value');
                            const discountType = itemsForm.querySelector('.quote-discount-type');
                            if (discountValue) discountValue.value = '';
                            if (discountType) discountType.value = 'Percentage';
                            addItemRow('new');
                        }
                    }
                });
            }

            // Initialize all TomSelect elements when modal is shown
            document.querySelectorAll('[id^="editQuoteModal_"]').forEach(modal => {
                modal.addEventListener('shown.bs.modal', function() {
                    const quoteId = this.id.split('_')[1];
                    
                    // Initialize partner select
                    const partnerSelect = this.querySelector('select[name="partnerId"]');
                    if (partnerSelect && !partnerSelect.tomselect) {
                        initializePartnerTomSelect(partnerSelect, quoteId);
                    }

                    // Initialize currency select
                    const currencySelect = this.querySelector('select[name="currencyId"]');
                    if (currencySelect && !currencySelect.tomselect) {
                        initializeCurrencyTomSelect(currencySelect);
                    }

                    // Initialize all VAT selects
                    this.querySelectorAll('.tom-select-vat').forEach(vatSelect => {
                        if (!vatSelect.tomselect) {
                            initializeVatTomSelect(vatSelect);
                        }
                    });

                    // Initialize product selects for existing items
                    this.querySelectorAll('.tom-select-product').forEach(productSelect => {
                        if (!productSelect.tomselect) {
                            initializeProductTomSelect(productSelect, quoteId);
                        }
                    });
                });
            });
        }

        // Copy quote functionality
        function initializeCopyQuote() {
            function showToast(type, message) {
                const toast = $(`<div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>`);
                $('#toastContainer').append(toast);
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();
                setTimeout(() => toast.remove(), 5500);
            }

            document.querySelectorAll('.copy-quote-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const quoteId = this.getAttribute('data-quote-id');
                    fetch(`/api/Quotes/${quoteId}/copy`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                        return response.json();
                    })
                    .then(result => {
                        showToast('success', `Árajánlat sikeresen másolva! Új szám: ${result.quoteNumber}`);
                        setTimeout(() => location.reload(), 3000);
                    })
                    .catch(error => {
                        showToast('error', 'Hiba történt a másolás során: ' + error.message);
                        console.error('[Error] Copy quote error:', error);
                    });
                });
            });
        }

        // Product TomSelect initialization
        function initializeProductTomSelect(select, quoteId) {
            if (typeof TomSelect === 'undefined') {
                console.error('TomSelect library is not loaded. Please include the TomSelect script.');
                alert('Required library missing. Please contact support.');
                return;
            }

            const modal = document.querySelector(`#${quoteId === 'new' ? 'newQuoteModal' : 'editQuoteModal_' + quoteId}`);
            if (!modal) {
                console.error(`Modal not found for quoteId: ${quoteId}`);
                return;
            }

            const quantityInput = select.closest('tr')?.querySelector('.item-quantity');
            if (!quantityInput) {
                console.error(`Quantity input not found in row for quoteId: ${quoteId}. Aborting initialization.`);
                return;
            }

            function fetchProducts(quantity) {
                const partnerId = modal.dataset.partnerId || '';
                const quoteDate = modal.dataset.quoteDate || new Date().toISOString().split('T')[0];
                const parsedQuantity = parseInt(quantity, 10) || 1;
                console.log(`Fetching products for quoteId: ${quoteId}, partnerId: ${partnerId}, quoteDate: ${quoteDate}, quantity: ${parsedQuantity}`);

                const currentProductId = select.tomselect ? select.tomselect.getValue() : select.dataset.selectedId;
                const currentProductName = select.tomselect ? select.tomselect.getOption(currentProductId)?.text : select.dataset.selectedText;

                const apiUrl = `/api/product?partnerId=${encodeURIComponent(partnerId)}&eDate=${encodeURIComponent(quoteDate)}&quantity=${encodeURIComponent(parsedQuantity)}`;

                fetch(apiUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Fetched products:', data);
                        const products = Array.isArray(data) ? data : [];
                        if (products.length === 0) {
                            console.warn('No products returned from API');
                        }

                        if (select.tomselect) {
                            select.tomselect.destroy();
                        }

                        const tomSelect = new TomSelect(select, {
                            create: false,
                            searchField: ['name'],
                            maxItems: 1,
                            valueField: 'productId',
                            labelField: 'name',
                            options: products,
                            render: {
                                option: function (item, escape) {
                                    return `<div>${escape(item.name)}</div>`;
                                },
                                item: function (item, escape) {
                                    return `<div>${escape(item.name)}</div>`;
                                }
                            },
                            onInitialize: function () {
                                console.log('TomSelect initialized for select:', select);
                                const selectedId = currentProductId || select.dataset.selectedId;
                                const selectedText = currentProductName || select.dataset.selectedText;
                                if (selectedId) {
                                    const productExists = products.find(p => p.productId == selectedId);
                                    if (productExists) {
                                        this.addItem(selectedId);
                                        updatePriceFields(select, selectedId, products);
                                    } else if (selectedText) {
                                        this.addOption({ productId: selectedId, name: selectedText });
                                        this.addItem(selectedId);
                                        updatePriceFields(select, selectedId, [{ productId: selectedId, name: selectedText }]);
                                        console.warn(`Product ${selectedId} not found in API response for partnerId ${partnerId}, preserving name: ${selectedText}`);
                                    }
                                }
                            },
                            onChange: function (value) {
                                console.log('TomSelect changed to value:', value);
                                const selectedProduct = products.find(p => p.productId == value);
                                if (selectedProduct) {
                                    select.dataset.selectedId = value;
                                    select.dataset.selectedText = selectedProduct.name;
                                }
                                updatePriceFields(select, value, products);
                                calculateQuoteTotals(quoteId);
                            }
                        });
                    })
                    .catch(error => {
                        console.error(`Failed to fetch products for QuoteId ${quoteId}:`, error);
                        alert(`Failed to load products: ${error.message}. Please check your connection or contact support.`);
                    });
            }

            quantityInput.addEventListener('input', debounce(function () {
                const quantity = parseInt(this.value, 10) || 1;
                console.log('Quantity changed to:', quantity);
                fetchProducts(quantity);
            }, 500));

            const partnerSelect = modal.querySelector('.partner-select');
            if (partnerSelect) {
                partnerSelect.addEventListener('change', debounce(function () {
                    const newPartnerId = this.value;
                    console.log(`Partner changed to: ${newPartnerId} for quoteId: ${quoteId}`);
                    modal.dataset.partnerId = newPartnerId;
                    refreshAllRows(quoteId);
                }, 500));
            } else {
                console.warn('Partner select not found in modal for quoteId:', quoteId);
            }

            fetchProducts(quantityInput.value);
        }

        // Update price fields
        function updatePriceFields(select, productId, products) {
            const product = products.find(p => p.productId == productId);
            const row = select.closest('tr.quote-item-row');
            if (!row) {
                console.error('Row not found for select element:', select);
                return;
            }

            const listPriceInput = row.querySelector('.item-list-price');
            const partnerPriceInput = row.querySelector('.item-partner-price');
            const quantityInput = row.querySelector('.item-quantity');
            const quantityDiscountInput = row.querySelector('.quantity-discount');
            const netDiscountedPriceSpan = row.querySelector('.item-net-discounted-price');
            const listPriceTotalSpan = row.querySelector('.item-list-price-total');
            const discountValueInput = row.querySelector('.discount-value');
            const discountTypeSelect = row.querySelector('.discount-type');
            const vatSelect = row.querySelector('.tom-select-vat');
            const vatAmountSpan = row.querySelector('.item-vat-amount');
            const totalSpan = row.querySelector('.item-total');

            if (!listPriceInput || !partnerPriceInput || !quantityInput || !quantityDiscountInput || !netDiscountedPriceSpan || !listPriceTotalSpan || !discountTypeSelect || !vatSelect || !vatAmountSpan || !totalSpan) {
                console.error('One or more required fields missing in row:', row, {
                    listPriceInput: !!listPriceInput,
                    partnerPriceInput: !!partnerPriceInput,
                    quantityInput: !!quantityInput,
                    quantityDiscountInput: !!quantityDiscountInput,
                    netDiscountedPriceSpan: !!netDiscountedPriceSpan,
                    listPriceTotalSpan: !!listPriceTotalSpan,
                    discountTypeSelect: !!discountTypeSelect,
                    vatSelect: !!vatSelect,
                    vatAmountSpan: !!vatAmountSpan,
                    totalSpan: !!totalSpan
                });
                return;
            }

            const quantity = parseInt(quantityInput.value, 10) || 1;

            if (!product) {
                console.warn(`Product not found for productId: ${productId}, clearing price fields`);
                listPriceInput.value = '';
                partnerPriceInput.value = '';
                quantityDiscountInput.value = '';
                netDiscountedPriceSpan.textContent = '0.00';
                listPriceTotalSpan.textContent = '0.00';
                vatAmountSpan.textContent = '0.00';
                totalSpan.textContent = '0.00';
                return;
            }

            const volumePricing = product.volumePricing || {};
            const listPrice = product.listPrice || 0;
            const partnerPrice = product.partnerPrice;

            let basePrice = listPrice;
            if (volumePricing.volume1 > 0 && quantity >= volumePricing.volume1 && volumePricing.volume1Price > 0) {
                basePrice = volumePricing.volume1Price;
                if (volumePricing.volume2 > 0 && quantity >= volumePricing.volume2 && volumePricing.volume2Price > 0) {
                    basePrice = volumePricing.volume2Price;
                    if (volumePricing.volume3 > 0 && quantity >= volumePricing.volume3 && volumePricing.volume3Price > 0) {
                        basePrice = volumePricing.volume3Price;
                    }
                }
            }

            listPriceInput.value = listPrice ? listPrice.toFixed(2) : '';
            partnerPriceInput.value = partnerPrice ? partnerPrice.toFixed(2) : '';
            quantityDiscountInput.value = basePrice ? basePrice.toFixed(2) : '';
            listPriceTotalSpan.textContent = (listPrice * quantity).toFixed(2);

            const discountValue = parseFloat(discountValueInput?.value || 0);
            const discountType = discountTypeSelect.value;
            let netPrice;
            switch (discountType) {
                case 'NoDiscount':
                case 'ListPrice':
                    netPrice = listPrice * quantity;
                    break;
                case 'PartnerPrice':
                    netPrice = (partnerPrice || listPrice) * quantity;
                    break;
                case 'VolumeDiscount':
                    netPrice = basePrice * quantity;
                    break;
                case 'CustomDiscountPercentage':
                    netPrice = listPrice * quantity * (1 - discountValue / 100);
                    break;
                case 'CustomDiscountAmount':
                    netPrice = (listPrice * quantity) - discountValue;
                    break;
                default:
                    console.warn(`Unknown discount type: ${discountType}`);
                    netPrice = listPrice * quantity;
            }
            netPrice = Math.max(netPrice, 0);
            netDiscountedPriceSpan.textContent = netPrice.toFixed(2);

            const selectedVatId = vatSelect.tomselect ? vatSelect.tomselect.getValue() : null;
            const selectedOption = vatSelect.tomselect ? vatSelect.tomselect.options[selectedVatId] : null;
            const vatPercentage = selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
            const vatAmount = netPrice * (vatPercentage / 100);
            const totalPrice = netPrice + vatAmount;

            vatAmountSpan.textContent = vatAmount.toFixed(2);
            totalSpan.textContent = totalPrice.toFixed(2);

            console.log('Updated price fields for productId:', productId, {
                listPrice: listPriceInput.value,
                partnerPrice: partnerPriceInput.value,
                quantityDiscount: quantityDiscountInput.value,
                listPriceTotal: listPriceTotalSpan.textContent,
                netDiscountedPrice: netDiscountedPriceSpan.textContent,
                vatPercentage,
                vatAmount: vatAmountSpan.textContent,
                totalPrice: totalSpan.textContent,
                quantity,
                basePrice,
                volumePricing,
                discountType,
                discountValue
            });

            if (discountValueInput && !discountValueInput.dataset.listenerAdded) {
                discountValueInput.addEventListener('input', debounce(function () {
                    console.log('Discount value input triggered for productId:', productId);
                    const newDiscount = parseFloat(this.value || 0);
                    
                    // Get current values
                    const quantity = parseInt(quantityInput.value, 10) || 1;
                    const discountType = discountTypeSelect.value;
                    
                    // Recalculate all prices
                    calculateAllPrices(
                        row,
                        listPrice,
                        partnerPrice,
                        basePrice,
                        quantity,
                        newDiscount,
                        discountType,
                        vatSelect
                    );
                    
                    calculateQuoteTotals(select.closest('table').dataset.quoteId);
                }, 200));
                discountValueInput.dataset.listenerAdded = 'true';
            }

            if (discountTypeSelect) {
                const newListener = debounce(function () {
                    console.log('Discount type change triggered for productId:', productId);
                    const newDiscountType = this.value;
                    const discountValue = parseFloat(discountValueInput?.value || 0);
                    const quantity = parseInt(quantityInput.value, 10) || 1;
                    
                    // Recalculate all prices
                    calculateAllPrices(
                        row,
                        listPrice,
                        partnerPrice,
                        basePrice,
                        quantity,
                        discountValue,
                        newDiscountType,
                        vatSelect
                    );
                    
                    calculateQuoteTotals(select.closest('table').dataset.quoteId);
                }, 200);

                discountTypeSelect.removeEventListener('change', discountTypeSelect._listener);
                discountTypeSelect.addEventListener('change', newListener);
                discountTypeSelect._listener = newListener;
                discountTypeSelect.dataset.listenerAdded = 'true';
            }

            if (quantityInput && !quantityInput.dataset.listenerAdded) {
                quantityInput.addEventListener('input', debounce(function () {
                    console.log('Quantity input triggered for productId:', productId);
                    const newQuantity = parseInt(this.value, 10) || 1;
                    const discountValue = parseFloat(discountValueInput?.value || 0);
                    const discountType = discountTypeSelect.value;
                    
                    // Update volume pricing
                    let updatedBasePrice = listPrice;
                    if (volumePricing.volume1 > 0 && newQuantity >= volumePricing.volume1 && volumePricing.volume1Price > 0) {
                        updatedBasePrice = volumePricing.volume1Price;
                        if (volumePricing.volume2 > 0 && newQuantity >= volumePricing.volume2 && volumePricing.volume2Price > 0) {
                            updatedBasePrice = volumePricing.volume2Price;
                            if (volumePricing.volume3 > 0 && newQuantity >= volumePricing.volume3 && volumePricing.volume3Price > 0) {
                                updatedBasePrice = volumePricing.volume3Price;
                            }
                        }
                    }
                    
                    quantityDiscountInput.value = updatedBasePrice ? updatedBasePrice.toFixed(2) : '';
                    listPriceTotalSpan.textContent = (listPrice * newQuantity).toFixed(2);
                    
                    // Recalculate all prices
                    calculateAllPrices(
                        row,
                        listPrice,
                        partnerPrice,
                        updatedBasePrice,
                        newQuantity,
                        discountValue,
                        discountType,
                        vatSelect
                    );
                    
                    calculateQuoteTotals(select.closest('table').dataset.quoteId);
                }, 200));
                quantityInput.dataset.listenerAdded = 'true';
            }   

            if (vatSelect && !vatSelect.dataset.listenerAdded) {
                vatSelect.addEventListener('change', debounce(function () {
                    console.log('VAT change triggered for productId:', productId);
                    const selectedVatId = vatSelect.tomselect ? vatSelect.tomselect.getValue() : null;
                    const selectedOption = vatSelect.tomselect ? vatSelect.tomselect.options[selectedVatId] : null;
                    const newVatPercentage = selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
                    
                    const currentNetPrice = parseFloat(netDiscountedPriceSpan.textContent) || 0;
                    const updatedVatAmount = currentNetPrice * (newVatPercentage / 100);
                    const updatedTotalPrice = currentNetPrice + updatedVatAmount;
                    vatAmountSpan.textContent = updatedVatAmount.toFixed(2);
                    totalSpan.textContent = updatedTotalPrice.toFixed(2);
                    calculateQuoteTotals(select.closest('table').dataset.quoteId);
                    console.log('VAT changed:', {
                        vatPercentage: newVatPercentage,
                        netDiscountedPrice: netDiscountedPriceSpan.textContent,
                        vatAmount: vatAmountSpan.textContent,
                        totalPrice: totalSpan.textContent
                    });
                }, 200));
                vatSelect.dataset.listenerAdded = 'true';
            }

            if (listPriceInput && !listPriceInput.dataset.listenerAdded) {
                listPriceInput.addEventListener('input', debounce(function() {
                    console.log('List price manually changed for productId:', productId);
                    
                    const newListPrice = parseFloat(this.value) || 0;
                    const quantity = parseInt(quantityInput.value, 10) || 1;
                    
                    // Update volume pricing based on new list price
                    let updatedBasePrice = newListPrice;
                    if (volumePricing.volume1 > 0 && quantity >= volumePricing.volume1 && volumePricing.volume1Price > 0) {
                        updatedBasePrice = volumePricing.volume1Price;
                        if (volumePricing.volume2 > 0 && quantity >= volumePricing.volume2 && volumePricing.volume2Price > 0) {
                            updatedBasePrice = volumePricing.volume2Price;
                            if (volumePricing.volume3 > 0 && quantity >= volumePricing.volume3 && volumePricing.volume3Price > 0) {
                                updatedBasePrice = volumePricing.volume3Price;
                            }
                        }
                    }
                    
                    quantityDiscountInput.value = updatedBasePrice ? updatedBasePrice.toFixed(2) : '';
                    listPriceTotalSpan.textContent = (newListPrice * quantity).toFixed(2);
                    
                    // Recalculate net price based on discount type
                    const discountValue = parseFloat(discountValueInput?.value || 0);
                    let updatedNetPrice;
                    switch (discountTypeSelect.value) {
                        case 'NoDiscount':
                        case 'ListPrice':
                            updatedNetPrice = newListPrice * quantity;
                            break;
                        case 'PartnerPrice':
                            updatedNetPrice = (partnerPrice || newListPrice) * quantity;
                            break;
                        case 'VolumeDiscount':
                            updatedNetPrice = updatedBasePrice * quantity;
                            break;
                        case 'CustomDiscountPercentage':
                            updatedNetPrice = newListPrice * quantity * (1 - discountValue / 100);
                            break;
                        case 'CustomDiscountAmount':
                            updatedNetPrice = (newListPrice * quantity) - discountValue;
                            break;
                        default:
                            updatedNetPrice = newListPrice * quantity;
                    }
                    updatedNetPrice = Math.max(updatedNetPrice, 0);
                    netDiscountedPriceSpan.textContent = updatedNetPrice.toFixed(2);
                    
                    // Recalculate VAT and total
                    const selectedVatId = vatSelect.tomselect ? vatSelect.tomselect.getValue() : null;
                    const selectedOption = vatSelect.tomselect ? vatSelect.tomselect.options[selectedVatId] : null;
                    const vatPercentage = selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
                    const updatedVatAmount = updatedNetPrice * (vatPercentage / 100);
                    const updatedTotalPrice = updatedNetPrice + updatedVatAmount;
                    
                    vatAmountSpan.textContent = updatedVatAmount.toFixed(2);
                    totalSpan.textContent = updatedTotalPrice.toFixed(2);
                    
                    calculateQuoteTotals(select.closest('table').dataset.quoteId);
                    
                    console.log('List price changed:', {
                        newListPrice,
                        quantity,
                        updatedBasePrice,
                        updatedNetPrice,
                        vatPercentage,
                        updatedVatAmount,
                        updatedTotalPrice
                    });
                }, 200));
                listPriceInput.dataset.listenerAdded = 'true';
            }
        }

        function calculateAllPrices(row, listPrice, partnerPrice, basePrice, quantity, discountValue, discountType, vatSelect) {
            const netDiscountedPriceSpan = row.querySelector('.item-net-discounted-price');
            const vatAmountSpan = row.querySelector('.item-vat-amount');
            const totalSpan = row.querySelector('.item-total');
            
            // Calculate net price based on discount
            let netPrice;
            switch (discountType) {
                case 'NoDiscount':
                case 'ListPrice':
                    netPrice = listPrice * quantity;
                    break;
                case 'PartnerPrice':
                    netPrice = (partnerPrice || listPrice) * quantity;
                    break;
                case 'VolumeDiscount':
                    netPrice = basePrice * quantity;
                    break;
                case 'CustomDiscountPercentage':
                    netPrice = listPrice * quantity * (1 - discountValue / 100);
                    break;
                case 'CustomDiscountAmount':
                    netPrice = (listPrice * quantity) - discountValue;
                    break;
                default:
                    netPrice = listPrice * quantity;
            }
            netPrice = Math.max(netPrice, 0);
            
            // Calculate VAT
            const selectedVatId = vatSelect.tomselect ? vatSelect.tomselect.getValue() : null;
            const selectedOption = vatSelect.tomselect ? vatSelect.tomselect.options[selectedVatId] : null;
            const vatPercentage = selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
            const vatAmount = netPrice * (vatPercentage / 100);
            const totalPrice = netPrice + vatAmount;
            
            // Update all fields
            netDiscountedPriceSpan.textContent = netPrice.toFixed(2);
            vatAmountSpan.textContent = vatAmount.toFixed(2);
            totalSpan.textContent = totalPrice.toFixed(2);
            
            return {
                netPrice,
                vatAmount,
                totalPrice
            };
        }

        // Refresh all rows
        function refreshAllRows(quoteId) {
            const tbody = document.querySelector(`#items-tbody_${quoteId}`);
            if (!tbody) {
                console.error('Tbody not found for quoteId:', quoteId);
                return;
            }
            const rows = tbody.querySelectorAll('tr.quote-item-row');
            rows.forEach(row => {
                const productSelect = row.querySelector('.tom-select-product');
                const vatSelect = row.querySelector('.tom-select-vat');
                if (productSelect) {
                    initializeProductTomSelect(productSelect, quoteId);
                }
                if (vatSelect) {
                    initializeVatTomSelect(vatSelect);
                }
            });
            calculateQuoteTotals(quoteId);
        }

        // Calculate total price for a row
        function calculateTotalPrice(row, forceRecalculate = false) {
            try {
                console.log('Calculating total price for row:', row.dataset.itemId);
                const quantityInput = row.querySelector('.quantity');
                const unitPriceInput = row.querySelector('.unit-price');
                const discountValueInput = row.querySelector('.discount-value');
                const discountTypeSelect = row.querySelector('.discount-type');
                const totalPriceSpan = row.querySelector('.total-price');

                if (!quantityInput || !unitPriceInput || !discountValueInput || !discountTypeSelect || !totalPriceSpan) {
                    console.error('Missing elements in row:', row.dataset.itemId, {
                        quantity: !!quantityInput,
                        unitPrice: !!unitPriceInput,
                        discountValue: !!discountValueInput,
                        discountType: !!discountTypeSelect,
                        totalPrice: !!totalPriceSpan
                    });
                    return 0;
                }

                if (forceRecalculate || row.dataset.initialized !== 'true') {
                    const quantity = parseFloat(quantityInput.value) || 0;
                    const unitPrice = parseFloat(unitPriceInput.value) || 0;
                    const discountValue = parseFloat(discountValueInput.value) || 0;
                    const discountType = discountTypeSelect.value;

                    let total = quantity * unitPrice;
                    let discount = 0;

                    if (discountValue > 0) {
                        if (discountType === 'Percentage') {
                            discount = total * (discountValue / 100);
                        } else {
                            discount = discountValue;
                        }
                    }

                    total = total - discount;
                    total = total < 0 ? 0 : total;
                    totalPriceSpan.textContent = total.toFixed(2);
                    row.dataset.initialized = 'true';
                    console.log('Total price set to:', total.toFixed(2), 'for item:', row.dataset.itemId);
                    return total;
                } else {
                    const currentTotal = parseFloat(totalPriceSpan.textContent) || 0;
                    console.log('Using existing total price:', currentTotal, 'for item:', row.dataset.itemId);
                    return currentTotal;
                }
            } catch (error) {
                console.error('Error calculating total price for row:', row.dataset.itemId, error);
                return 0;
            }
        }

        // Calculate quote totals
        function calculateQuoteTotals(quoteId) {
            let totalNet = 0;
            let totalVat = 0;
            let totalGross = 0;

            const rows = document.querySelectorAll(`#items-tbody_${quoteId} .quote-item-row`);
            rows.forEach(row => {
                const net = parseFloat(row.querySelector('.item-net-discounted-price').textContent) || 0;
                const vat = parseFloat(row.querySelector('.item-vat-amount').textContent) || 0;
                const gross = parseFloat(row.querySelector('.item-total').textContent) || 0;
                totalNet += net;
                totalVat += vat;
                totalGross += gross;
            });

            const totalDiscountInput = document.querySelector(`#items-tbody_${quoteId} .total-discount-input`);
            const totalDiscountAmountInput = document.querySelector(`#items-tbody_${quoteId} [name="TotalDiscountAmount"]`);
            if (totalDiscountInput || totalDiscountAmountInput) {
                let discountAmount = 0;
                if (totalDiscountInput) {
                    const discountPercentage = parseFloat(totalDiscountInput.value) || 0;
                    if (discountPercentage > 0) {
                        discountAmount = totalNet * (discountPercentage / 100);
                    }
                } else if (totalDiscountAmountInput) {
                    discountAmount = parseFloat(totalDiscountAmountInput.value) || 0;
                }
                if (discountAmount > 0) {
                    totalNet -= discountAmount;
                    const vatPercentage = totalVat / (totalNet + discountAmount) * 100 || 0;
                    totalVat = totalNet * (vatPercentage / 100);
                    totalGross = totalNet + totalVat;
                }
            }

            const totalNetElement = document.querySelector(`#items-tbody_${quoteId} .quote-total-net`);
            const totalVatElement = document.querySelector(`#items-tbody_${quoteId} .quote-vat-amount`);
            const totalGrossElement = document.querySelector(`#items-tbody_${quoteId} .quote-gross-amount`);
            if (totalNetElement) totalNetElement.textContent = totalNet.toFixed(2);
            if (totalVatElement) totalVatElement.textContent = totalVat.toFixed(2);
            if (totalGrossElement) totalGrossElement.textContent = totalGross.toFixed(2);

            return { totalNet, totalVat, totalGross };
        }

        // Update discount input name
        function updateDiscountInputName(row) {
            const discountInput = row.querySelector('.discount-value');
            const discountType = row.querySelector('.discount-type');
            if (discountInput && discountType) {
                const prefix = discountType.dataset.discountNamePrefix;
                discountInput.name = `${prefix}.${discountType.value === 'Percentage' ? 'DiscountPercentage' : 'DiscountAmount'}`;
            }
        }

        // Update quote-level discount input name
        function updateQuoteDiscountInputName(quoteId) {
            const discountInput = document.querySelector(`#items-tbody_${quoteId} .quote-discount-value`);
            const discountType = document.querySelector(`#items-tbody_${quoteId} .quote-discount-type`);
            if (discountInput && discountType) {
                discountInput.name = discountType.value === 'Percentage' ? 'DiscountPercentage' : 'DiscountAmount';
            }
        }

        // VAT calculation logic
        function getCurrentVatPercentage(vatSelect) {
            const selectedVatId = vatSelect.tomselect ? vatSelect.tomselect.getValue() : null;
            const selectedOption = vatSelect.tomselect ? vatSelect.tomselect.options[selectedVatId] : null;
            return selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
        }

        // Initialize row calculations
        function initializeRowCalculations(row) {
            const itemId = row.dataset.itemId;
            const quantityInput = row.querySelector('.item-quantity');
            const listPriceInput = row.querySelector('.item-list-price');
            const partnerPriceInput = row.querySelector('.item-partner-price');
            const quantityDiscountInput = row.querySelector('.quantity-discount');
            const discountValueInput = row.querySelector('.discount-value');
            const discountTypeSelect = row.querySelector('.discount-type');
            const vatSelect = row.querySelector('.tom-select-vat');
            const listTotalSpan = row.querySelector('.item-list-price-total');
            const netPriceSpan = row.querySelector('.item-net-discounted-price');
            const vatAmountSpan = row.querySelector('.item-vat-amount');
            const totalSpan = row.querySelector('.item-total');

            function updateCalculations() {
                const quantity = parseFloat(quantityInput.value) || 1;
                const listPrice = parseFloat(listPriceInput.value) || 0;
                const partnerPrice = parseFloat(partnerPriceInput.value) || listPrice;
                const quantityDiscount = discountTypeSelect.value === 'VolumeDiscount' ? parseFloat(quantityDiscountInput.value) || 0 : 0;
                const customDiscount = parseFloat(discountValueInput?.value) || 0;
                const discountType = discountTypeSelect.value;

                // Get VAT rate from TomSelect
                let vatRate = 0;
                const vatId = vatSelect.value;

                if (vatSelect.tomselect) {
                const selectedOption = vatSelect.tomselect.options?.[vatId];
                vatRate = selectedOption ? parseFloat(selectedOption.rate) || 0 : 0;
                }

                //console.log('VAT Calculation:', { vatValue, vatRate, vatSelectInitialized: !!vatSelect.tomSelect });

                const listTotal = quantity * listPrice;
                listTotalSpan.textContent = listTotal.toFixed(2);

                let netPrice = partnerPrice;
                let totalDiscount = 0;

                if (discountType === 'NoDiscount' || discountType === 'PartnerPrice') {
                    netPrice = partnerPrice;
                } else if (discountType === 'ListPrice') {
                    netPrice = listPrice;
                } else if (discountType === 'VolumeDiscount') {
                    totalDiscount = quantityDiscount;
                    netPrice -= totalDiscount;
                } else if (discountType === 'CustomDiscountPercentage') {
                    totalDiscount = netPrice * (customDiscount / 100);
                    netPrice -= totalDiscount;
                } else if (discountType === 'CustomDiscountAmount') {
                    totalDiscount = customDiscount;
                    netPrice -= totalDiscount;
                }

                netPrice = Math.max(0, netPrice);
                const netTotal = quantity * netPrice;
                netPriceSpan.textContent = netTotal.toFixed(2);

                const vatAmount = netTotal * (vatRate / 100);
                vatAmountSpan.textContent = vatAmount.toFixed(2);

                const grossTotal = netTotal + vatAmount;
                totalSpan.textContent = grossTotal.toFixed(2);

                const quoteId = row.closest('tbody').id.replace('items-tbody_', '');
                calculateQuoteTotals(quoteId);
            }

            [quantityInput, listPriceInput, partnerPriceInput, quantityDiscountInput, discountValueInput, discountTypeSelect, vatSelect].forEach(input => {
                if (input) {
                    input.addEventListener('input', updateCalculations);
                    if (input.tagName === 'SELECT') {
                        input.addEventListener('change', updateCalculations);
                    }
                }
            });

            updateCalculations();
        }

        // Initialize description toggle
        function initializeDescriptionToggle(row) {
            const editButton = row.querySelector('.edit-description');
            const itemId = row.dataset.itemId;
            const descriptionRow = row.parentElement.querySelector(`tr.description-row[data-item-id="${itemId}"]`);
            if (!editButton || !descriptionRow) {
                console.error('Edit button or description row not found for itemId:', itemId);
                return;
            }

            editButton.addEventListener('click', () => {
                descriptionRow.style.display = descriptionRow.style.display === 'none' ? '' : 'none';
            });

            const textarea = descriptionRow.querySelector('.item-description');
            const charCount = descriptionRow.querySelector('.char-count');
            if (textarea && charCount) {
                textarea.addEventListener('input', () => {
                    charCount.textContent = textarea.value.length;
                });
            }
        }

        // Initialize quote-level discount calculations
        function initializeQuoteDiscountCalculations(quoteId) {
            const tbody = document.querySelector(`#items-tbody_${quoteId}`);
            const inputs = tbody.querySelectorAll('.quote-discount-value, .quote-discount-type');
            inputs.forEach(input => {
                input.addEventListener('input', () => {
                    updateQuoteDiscountInputName(quoteId);
                    calculateQuoteTotals(quoteId);
                });
            });
            updateQuoteDiscountInputName(quoteId);
        }

        // Initialize delete functionality
        function initializeDeleteButtons(quoteId) {
            const tbody = document.querySelector(`#items-tbody_${quoteId}`);
            if (!tbody) {
                console.error('Tbody not found for quoteId:', quoteId);
                return;
            }
            console.log('Initializing delete buttons for quoteId:', quoteId);

            tbody.addEventListener('click', function(event) {
                const button = event.target.closest('.remove-item');
                if (button) {
                    console.log('Delete button clicked:', button);
                    const row = button.closest('.quote-item-row');
                    if (!row) {
                        console.error('Quote item row not found for button:', button);
                        return;
                    }
                    const itemId = row.dataset.itemId;
                    const descriptionRow = document.querySelector(`.description-row[data-item-id="${itemId}"]`);

                    console.log('Delete clicked for item:', itemId);
                    row.remove();
                    if (descriptionRow) {
                        console.log('Removing description row for item:', itemId);
                        descriptionRow.remove();
                    } else {
                        console.warn('Description row not found for item:', itemId);
                    }
                    calculateQuoteTotals(quoteId);
                }
            });
        }

        // Add item row
        function addItemRow(quoteId) {
            const tbody = document.querySelector(`#items-tbody_${quoteId}`);
            if (!tbody) {
                console.error('Items tbody not found for quoteId:', quoteId);
                return;
            }
            const newItemId = 'new_' + Date.now();
            console.log('Adding new item row for quoteId:', quoteId, 'NewItemId:', newItemId);

            const itemRow = document.createElement('tr');
            itemRow.className = 'quote-item-row';
            itemRow.dataset.itemId = newItemId;
            itemRow.innerHTML = `
                <td>
                    <select name="QuoteItems[${newItemId}].ProductId" class="form-select tom-select-product" data-selected-id="" data-selected-text="" autocomplete="off" required>
                        <option value="" disabled selected>-- Válasszon terméket --</option>
                    </select>
                </td>
                <td>
                    <input type="number" name="QuoteItems[${newItemId}].Quantity" class="form-control form-control-sm item-quantity" value="1" min="0" step="1" required>
                </td>
                <td>
                    <input type="number" name="QuoteItems[${newItemId}].ListPrice" 
                        class="form-control form-control-sm item-list-price" 
                        value="0" min="0" step="0.01" required readonly
                        style="background-color: #f8f9fa; cursor: not-allowed;">
                </td>
                <td>
                    <input type="number" name="QuoteItems[${newItemId}].PartnerPrice" 
                        class="form-control form-control-sm item-partner-price" 
                        value="0" min="0" step="0.01" required readonly
                        style="background-color: #f8f9fa; cursor: not-allowed;">
                </td>
                <td>
                    <input type="number" name="QuoteItems[${newItemId}].QuantityDiscount" 
                        class="form-control form-control-sm quantity-discount" 
                        value="" min="0" step="0.01" readonly
                        style="background-color: #f8f9fa; cursor: not-allowed;">
                </td>
                <td>
                    <input type="number" name="QuoteItems[${newItemId}].DiscountPercentage" class="form-control form-control-sm discount-value" value="" placeholder="pl. 10" min="0" step="0.01">
                </td>
                <td>
                    <select name="QuoteItems[${newItemId}].DiscountType" class="form-select form-select-sm discount-type">
                        <option value="NoDiscount" selected>Nincs Kedvezmény</option>
                        <option value="ListPrice">Listaár</option>
                        <option value="PartnerPrice">Ügyfélár</option>
                        <option value="VolumeDiscount">Mennyiségi kedvezmény</option>
                        <option value="CustomDiscountPercentage">Egyedi kedvezmény %</option>
                        <option value="CustomDiscountAmount">Egyedi kedvezmény Összeg</option>
                    </select>
                </td>
                @* <td>
                    <select name="QuoteItems[${newItemId}].CurrencyId" class="form-select tom-select-currency" data-selected-id="" data-selected-text="" autocomplete="off">
                        <option value="" disabled selected>-- Valuta --</option>
                    </select>
                </td> *@
                <td>
                    <span class="item-list-price-total">0.00</span>
                </td>
                <td>
                    <span class="item-net-discounted-price">0.00</span>
                </td>
                <td>
                    <input type="text" name="QuoteItems[${newItemId}].VatTypeId" class="form-input tom-select-vat" data-selected-id="" data-selected-text="" placeholder="Válasszon ÁFA-t" autocomplete="off">
                </td>
                <td>
                    <span class="item-vat-amount">0.00</span>
                </td>
                <td>
                    <span class="item-total">0.00</span>
                    <input type="hidden" name="QuoteItems[${newItemId}].ItemDescription" class="item-description" value="">
                </td>
                <td>
                    <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="${newItemId}"><i class="bi bi-pencil"></i></button>
                    <button type="button" class="btn btn-danger btn-sm remove-item" data-item-id="${newItemId}"><i class="bi bi-trash"></i></button>
                </td>
            `;

            // Add description row
            const descriptionRow = document.createElement('tr');
            descriptionRow.className = 'description-row';
            descriptionRow.dataset.itemId = newItemId;
            descriptionRow.style.display = 'none';
            descriptionRow.innerHTML = `
                <td colspan="14">
                    <textarea name="QuoteItems[${newItemId}].ItemDescription" class="form-control item-description" rows="3" maxlength="500" placeholder="Tétel leírása..."></textarea>
                    <small class="char-count">0</small>/500
                </td>
            `;

            tbody.insertBefore(itemRow, tbody.querySelector('.quote-total-row'));
            tbody.insertBefore(descriptionRow, tbody.querySelector('.quote-total-row'));

            requestAnimationFrame(() => {
                try {
                    const productSelect = itemRow.querySelector('.tom-select-product');
                    const vatSelect = itemRow.querySelector('.tom-select-vat');
                    if (productSelect) {
                        initializeProductTomSelect(productSelect, quoteId);
                    } else {
                        console.error('Product select not found in row:', newItemId);
                    }
                    if (vatSelect) {
                        initializeVatTomSelect(vatSelect);
                    } else {
                        console.warn('VAT select not found in row:', newItemId);
                    }
                    initializeRowCalculations(itemRow);
                    initializeDescriptionToggle(itemRow);
                    calculateQuoteTotals(quoteId);
                } catch (error) {
                    console.error('Error initializing row:', newItemId, error);
                }
            });

            console.log('Added new item row:', newItemId, 'Row HTML:', itemRow.outerHTML);
            console.log('Added description row:', newItemId, 'Description Row HTML:', descriptionRow.outerHTML);
        }

        // Edit description
        function initializeDescriptionEditing(quoteId) {
            const tbody = document.querySelector(`#items-tbody_${quoteId}`);
            tbody.addEventListener('click', function (e) {
                const button = e.target.closest('.edit-description');
                if (button) {
                    console.log('Edit description button clicked');
                    const itemId = button.getAttribute('data-item-id');
                    const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
                    if (!row) {
                        console.error('Row not found for itemId:', itemId);
                        return;
                    }
                    const descriptionInput = row.querySelector(`input[name="QuoteItems[${itemId}].ItemDescription"]`);
                    if (!descriptionInput) {
                        console.error('Description input not found for itemId:', itemId);
                        return;
                    }
                    const currentDescription = descriptionInput.value;
                    console.log('Current description:', currentDescription);

                    try {
                        const modal = document.querySelector('#editDescriptionModal');
                        if (!modal) {
                            console.error('Edit description modal not found');
                            return;
                        }
                        modal.querySelector('#editDescriptionItemId').value = itemId;
                        modal.querySelector('#editDescription').value = currentDescription;
                        modal.querySelector('#charCount').textContent = currentDescription.length;

                        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                            const bsModal = new bootstrap.Modal(modal);
                            bsModal.show();
                            console.log('Modal shown');
                        } else {
                            console.error('Bootstrap Modal is not available');
                        }
                    } catch (error) {
                        console.error('Error opening description modal:', error);
                    }
                }
            });

            const descriptionTextarea = document.querySelector('#editDescription');
            if (descriptionTextarea) {
                descriptionTextarea.addEventListener('input', function () {
                    const charCount = this.value.length;
                    const charCountElement = document.querySelector('#charCount');
                    if (charCountElement) {
                        charCountElement.textContent = charCount;
                    }
                });
            }

            const saveDescriptionBtn = document.querySelector('#saveDescriptionBtn');
            if (saveDescriptionBtn) {
                saveDescriptionBtn.addEventListener('click', function () {
                    try {
                        const itemId = document.querySelector('#editDescriptionItemId').value;
                        const newDescription = document.querySelector('#editDescription').value;
                        const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
                        if (!row) {
                            console.error('Row not found for itemId:', itemId);
                            return;
                        }
                        const descriptionInput = row.querySelector(`input[name="QuoteItems[${itemId}].ItemDescription"]`);
                        if (!descriptionInput) {
                            console.error('Description input not found for itemId:', itemId);
                            return;
                        }

                        descriptionInput.value = newDescription;
                        console.log('Description saved for itemId:', itemId, 'New value:', newDescription);

                        const modal = document.querySelector('#editDescriptionModal');
                        const bsModal = bootstrap.Modal.getInstance(modal);
                        if (bsModal) {
                            bsModal.hide();
                            console.log('Modal hidden');
                        }

                        calculateQuoteTotals(quoteId);
                    } catch (error) {
                        console.error('Error saving description:', error);
                    }
                });
            }
        }

        // Validate form
        function validateForm(form, quoteId) {
            const errors = [];
            const requiredFields = form.querySelectorAll('[required]');
            requiredFields.forEach(field => {
                const value = field.value.trim();
                if (!value) {
                    const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                    errors.push(`${label} mező kitöltése kötelező`);
                }
                if (['subject'].includes(field.name)) {
                    if (!value || value === '1' || value === 'x') {
                        const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                        errors.push(`${label} mező nem lehet üres, "1" vagy "x"`);
                        console.warn(`Invalid value for ${field.name}: ${value}`);
                    }
                }
                if (field.name.includes('.Quantity') || field.name.includes('.UnitPrice')) {
                    const numValue = parseFloat(value);
                    if (isNaN(numValue) || numValue <= 0) {
                        const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                        errors.push(`${label} mező pozitív szám kell legyen`);
                    }
                }
                console.log('Validating field:', field.name, 'Value:', value);
            });
            return errors;
        }
@* Save quote *@
function saveQuote(quoteId) {
    const baseForm = document.querySelector(`#quoteBaseInfoForm_${quoteId}`);
    const itemsForm = document.querySelector(`#quoteItemsForm_${quoteId}`);
    const totalAmount = calculateQuoteTotals(quoteId);

    const baseInfoTab = document.querySelector(`#base-info-tab_${quoteId}`);
    if (baseInfoTab) {
        baseInfoTab.click();
        console.log('Switched to base-info tab for quoteId:', quoteId);
    }

    const baseErrors = validateForm(baseForm, quoteId);
    const itemErrors = validateForm(itemsForm, quoteId);
    if (baseErrors.length > 0 || itemErrors.length > 0) {
        const allErrors = [...baseErrors, ...itemErrors];
        console.log('Validation errors for quoteId:', quoteId, allErrors);
        alert('Kérjük, töltse ki az összes kötelező mezőt megfelelően:\n' + allErrors.join('\n'));
        return;
    }

    const baseData = new FormData(baseForm);
    const itemsData = new FormData(itemsForm);

    // Debug FormData keys
    console.log('Base FormData keys:', Array.from(baseData.keys()));
    console.log('Items FormData keys:', Array.from(itemsData.keys()));

    const currencyId = baseData.get('currencyId');
    console.log('Captured CurrencyId for quoteId:', quoteId, currencyId);
    if (!currencyId || isNaN(parseInt(currencyId))) {
        console.warn('Invalid or missing CurrencyId for quoteId:', quoteId);
        alert('Kérjük, válasszon pénznemet.');
        return;
    }

    const partnerId = baseData.get('partnerId');
    console.log('Captured PartnerId for quoteId:', quoteId, partnerId);
    if (!partnerId || isNaN(parseInt(partnerId))) {
        console.warn('Invalid or missing PartnerId for quoteId:', quoteId);
        alert('Kérjük, válasszon partnert.');
        return;
    }

    const discountPercentage = parseFloat(itemsData.get('TotalDiscount')) || null;
    const discountAmount = parseFloat(itemsData.get('TotalDiscountAmount')) || null;

    const quoteDto = {
        QuoteNumber: baseData.get('quoteNumber') || '',
        PartnerId: parseInt(baseData.get('partnerId')),
        CurrencyId: parseInt(currencyId),
        QuoteDate: baseData.get('quoteDate') || null,
        Status: statusMapping[baseData.get('status')] || baseData.get('status'),
        TotalAmount: totalAmount || 0,
        SalesPerson: baseData.get('salesPerson') || '',
        ValidityDate: baseData.get('validityDate') || null,
        Subject: baseData.get('subject') || '',
        Description: baseData.get('description') || '',
        DetailedDescription: baseData.get('detailedDescription') || '',
        DiscountPercentage: discountPercentage,
        DiscountAmount: discountAmount,
        CreatedBy: currentUsername,
        ModifiedBy: currentUsername,
        Items: []
    };

    const quoteItems = [];
    const rows = document.querySelectorAll(`#items-tbody_${quoteId} .quote-item-row`);
    console.log('Found rows for saving:', rows.length, 'IDs:', Array.from(rows).map(r => r.dataset.itemId));
    rows.forEach((row, index) => {
        const itemId = row.dataset.itemId;
        const productId = itemsData.get(`items[${index}][productId]`) || itemsData.get(`QuoteItems[${itemId}].ProductId`);
        if (!productId) {
            console.warn('Skipping item with no ProductId:', itemId);
            return;
        }
        const vatTypeId = parseInt(itemsData.get(`items[${index}][vatTypeId]`) || itemsData.get(`QuoteItems[${itemId}].VatTypeId`));
        if (!vatTypeId || isNaN(vatTypeId)) {
            console.warn('VAT type not selected for item:', itemId);
            alert('Kérjük, válasszon ÁFA típust minden tételhez.');
            return;
        }
        const quantity = parseFloat(itemsData.get(`items[${index}][quantity]`) || itemsData.get(`QuoteItems[${itemId}].Quantity`)) || 0;
        const unitPrice = parseFloat(itemsData.get(`items[${index}][listPrice]`) || itemsData.get(`QuoteItems[${itemId}].ListPrice`)) || 0;
        if (quantity <= 0) {
            console.warn('Invalid quantity for item:', itemId);
            alert('A mennyiségnek nagyobbnak kell lennie, mint 0.');
            return;
        }
        if (unitPrice <= 0) {
            console.warn('Invalid unit price for item:', itemId);
            alert('Az egységárnak nagyobbnak kell lennie, mint 0.');
            return;
        }
        const discountType = row.querySelector('select[name="items[][discount][discountType]"]')?.value || 'NoDiscount';
        const discountValue = parseFloat(
            itemsData.get(`items[${index}][discount][discountPercentage]`) ||
            itemsData.get(`items[${index}][discount][discountAmount]`) ||
            itemsData.get(`items[${index}][discount][partnerPrice]`) ||
            itemsData.get(`items[${index}][discount][volumePrice]`) ||
            itemsData.get(`QuoteItems[${itemId}].DiscountPercentage`) ||
            itemsData.get(`QuoteItems[${itemId}].DiscountAmount`)
        ) || 0;
        const item = {
            ProductId: parseInt(productId),
            Quantity: quantity,
            UnitPrice: unitPrice,
            ItemDescription: itemsData.get(`items[${index}][itemDescription]`) || itemsData.get(`QuoteItems[${itemId}].ItemDescription`) || '',
            VatTypeId: vatTypeId,
            Discount: discountType !== 'NoDiscount' ? {
                DiscountType: discountType,
                DiscountPercentage: discountType === 'CustomDiscountPercentage' ? discountValue : null,
                DiscountAmount: discountType === 'CustomDiscountAmount' ? discountValue : null,
                PartnerPrice: discountType === 'PartnerPrice' ? discountValue : null,
                VolumeThreshold: parseInt(itemsData.get(`items[${index}][discount][volumeThreshold]`) || itemsData.get(`QuoteItems[${itemId}].VolumeThreshold`)) || null,
                VolumePrice: discountType === 'VolumeDiscount' ? discountValue : null
            } : null
        };
        quoteItems.push({ item, isNew: quoteId === 'new' });
        quoteDto.Items.push(item);
    });

    if (quoteItems.length === 0) {
        console.log('No quote items found for quoteId:', quoteId);
        alert('Legalább egy tétel szükséges az árajánlathoz.');
        return;
    }

    console.log('Saving quote for quoteId:', quoteId, { quoteDto, quoteItems });

    if (quoteId === 'new') {
        fetch('/api/Quotes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(quoteDto)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    let errorDetails;
                    try {
                        errorDetails = JSON.parse(text);
                    } catch {
                        errorDetails = text || 'No details provided';
                    }
                    console.error('Server error details for quote creation:', errorDetails);
                    throw new Error(`Failed to create quote: ${response.status} "${errorDetails.title || JSON.stringify(errorDetails.errors) || errorDetails}"`);
                });
            }
            return response.json();
        })
        .then(data => {
            const newQuoteId = data.quoteId || data.QuoteId;
            console.log('Quote created successfully, QuoteId:', newQuoteId);
            alert('Árajánlat sikeresen létrehozva!');
            const modal = document.getElementById('newQuoteModal');
            bootstrap.Modal.getInstance(modal)?.hide();
            window.location.reload();
        })
        .catch(error => {
            console.error('Save error for quoteId:', quoteId, error);
            alert('Hiba történt az árajánlat létrehozása közben: ' + error.message);
        });
    } else {
        const itemPromises = quoteItems.map(({ item, isNew }, index) => {
            const url = isNew ? `/api/Quotes/${quoteId}/Items` : `/api/Quotes/${quoteId}/Items/${item.QuoteItemId}`;
            const method = isNew ? 'POST' : 'PUT';
            const payload = {
                QuoteId: item.QuoteId,
                ProductId: item.ProductId,
                Quantity: item.Quantity,
                UnitPrice: item.UnitPrice,
                ItemDescription: item.ItemDescription,
                DiscountPercentage: item.DiscountPercentage,
                DiscountAmount: item.DiscountAmount,
                VatTypeId: item.VatTypeId,
                TotalPrice: item.TotalPrice
            };
            console.log(`Sending item ${index + 1} payload for ${method}:`, payload);
            return fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                console.log(`Item ${index + 1} response status:`, response.status);
                if (!response.ok) {
                    return response.json().then(err => {
                        console.error(`Server error details for item ${index + 1}:`, err);
                        throw new Error(`Failed to ${isNew ? 'create' : 'update'} item ${item.QuoteItemId || 'new'}: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                    });
                }
                return response.json();
            })
            .then(itemData => {
                console.log(`Item ${index + 1} saved:`, itemData);
                return itemData;
            });
        });

        Promise.all(itemPromises)
            .then(savedItems => {
                console.log('All items saved for quoteId:', quoteId, savedItems.map(i => ({ QuoteItemId: i.quoteItemId || i.QuoteItemId, ProductId: i.productId || i.ProductId })));
                return fetch(`/api/Quotes/${quoteId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(quoteDto)
                });
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        console.error('Server error details for quote update:', err);
                        throw new Error(`Failed to update quote: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Quote saved successfully for quoteId:', quoteId, data);
                alert('Árajánlat sikeresen mentve!');
                const modal = document.getElementById(`editQuoteModal_${quoteId}`);
                bootstrap.Modal.getInstance(modal).hide();
                window.location.reload();
            })
            .catch(error => {
                console.error('Save error for quoteId:', quoteId, error);
                alert('Hiba történt az árajánlat mentése közben: ' + error.message);
            });
    }
}

        // Initialize event listeners
        function initializeEventListeners(quoteId) {
            console.log('Initializing event listeners for quoteId:', quoteId);

            const addButtons = document.querySelectorAll(`.add-item-row[data-quote-id="${quoteId}"]`);
            addButtons.forEach((button, index) => {
                if (!button.dataset.listenerAdded) {
                    button.addEventListener('click', () => {
                        console.log(`Add item button ${index} clicked for quoteId: ${quoteId}`);
                        addItemRow(quoteId);
                    });
                    button.dataset.listenerAdded = 'true';
                }
            });

            const saveButtons = document.querySelectorAll(`.save-quote[data-quote-id="${quoteId}"]`);
            saveButtons.forEach((button, index) => {
                if (!button.dataset.listenerAdded) {
                    button.addEventListener('click', () => {
                        console.log(`Save quote button ${index} clicked for quoteId: ${quoteId}`);
                        saveQuote(quoteId);
                    });
                    button.dataset.listenerAdded = 'true';
                }
            });

            const productSelects = document.querySelectorAll(`#items-tbody_${quoteId} .tom-select-product`);
            productSelects.forEach(select => {
                if (select.tomselect) select.tomselect.destroy();
                initializeProductTomSelect(select, quoteId);
                const row = select.closest('.quote-item-row');
                if (row) {
                    initializeRowCalculations(row);
                    initializeDescriptionToggle(row);
                }
            });

            const vatSelects = document.querySelectorAll(`#items-tbody_${quoteId} .tom-select-vat`);
            vatSelects.forEach(select => {
                if (select.tomselect) select.tomselect.destroy();
                initializeVatTomSelect(select);
            });

            const modal = document.querySelector(`#${quoteId === 'new' ? 'newQuoteModal' : 'editQuoteModal_' + quoteId}`);
            const partnerSelect = modal.querySelector('select[name="partnerId"]');
            if (partnerSelect && !partnerSelect.dataset.tomSelectInitialized) {
                partnerSelect.dataset.tomSelectInitialized = 'true';
                initializePartnerTomSelect(partnerSelect, quoteId);
            }

            initializeDeleteButtons(quoteId);
            initializeQuoteDiscountCalculations(quoteId);
            initializeDescriptionEditing(quoteId);
            calculateQuoteTotals(quoteId);
        }

        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Initialize all components
        initializeFilterDropdown();
        document.querySelectorAll('select[name="currencyId"], .currency-select').forEach(initializeCurrencyTomSelect);
        document.querySelectorAll('input[name$="VatTypeId"], .tom-select-vat').forEach(initializeVatTomSelect);
        initializeModals();
        initializeCopyQuote();
    });
</script>

}