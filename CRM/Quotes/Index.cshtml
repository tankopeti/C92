
@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Cloud9_2.Models
@using System.Globalization
@model Cloud9_2.Pages.CRM.Quotes.IndexModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Quotes";
}

@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Quotes</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Quotes.Count of @Model.TotalRecords quote@(Model.TotalRecords != 1 ? "s" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newQuoteButton" class="btn-new" data-bs-toggle="modal" data-bs-target="#newQuoteModal">
                    <i class="bi bi-plus-circle me-1"></i>New Quote
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" asp-page="./Index" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Search quotes..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-funnel me-1"></i>Filter
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" data-filter="all">All Quotes</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="Draft">Draft</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="Sent">Sent</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="Accepted">Accepted</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="Rejected">Rejected</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Card Grid Header -->
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column quote-number-col">Quote Number</div>
                <div class="card-grid-column quote-partner-col">Partner</div>
                <div class="card-grid-column quote-date-col">Date</div>
                <div class="card-grid-column quote-status-col">Status</div>
                <div class="card-grid-column quote-amount-col">Total Amount</div>
                <div class="card-grid-column actions-column">Actions</div>
            </div>
        </div>
    </div>

<!-- Card Grid Body -->
<div class="scrollable-card-container">
    <div class="card-grid-body">
        @if (Model.Quotes.Any())
        {
            @foreach (var quote in Model.Quotes)
            {
                <div class="card partner-card mb-3" data-quote-id="@quote.QuoteId">
                    <div class="card-body p-2">
                        <div class="card-grid-row align-items-center">
                            <div class="card-grid-cell quote-number-col">
                                <div class="quote-info">
                                    <div class="fw-bold">@quote.QuoteNumber</div>
                                </div>
                            </div>
                            <div class="card-grid-cell quote-partner-col">
                                <div class="quote-partner text-muted small">
                                    <i class="bi bi-person me-1"></i>@quote.Partner.Name
                                </div>
                            </div>
                            <div class="card-grid-cell quote-date-col">
                                <div class="quote-date text-muted small">
                                    <i class="bi bi-calendar me-1"></i>@quote.QuoteDate?.ToString("yyyy-MM-dd")
                                </div>
                            </div>
                            <div class="card-grid-cell quote-status-col">
                                @{
                                    var badgeClass = "badge bg-secondary";
                                    if (quote.Status == "Draft") badgeClass = "badge badge-draft";
                                    else if (quote.Status == "Sent") badgeClass = "badge badge-sent";
                                    else if (quote.Status == "Accepted") badgeClass = "badge badge-accepted";
                                    else if (quote.Status == "Rejected") badgeClass = "badge badge-rejected";
                                }
                                <span class="@badgeClass">@quote.Status</span>
                            </div>
                            <div class="card-grid-cell quote-amount-col">
                                <div class="quote-amount text-muted small">
                                    <i class="bi bi-currency-dollar me-1"></i>@quote.TotalAmount?.ToString("C")
                                </div>
                            </div>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-info btn-sm view-quote-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewQuoteModal_@quote.QuoteId"
                                            data-bs-placement="top"
                                            data-bs-title="View Details">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                        <div class="dropdown">
                                            <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                id="actionsDropdown_@quote.QuoteId"
                                                    data-bs-toggle="dropdown" 
                                                    aria-expanded="false"
                                                    data-bs-placement="top"
                                                    data-bs-title="More Actions">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@quote.QuoteId">
                                            <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#editQuoteModal_@quote.QuoteId"><i class="bi bi-pencil-square me-2"></i>Szerkesztés</a></li>
                                            <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#quoteItemsModal_@quote.QuoteId"><i class="bi bi-list-ul me-2"></i>Tételek szerkesztése</a></li>
                                            <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#viewQuoteModal_@quote.QuoteId"><i class="bi bi-eye me-2"></i>Megtekintés</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteQuoteModal_@quote.QuoteId"><i class="bi bi-trash me-2"></i>Törlés</a></li>
                                        </ul>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-warning text-center mt-3" role="alert">
                @if (!string.IsNullOrEmpty(Model.SearchTerm))
                {
                    @:No quotes found matching "@Model.SearchTerm".
                }
                else
                {
                    @:No quotes found. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newQuoteModal">Create the first one?</button>
                }
            </div>
        }
    </div>
</div>

    <!-- Pagination Footer -->
    @await Html.PartialAsync("_PaginationFooter", new PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Quotes"
    })

<!-- Delete Confirmation Modals -->
@foreach (var quote in Model.Quotes)
{
    <div class="modal fade" id="deleteQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="deleteQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteQuoteModalLabel_@quote.QuoteId">Árajánlat törlése</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Biztosan törölni szeretné az árajánlatot (<strong>@quote.QuoteNumber</strong>) és az összes kapcsolódó tételt?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                    <button type="button" class="btn btn-danger confirm-delete-quote" data-quote-id="@quote.QuoteId">Törlés</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- New Quote Modal -->
<div class="container">
    <button id="newQuoteButton" class="btn btn-primary btn-lg mt-3"><i class="fas fa-plus"></i> Új árajánlat</button>
    <div class="modal fade" id="newQuoteModal" tabindex="-1" aria-labelledby="newQuoteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newQuoteModalLabel">Új árajánlat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                </div>
                <div class="modal-body">
                    <form id="quoteForm" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="quoteId" name="QuoteId" value="0">
                        <!-- Tabs -->
                        <ul class="nav nav-tabs" id="quoteTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab" aria-controls="details" aria-selected="true">Részletek</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="items-tab" data-bs-toggle="tab" data-bs-target="#items" type="button" role="tab" aria-controls="items" aria-selected="false">Tételek</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="discounts-tab" data-bs-toggle="tab" data-bs-target="#discounts" type="button" role="tab" aria-controls="discounts" aria-selected="false">Kedvezmények</button>
                            </li>
                        </ul>
                        <div class="tab-content" id="quoteTabContent">
                            <!-- Quote Details Tab -->
                            <div class="tab-pane fade show active" id="details" role="tabpanel" aria-labelledby="details-tab">
                                <div class="mb-3">
                                    <label for="partnerId" class="form-label">Partner</label>
                                    <select id="partnerId" name="PartnerId" class="form-control select2-partner" required aria-label="Partner kiválasztása">
                                        <option value="">Válasszon partnert...</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="currencyId" class="form-label">Pénznem</label>
                                    <select id="currencyId" name="CurrencyId" class="form-control select2-currency" required aria-label="Pénznem kiválasztása">
                                        <option value="">Válasszon pénznemet...</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="salesPerson" class="form-label">Értékesítő</label>
                                    <input id="salesPerson" name="SalesPerson" type="text" class="form-control" required aria-label="Értékesítő neve">
                                </div>
                                <div class="mb-3">
                                    <label for="quoteDate" class="form-label required">Dátum</label>
                                    <input id="quoteDate" name="QuoteDate" type="date" class="form-control" required aria-label="Árajánlat dátuma">
                                </div>
                                <div class="mb-3">
                                    <label for="validityDate" class="form-label">Érvényességi dátum</label>
                                    <input id="validityDate" name="ValidityDate" type="date" class="form-control" required aria-label="Érvényességi dátum">
                                </div>
                                <div class="mb-3">
                                    <label for="subject" class="form-label">Tárgy</label>
                                    <input id="subject" name="Subject" type="text" maxlength="200" class="form-control" required aria-label="Árajánlat tárgya">
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Leírás</label>
                                    <input id="description" name="Description" type="text" maxlength="200" class="form-control" aria-label="Leírás">
                                </div>
                                <div class="mb-3">
                                    <label for="detailedDescription" class="form-label">Részletes leírás</label>
                                    <textarea id="detailedDescription" name="DetailedDescription" class="form-control" rows="5" aria-label="Részletes leírás"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="status" class="form-label">Státusz</label>
                                    <select id="status" name="Status" class="form-control" aria-label="Státusz kiválasztása">
                                        <option value="Draft" selected>Kész</option>
                                        <option value="Sent">Küldött</option>
                                        <option value="Approved">Elfogadott</option>
                                        <option value="Rejected">Elutasított</option>
                                    </select>
                                </div>
                            </div>
                            <!-- Items Tab -->
                            <div class="tab-pane fade" id="items" role="tabpanel" aria-labelledby="items-tab">
                                <table id="quoteItemsTable" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Termék</th>
                                            <th>Leírás</th>
                                            <th>Mennyiség</th>
                                            <th>Egységár</th>
                                            <th>Kedvezmény</th>
                                            <th>Összeg</th>
                                            <th>Műveletek</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                                <button type="button" class="btn btn-outline-primary btn-sm mb-3 toggle-item-form"><i class="fas fa-plus"></i> Tétel hozzáadása</button>
                                <div class="item-form" style="display: none;">
                                    <div class="mb-3">
                                        <label for="newProductId" class="form-label">Termék</label>
                                        <select id="newProductId" class="form-control select2-product" required aria-label="Termék kiválasztása">
                                            <option value="">Válasszon terméket...</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label for="newItemDescription" class="form-label">Leírás</label>
                                        <input id="newItemDescription" class="form-control" aria-label="Tétel leírása">
                                    </div>
                                    <div class="mb-3">
                                        <label for="newQuantity" class="form-label">Mennyiség</label>
                                        <input id="newQuantity" type="number" min="1" class="form-control" required aria-label="Mennyiség">
                                    </div>
                                    <div class="mb-3">
                                        <label for="newUnitPrice" class="form-label">Egységár</label>
                                        <input id="newUnitPrice" type="number" step="0.01" class="form-control" required aria-label="Egységár">
                                    </div>
                                    <div class="mb-3">
                                        <label for="newDiscountPercentage" class="form-label">Kedvezmény (%)</label>
                                        <input id="newDiscountPercentage" type="number" step="0.01" min="0" max="100" class="form-control" value="0" aria-label="Kedvezmény százaléka">
                                    </div>
                                    <div class="mb-3">
                                        <label for="newDiscountAmount" class="form-label">Kedvezmény összege</label>
                                        <input id="newDiscountAmount" type="number" step="0.01" min="0" class="form-control" value="0" aria-label="Kedvezmény összege">
                                    </div>
                                    <div class="mb-3">
                                        <label for="newTotalPrice" class="form-label">Összeg</label>
                                        <input id="newTotalPrice" class="form-control" readonly aria-label="Tétel összege">
                                    </div>
                                    <button type="button" class="btn btn-primary btn-sm add-item">Tétel hozzáadása</button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm cancel-item">Mégse</button>
                                </div>
                            </div>
                            <!-- Discounts Tab -->
                            <div class="tab-pane fade" id="discounts" role="tabpanel" aria-labelledby="discounts-tab">
                                <div class="mb-3">
                                    <label for="discountPercentage" class="form-label">Kedvezmény (%)</label>
                                    <input id="discountPercentage" name="DiscountPercentage" type="number" step="0.01" min="0" max="100" class="form-control" value="0.00" aria-label="Kedvezmény százaléka">
                                </div>
                                <div class="mb-3">
                                    <label for="discountAmount" class="form-label">Kedvezmény összege</label>
                                    <input id="discountAmount" name="DiscountAmount" type="number" step="0.01" min="0" class="form-control" value="0.00" aria-label="Kedvezmény összege">
                                </div>
                                <div class="mb-3">
                                    <label for="totalAmount" class="form-label">Végösszeg</label>
                                    <input id="totalAmount" name="TotalAmount" class="form-control" readonly value="0.00" aria-label="Végösszeg">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Mégse</button>
                    <button type="button" class="btn btn-primary" id="saveQuoteButton">Mentés</button>
                </div>
            </div>
        </div>
    </div>
</div>
        

<!-- Edit QuoteItem Modal -->
    @foreach (var quote in Model.Quotes)
    {
        <div class="modal fade" id="quoteItemsModal_@quote.QuoteId" tabindex="-1" aria-labelledby="quoteItemsModalLabel_@quote.QuoteId" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="quoteItemsModalLabel_@quote.QuoteId">Tételek: @(quote.Description ?? "N/A")</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newQuoteItemModal_@quote.QuoteId">
                            <i class="bi bi-plus-circle me-1"></i> Új tétel
                        </button>
                    </div>
                    <table class="table table-hover" id="quoteItemsTable_@quote.QuoteId">
                        <thead>
                            <tr>
                                <th scope="col">Termék</th>
                                <th scope="col">Leírás</th>
                                <th scope="col">Mennyiség</th>
                                <th scope="col">Egységár</th>
                                <th scope="col">Kedvezmény</th>
                                <th scope="col">Összeg</th>
                                <th scope="col">Műveletek</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!quote.QuoteItems.Any())
                            {
                                <tr>
                                    <td colspan="7">Nincsenek tételek az árajánlathoz.</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var quoteItem in quote.QuoteItems)
                                {
                                    <tr data-item-id="@quoteItem.QuoteItemId">
                                        <td>@(quoteItem.Product?.Name ?? "N/A")</td>
                                        <td>@quoteItem.ItemDescription</td>
                                        <td>@quoteItem.Quantity</td>
                                        <td>@quoteItem.UnitPrice.ToString("F2", CultureInfo.GetCultureInfo("hu-HU"))</td>
                                        <td>
                                            @(quoteItem.DiscountPercentage.HasValue && quoteItem.DiscountPercentage.Value > 0
                                                ? $"{quoteItem.DiscountPercentage.Value:F2}%"
                                                : quoteItem.DiscountAmount.HasValue && quoteItem.DiscountAmount.Value > 0
                                                    ? $"{quoteItem.DiscountAmount.Value:F2}"
                                                    : "0,00")
                                        </td>
                                        <td>
                                            @((quoteItem.Quantity * quoteItem.UnitPrice - (quoteItem.DiscountAmount ?? (quoteItem.DiscountPercentage.HasValue ? (quoteItem.Quantity * quoteItem.UnitPrice * quoteItem.DiscountPercentage.Value / 100) : 0))).ToString("F2", CultureInfo.GetCultureInfo("hu-HU")))
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-primary btn-sm"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#editQuoteItemModal_@quoteItem.QuoteItemId"
                                                        data-quote-id="@quote.QuoteId"
                                                        data-item-id="@quoteItem.QuoteItemId">
                                                    <i class="bi bi-pencil-square me-1"></i>Szerkesztés
                                                </button>
                                                <button class="btn btn-danger btn-sm delete-item" 
                                                        data-quote-id="@quote.QuoteId" 
                                                        data-item-id="@quoteItem.QuoteItemId">
                                                    <i class="bi bi-trash me-2"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezárás</button>
                </div>
            </div>
        </div>
    </div>

@foreach (var quoteItem in quote.QuoteItems)
{
    <div class="modal fade" id="editQuoteItemModal_@quoteItem.QuoteItemId" tabindex="-1" aria-labelledby="editQuoteItemModalLabel_@quoteItem.QuoteItemId" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editQuoteItemModalLabel_@quoteItem.QuoteItemId">Tétel szerkesztése: @(quoteItem.Product?.Name ?? "N/A")</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editQuoteItemForm_@quoteItem.QuoteItemId" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="QuoteId" value="@quote.QuoteId" autocomplete="off" />
                        <input type="hidden" name="QuoteItemId" value="@quoteItem.QuoteItemId" autocomplete="off" />
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editProductId_@quoteItem.QuoteItemId" class="form-label">Termék <span class="text-danger">*</span></label>
                                <div class="select2-container-wrapper">
                                    <select class="form-select select2-product" id="editProductId_@quoteItem.QuoteItemId" name="ProductId" required autocomplete="off" data-initial-id="@quoteItem.ProductId" data-initial-name="@(quoteItem.Product?.Name ?? "N/A")">
                                        <option></option>
                                    </select>
                                </div>
                                <div class="invalid-feedback">Termék kiválasztása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editQuantity_@quoteItem.QuoteItemId" class="form-label">Mennyiség <span class="text-danger">*</span></label>
                                <input type="text" class="form-control quantity" id="editQuantity_@quoteItem.QuoteItemId" name="Quantity" value="@quoteItem.Quantity" required autocomplete="off">
                                <div class="invalid-feedback">Mennyiség megadása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editUnitPrice_@quoteItem.QuoteItemId" class="form-label">Egységár <span class="text-danger">*</span></label>
                                <input type="text" class="form-control unitPrice" id="editUnitPrice_@quoteItem.QuoteItemId" name="UnitPrice" value="@quoteItem.UnitPrice.ToString("F2", CultureInfo.GetCultureInfo("hu-HU"))" required autocomplete="off">
                                <div class="invalid-feedback">Egységár megadása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editItemDiscount_@quoteItem.QuoteItemId" class="form-label">Kedvezmény</label>
                                <div class="input-group">
                                    <input type="text" class="form-control itemDiscount" id="editItemDiscount_@quoteItem.QuoteItemId" name="Discount" value="@(quoteItem.DiscountPercentage.HasValue && quoteItem.DiscountPercentage.Value > 0 ? quoteItem.DiscountPercentage.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : quoteItem.DiscountAmount.HasValue && quoteItem.DiscountAmount.Value > 0 ? quoteItem.DiscountAmount.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "")" placeholder="0,00" autocomplete="off">
                                    <select class="form-select" id="editItemDiscountType_@quoteItem.QuoteItemId" name="DiscountType" style="width: auto;">
                                        @if (quoteItem.DiscountPercentage.HasValue && quoteItem.DiscountPercentage.Value > 0)
                                        {
                                            <option value="percentage" selected>Százalék (%)</option>
                                            <option value="amount">Összeg (HUF)</option>
                                        }
                                        else
                                        {
                                            <option value="percentage">Százalék (%)</option>
                                            <option value="amount" selected>Összeg (HUF)</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-12">
                                <label for="editItemDescription_@quoteItem.QuoteItemId" class="form-label">Tétel leírása</label>
                                <textarea class="form-control" id="editItemDescription_@quoteItem.QuoteItemId" name="ItemDescription" maxlength="200" rows="3" autocomplete="off">@quoteItem.ItemDescription</textarea>
                            </div>
                            <div class="col-md-6">
                                <label for="editTotalPrice_@quoteItem.QuoteItemId" class="form-label">Összeg</label>
                                <input type="text" class="form-control" id="editTotalPrice_@quoteItem.QuoteItemId" value="@((quoteItem.Quantity * quoteItem.UnitPrice - (quoteItem.DiscountAmount ?? (quoteItem.DiscountPercentage.HasValue ? (quoteItem.Quantity * quoteItem.UnitPrice * quoteItem.DiscountPercentage.Value / 100) : 0))).ToString("F2", CultureInfo.GetCultureInfo("hu-HU")))" readonly autocomplete="off">
                            </div>
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn btn-primary" id="saveQuoteItem_@quoteItem.QuoteItemId" data-quote-id="@quote.QuoteId" data-item-id="@quoteItem.QuoteItemId">Tétel mentése</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Quote Modal -->
        <div class="modal fade" id="editQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="editQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editQuoteModalLabel_@quote.QuoteId">Edit Quote: @quote.QuoteNumber</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editQuoteForm_@quote.QuoteId" method="post" asp-page-handler="EditQuote" class="needs-validation" novalidate>
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="QuoteId" value="@quote.QuoteId" autocomplete="off" />
                            <ul class="nav nav-tabs" id="editQuoteTabs_@quote.QuoteId" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="basic-tab_@quote.QuoteId" data-bs-toggle="tab" data-bs-target="#basic_@quote.QuoteId" type="button" role="tab" aria-controls="basic_@quote.QuoteId" aria-selected="true">Basic Info</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="details-tab_@quote.QuoteId" data-bs-toggle="tab" data-bs-target="#details_@quote.QuoteId" type="button" role="tab" aria-controls="details_@quote.QuoteId" aria-selected="false">Details</button>
                                </li>
                            </ul>
                            <div class="tab-content mt-3">
                                <!-- Basic Info Tab -->
                                <div class="tab-pane fade show active" id="basic_@quote.QuoteId" role="tabpanel" aria-labelledby="basic-tab_@quote.QuoteId">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label for="editQuoteNumber_@quote.QuoteId" class="form-label">Árajánlat száma</label>
                                            <input type="text" class="form-control" id="editQuoteNumber_@quote.QuoteId" name="QuoteNumber" value="@quote.QuoteNumber" maxlength="100" autocomplete="off">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="editQuoteDate_@quote.QuoteId" class="form-label">Dátum <span class="text-danger">*</span></label>
                                            <input type="date" class="form-control" id="editQuoteDate_@quote.QuoteId" name="QuoteDate" value="@quote.QuoteDate?.ToString("yyyy-MM-dd")" required autocomplete="off">
                                            <div class="invalid-feedback">Dátum megadása kötelező.</div>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="editPartnerId_@quote.QuoteId" class="form-label">Partner <span class="text-danger">*</span></label>
                                            <div class="select2-container-wrapper">
                                                <select class="form-select" id="editPartnerId_@quote.QuoteId" name="PartnerId" required autocomplete="off"
                                                        data-partner-id="@quote.PartnerId" data-partner-name="@quote.Partner.Name">
                                                    <option value="@quote.PartnerId" selected>@quote.Partner.Name</option>
                                                </select>
                                            </div>
                                            <div class="invalid-feedback">Partner kiválasztása kötelező.</div>
                                        </div>
                                            <div class="col-md-6">
                                            <label for="editSalesPerson_@quote.QuoteId" class="form-label">Értékesítő</label>
                                            <input type="text" class="form-control" id="editSalesPerson_@quote.QuoteId" name="SalesPerson" value="@quote.SalesPerson" maxlength="100" autocomplete="off">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="editValidityDate_@quote.QuoteId" class="form-label">Érvényesség dátuma</label>
                                            <input type="date" class="form-control" id="editValidityDate_@quote.QuoteId" name="ValidityDate" value="@(quote.ValidityDate?.ToString("yyyy-MM-dd"))" autocomplete="off">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="editStatus_@quote.QuoteId" class="form-label">Státusz</label>
                                            <select class="form-select" id="editStatus_@quote.QuoteId" name="Status" autocomplete="off">
                                                <option value="Draft" selected="@(quote.Status == "Draft")">Draft</option>
                                                <option value="Sent" selected="@(quote.Status == "Sent")">Sent</option>
                                                <option value="Accepted" selected="@(quote.Status == "Accepted")">Accepted</option>
                                                <option value="Rejected" selected="@(quote.Status == "Rejected")">Rejected</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <!-- Details Tab -->
                                <div class="tab-pane fade" id="details_@quote.QuoteId" role="tabpanel" aria-labelledby="details-tab_@quote.QuoteId">
                                    <div class="row g-3">
                                        <div class="col-12">
                                            <label for="editSubject_@quote.QuoteId" class="form-label">Tárgy</label>
                                            <input type="text" class="form-control" id="editSubject_@quote.QuoteId" name="Subject" value="@quote.Subject" maxlength="200" autocomplete="off">
                                        </div>
                                        <div class="col-12">
                                            <label for="editDescription_@quote.QuoteId" class="form-label">Leírás</label>
                                            <textarea class="form-control" id="editDescription_@quote.QuoteId" name="Description" maxlength="500" rows="3" autocomplete="off">@quote.Description</textarea>
                                        </div>
                                        <div class="col-12">
                                            <label for="editDetailedDescription_@quote.QuoteId" class="form-label">Részletes leírás</label>
                                            <textarea class="form-control" id="editDetailedDescription_@quote.QuoteId" name="DetailedDescription" rows="5" autocomplete="off">@quote.DetailedDescription</textarea>
                                        </div>
                                        <div class="col-md-4">
                                            <label for="editDiscountPercentage_@quote.QuoteId" class="form-label">Kedvezmény %</label>
                                            <input type="text" class="form-control" id="editDiscountPercentage_@quote.QuoteId" name="DiscountPercentage" value="@(quote.DiscountPercentage.HasValue ? quote.DiscountPercentage.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")" autocomplete="off">
                                        </div>
                                        <div class="col-md-4">
                                            <label for="editDiscountAmount_@quote.QuoteId" class="form-label">Kedvezmény összeg</label>
                                            <input type="text" class="form-control" id="editDiscountAmount_@quote.QuoteId" name="DiscountAmount" value="@(quote.DiscountAmount.HasValue ? quote.DiscountAmount.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")" autocomplete="off">
                                        </div>
                                        <div class="col-md-4">
                                            <label for="editTotalAmount_@quote.QuoteId" class="form-label">Összesen</label>
                                            <input type="text" class="form-control" id="editTotalAmount_@quote.QuoteId" name="TotalAmount" value="@(quote.TotalAmount.HasValue ? quote.TotalAmount.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")" readonly autocomplete="off">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary">Változtatások mentése</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

<!-- New Quote Item Modal -->
        <div class="modal fade" id="newQuoteItemModal_@quote.QuoteId" tabindex="-1" aria-labelledby="newQuoteItemModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="newQuoteItemModalLabel_@quote.QuoteId">Új Tétel</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                    <form id="newQuoteItemForm_@quote.QuoteId" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="QuoteId" value="@quote.QuoteId" autocomplete="off" />
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="productId_@quote.QuoteId" class="form-label">Termék <span class="text-danger">*</span></label>
                                <div class="select2-container-wrapper">
                                    <select class="form-select select2-product" id="productId_@quote.QuoteId" name="ProductId" required autocomplete="off"></select>
                                </div>
                                <div class="invalid-feedback">Termék kiválasztása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="newQuantity_@quote.QuoteId" class="form-label">Mennyiség <span class="text-danger">*</span></label>
                                <input type="text" class="form-control quantity" id="newQuantity_@quote.QuoteId" name="Quantity" value="1" required autocomplete="off">
                                <div class="invalid-feedback">Mennyiség megadása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="newUnitPrice_@quote.QuoteId" class="form-label">Egységár <span class="text-danger">*</span></label>
                                <input type="text" class="form-control unitPrice" id="newUnitPrice_@quote.QuoteId" name="UnitPrice" value="0,00" required autocomplete="off">
                                <div class="invalid-feedback">Egységár megadása kötelező.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="newItemDiscount_@quote.QuoteId" class="form-label">Kedvezmény</label>
                                <div class="input-group">
                                    <input type="text" class="form-control itemDiscount" id="newItemDiscount_@quote.QuoteId" name="Discount" value="" placeholder="0,00" autocomplete="off">
                                    <select class="form-select" id="newItemDiscountType_@quote.QuoteId" name="DiscountType" style="width: auto;">
                                        <option value="percentage" selected>Százalék (%)</option>
                                        <option value="amount">Összeg (HUF)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-12">
                                <label for="newItemDescription_@quote.QuoteId" class="form-label">Tétel leírása</label>
                                <textarea class="form-control" id="newItemDescription_@quote.QuoteId" name="ItemDescription" maxlength="200" rows="3" autocomplete="off"></textarea>
                            </div>
                            <div class="col-md-6">
                                <label for="newTotalPrice_@quote.QuoteId" class="form-label">Összeg</label>
                                <input type="text" class="form-control" id="newTotalPrice_@quote.QuoteId" value="0,00" readonly autocomplete="off">
                            </div>
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn btn-primary" id="saveQuoteItem_@quote.QuoteId" data-quote-id="@quote.QuoteId">Tétel mentése</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                        </div>
                    </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- View Quote Modal -->
        <div class="modal fade" id="viewQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="viewQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewQuoteModalLabel_@quote.QuoteId">Details for Quote: @quote.QuoteNumber</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Info Tab Content -->
                        <div id="info_@quote.QuoteId" style="min-height: 300px;">
                            <!-- Quote Details -->
                            <table class="table table-sm">
                                <tbody>
                                    <tr><th>Árajánlat száma</th><td>@quote.QuoteNumber</td></tr>
                                    <tr><th>Dátum</th><td>@quote.QuoteDate?.ToString("yyyy-MM-dd")</td></tr>
                                    <tr><th>Partner</th><td>@quote.Partner.Name</td></tr>
                                    <tr><th>Értékesítő</th><td>@quote.SalesPerson</td></tr>
                                    <tr><th>Érvényesség dátuma</th><td>@(quote.ValidityDate?.ToString("yyyy-MM-dd"))</td></tr>
                                    <tr><th>Státusz</th><td>@quote.Status</td></tr>
                                    <tr><th>Tárgy</th><td>@quote.Subject</td></tr>
                                    <tr><th>Leírás</th><td>@quote.Description</td></tr>
                                    <tr><th>Részletes leírás</th><td>@quote.DetailedDescription</td></tr>
                                    <tr><th>Kedvezmény %</th><td>@(quote.DiscountPercentage.HasValue ? quote.DiscountPercentage.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")</td></tr>
                                    <tr><th>Kedvezmény összeg</th><td>@(quote.DiscountAmount.HasValue ? quote.DiscountAmount.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")</td></tr>
                                    <tr><th>Összesen</th><td>@(quote.TotalAmount.HasValue ? quote.TotalAmount.Value.ToString("F2", CultureInfo.GetCultureInfo("hu-HU")) : "0,00")</td></tr>
                                </tbody>
                            </table>
                            <!-- Items Section -->
                            <h5 class="mt-4">Tételek</h5>
                            <table class="table table-sm" id="items-table_@quote.QuoteId">
                                <thead>
                                    <tr>
                                        <th>Termék</th>
                                        <th>Leírás</th>
                                        <th>Mennyiség</th>
                                        <th>Egységár</th>
                                        <th>Kedvezmény</th>
                                        <th>Összesen</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (quote.QuoteItems != null && quote.QuoteItems.Any())
                                    {
                                        @foreach (var quoteItem in quote.QuoteItems)
                                            {
                                                <tr data-item-id="@quoteItem.QuoteItemId">
                                                    <td>@(quoteItem.Product?.Name ?? "N/A")</td>
                                                    <td>@quoteItem.ItemDescription</td>
                                                    <td>@quoteItem.Quantity</td>
                                                    <td>@quoteItem.UnitPrice.ToString("F2", CultureInfo.GetCultureInfo("hu-HU"))</td>
                                                    <td>
                                                        @(quoteItem.DiscountPercentage.HasValue && quoteItem.DiscountPercentage.Value > 0
                                                            ? $"{quoteItem.DiscountPercentage.Value:F2}%"
                                                            : quoteItem.DiscountAmount.HasValue && quoteItem.DiscountAmount.Value > 0
                                                                ? $"{quoteItem.DiscountAmount.Value:F2}"
                                                                : "0,00")
                                                    </td>
                                                    <td>
                                                        @((quoteItem.Quantity * quoteItem.UnitPrice - (quoteItem.DiscountAmount ?? (quoteItem.DiscountPercentage.HasValue ? (quoteItem.Quantity * quoteItem.UnitPrice * quoteItem.DiscountPercentage.Value / 100) : 0))).ToString("F2", CultureInfo.GetCultureInfo("hu-HU")))
                                                    </td>
                                                    <!-- Action buttons for Edit Quote Modal -->
                                                </tr>
                                            }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6">No items available</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezárás</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Quote Modal -->
        <div class="modal fade" id="deleteQuoteModal_@quote.QuoteId" tabindex="-1" aria-labelledby="deleteQuoteModalLabel_@quote.QuoteId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteQuoteModalLabel_@quote.QuoteId">Árajánlat törlése</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="deleteQuoteForm_@quote.QuoteId" method="post" asp-page-handler="DeleteQuote">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="QuoteId" value="@quote.QuoteId" autocomplete="off" />
                            <p>Biztosan törölni szeretné a következő árajánlatot: <strong>@quote.QuoteNumber</strong>?</p>
                            <div id="deleteWarning_@quote.QuoteId" class="alert alert-warning" style="display: none;">
                                This quote cannot be deleted due to associated records.
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteBtn_@quote.QuoteId">Törlés</button>
                    </div>
                </div>
            </div>
        </div>
    }

@section Scripts {
    <script>
        $(document).ready(function () {
            // Centralized logging
            const debug = true;
            function log(message, ...args) {
                if (debug) console.log(`[DEBUG] ${message}`, ...args);
            }

            // Debug dependencies
            log('jQuery:', typeof jQuery, jQuery.fn.jquery);
            log('Select2:', typeof $.fn.select2);
            log('Bootstrap Modal:', typeof $.fn.modal);
            log('SortableJS:', typeof Sortable);

            // Add event listeners for real-time calculation
            document.getElementById('newQuantity').addEventListener('input', calculateTotalPrice);
            document.getElementById('newUnitPrice').addEventListener('input', calculateTotalPrice);
            document.getElementById('newDiscountPercentage').addEventListener('input', function() {
                calculateTotalPrice();
                updateDiscountAmount();
            });
            document.getElementById('newDiscountAmount').addEventListener('input', function() {
                calculateTotalPrice();
                updateDiscountPercentage();
            });

            function calculateTotalPrice() {
                const quantity = parseFloat(document.getElementById('newQuantity').value) || 0;
                const unitPrice = parseFloat(document.getElementById('newUnitPrice').value) || 0;
                const discountPercentage = parseFloat(document.getElementById('newDiscountPercentage').value) || 0;
                const discountAmount = parseFloat(document.getElementById('newDiscountAmount').value) || 0;
                
                const grossAmount = quantity * unitPrice;
                let totalPrice;
                
                // Calculate based on which discount field was modified last
                if (discountAmount > 0) {
                    totalPrice = grossAmount - discountAmount;
                } else {
                    totalPrice = grossAmount * (1 - discountPercentage / 100);
                }
                
                document.getElementById('newTotalPrice').value = totalPrice.toFixed(2);
            }

            function updateDiscountAmount() {
                const quantity = parseFloat(document.getElementById('newQuantity').value) || 0;
                const unitPrice = parseFloat(document.getElementById('newUnitPrice').value) || 0;
                const discountPercentage = parseFloat(document.getElementById('newDiscountPercentage').value) || 0;
                
                const grossAmount = quantity * unitPrice;
                const discountAmount = grossAmount * (discountPercentage / 100);
                
                document.getElementById('newDiscountAmount').value = discountAmount.toFixed(2);
            }

            function updateDiscountPercentage() {
                const quantity = parseFloat(document.getElementById('newQuantity').value) || 0;
                const unitPrice = parseFloat(document.getElementById('newUnitPrice').value) || 0;
                const discountAmount = parseFloat(document.getElementById('newDiscountAmount').value) || 0;
                
                const grossAmount = quantity * unitPrice;
                let discountPercentage = 0;
                
                if (grossAmount > 0) {
                    discountPercentage = (discountAmount / grossAmount) * 100;
                }
                
                document.getElementById('newDiscountPercentage').value = discountPercentage.toFixed(2);
            }

            function deleteQuoteItem(quoteId, quoteItemId) {
                if (!confirm('Biztosan törölni szeretné ezt a tételt?')) return;

                $.ajax({
                    url: '/CRM/Quotes?handler=DeleteItem',
                    method: 'POST',
                    headers: { 
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() 
                    },
                    contentType: 'application/json',
                    data: JSON.stringify({ quoteId: quoteId, quoteItemId: quoteItemId }),
                    success: function(response) {
                        if (response.success) {
                            $(`tr[data-item-id="${quoteItemId}"]`).remove();
                            updateTotalAmount(quoteId);
                            showToast('success', 'Tétel sikeresen törölve!');
                        } else {
                            showToast('error', response.message || 'Hiba történt a tétel törlése során.');
                        }
                    },
                    error: function(xhr) {
                        showToast('error', 'Szerver hiba történt a tétel törlése közben.');
                    }
                });
            }
            // Toast notification function (add this near your other utility functions)
            function showToast(type, message) {
                const toast = $(`<div class="toast align-items-center text-white bg-${type} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>`);
                
                $('#toastContainer').append(toast);
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();
                
                setTimeout(() => {
                    toast.remove();
                }, 5000);
            }



            // Initialize Select2 for Edit Quote Modal (PartnerId)
            function initializeEditSelect2(quoteId) {
                log('[Select2] Initializing editPartnerId for QuoteId:', quoteId);
                const $select = $(`#editPartnerId_${quoteId}`);
                if (!$select.length) {
                    log('[Select2] ERROR: editPartnerId select not found for QuoteId:', quoteId);
                    alert('Partner select element not found.');
                    return;
                }

                // Destroy existing Select2 instance
                if ($select.hasClass('select2-hidden-accessible')) {
                    $select.select2('destroy');
                    log(`[Select2] Destroyed existing Select2 instance for editPartnerId_${quoteId}`);
                }

                $select.select2({
                    placeholder: 'Válasszon partnert',
                    allowClear: true,
                    ajax: {
                        url: '/CRM/Quotes?handler=Partners',
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            return { search: params.term || '' };
                        },
                        processResults: function (data) {
                            log('[Select2] Partners response:', data);
                            return {
                                results: data.map(item => ({
                                    id: item.id,
                                    text: item.name
                                }))
                            };
                        },
                        cache: true
                    },
                    minimumInputLength: 0,
                    theme: 'bootstrap-5',
                    dropdownParent: $(`#editQuoteModal_${quoteId}`)
                });

                // Pre-select the current partner
                const partnerId = $select.data('partner-id');
                const partnerName = $select.data('partner-name');
                if (partnerId && partnerName) {
                    log('[Select2] Pre-selecting partner:', partnerId, partnerName);
                    const option = new Option(partnerName, partnerId, true, true);
                    $select.append(option).trigger('change');
                } else {
                    log('[Select2] WARNING: No initial partnerId or partnerName for QuoteId:', quoteId);
                    $select.val(null).trigger('change');
                }

                // Log Select2 state
                $select.on('select2:select select2:unselect', function () {
                    log('[Select2] editPartnerId_${quoteId} value changed:', $select.val());
                });
            }

            // Initialize Select2 for New Quote Item Modal (ProductId)
            function initializeNewItemSelect2(quoteId) {
                log('[Select2] Initializing productId for QuoteId:', quoteId);
                const $select = $(`#productId_${quoteId}`);
                if (!$select.length) {
                    log('[Select2] ERROR: productId select not found for QuoteId:', quoteId);
                    alert('Product select element not found.');
                    return;
                }

                // Destroy existing Select2 instance
                if ($select.hasClass('select2-hidden-accessible')) {
                    $select.select2('destroy');
                    log(`[Select2] Destroyed existing Select2 instance for productId_${quoteId}`);
                }

                $select.select2({
                    placeholder: 'Keresés termékek között...',
                    allowClear: true,
                    ajax: {
                        url: '/api/Product',
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            return { search: params.term || '' };
                        },
                        processResults: function (data) {
                            log('[Select2] Product response:', data);
                            if (!Array.isArray(data)) {
                                log('[Select2] ERROR: Expected array, got:', data);
                                return { results: [] };
                            }
                            return {
                                results: data.map(function (product) {
                                    return {
                                        id: product.id,
                                        text: product.name
                                    };
                                })
                            };
                        },
                        transport: function (params, success, failure) {
                            const $request = $.ajax(params);
                            $request.then(data => {
                                log('[Select2] Product success response:', data);
                                success(data);
                            });
                            $request.fail((xhr, status, error) => {
                                log('[Select2] Product AJAX error: Status=', xhr.status, 'Error=', error, 'Response=', xhr.responseText);
                                failure();
                            });
                            return $request;
                        }
                    },
                    minimumInputLength: 0,
                    theme: 'bootstrap-5',
                    dropdownParent: $(`#newQuoteItemModal_${quoteId}`),
                    language: {
                        noResults: function () {
                            return 'Nincs találat';
                        }
                    }
                });

                            // Update card in the grid after edit
            function updateQuoteCard(quoteId, formData) {
                log('[Quote] Updating card for QuoteId:', quoteId);
                const $card = $(`.partner-card[data-quote-id="${quoteId}"]`);
                const data = {};
                formData.forEach(item => data[item.name] = item.value);

                $card.find('.quote-number-col .fw-bold').text(data.QuoteNumber || 'N/A');
                $card.find('.quote-partner-col .quote-partner').html(`<i class="bi bi-person me-1"></i>${$(`#editPartnerId_${quoteId} option:selected`).text() || 'N/A'}`);
                $card.find('.quote-date-col .quote-date').html(`<i class="bi bi-calendar me-1"></i>${data.QuoteDate || 'N/A'}`);
                $card.find('.quote-status-col .badge').text(data.Status || 'Draft').removeClass('badge-draft badge-sent badge-accepted badge-rejected')
                    .addClass(data.Status === 'Draft' ? 'badge-draft' : data.Status === 'Sent' ? 'badge-sent' : data.Status === 'Accepted' ? 'badge-accepted' : 'badge-rejected');
                $card.find('.quote-amount-col .quote-amount').html(`<i class="bi bi-currency-dollar me-1"></i>${parseFloat(data.TotalAmount || '0').toFixed(2)}`);
                }

                    // Log Select2 state
                    $select.on('select2:select select2:unselect', function () {
                        log('[Select2] productId_${quoteId} value changed:', $select.val());
                    });
                }

                        // Get today's date in YYYY-MM-DD format
            function getTodayDate() {
                const today = new Date();
                return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            }

            // Initialize Select2 for dropdowns
            function initializeSelect2(selector, type, dropdownParent = null) {
                log(`[Select2] Initializing for ${selector}, type: ${type}`);
                const $select = $(selector);
                if (!$select.length) {
                    log(`[Select2] ERROR: Element not found: ${selector}`);
                    alert(`Select2 initialization failed: Element ${selector} not found`);
                    return;
                }

                // Destroy existing Select2 instance
                if ($select.hasClass('select2-hidden-accessible')) {
                    $select.select2('destroy');
                    log(`[Select2] Destroyed existing Select2 instance for ${selector}`);
                }

                try {
                    $select.select2({
                        ajax: {
                            url: type === 'product' ? '/api/Product' : type === 'currency' ? '/CRM/Quotes?handler=Currencies' : '/CRM/Quotes?handler=Partners', // Use /api/Product for products
                            dataType: 'json',
                            delay: 250,
                            data: params => {
                                const data = { search: params.term || '' };
                                log(`[Select2] Sending ${type} request:`, data);
                                return data;
                            },
                            processResults: (data, params) => {
                                log(`[Select2] ${type} raw response:`, data);
                                if (!Array.isArray(data)) {
                                    log(`[Select2] ERROR: Expected array, got:`, data);
                                    return { results: [] };
                                }
                                const results = data.map(item => {
                                    const id = item.id || item.Id || item.CurrencyId || item.ProductId || item.PartnerId;
                                    const text = item.name || item.Name || item.CurrencyName || item.text || 'No Name';
                                    return { id, text };
                                });
                                log(`[Select2] ${type} processed results:`, results);
                                return { results };
                            },
                            transport: (params, success, failure) => {
                                const $request = $.ajax(params);
                                $request.then(data => {
                                    log(`[Select2] ${type} success response:`, data);
                                    success(data);
                                });
                                $request.fail((xhr, status, error) => {
                                    log(`[Select2] AJAX error for ${type}: Status=${xhr.status}, Error=${error}, Response=`, xhr.responseText);
                                    failure(null);
                                });
                                return $request;
                            }
                        },
                        minimumInputLength: 0,
                        placeholder: type === 'product' ? 'Válasszon terméket...' : type === 'currency' ? 'Válasszon pénznemet...' : 'Válasszon partnert...',
                        allowClear: true,
                        theme: 'bootstrap-5',
                        width: '100%',
                        dropdownParent: dropdownParent ? $(dropdownParent) : undefined,
                        language: {
                            errorLoading: () => 'Hiba történt az adatok betöltése közben.'
                        }
                    });
                    log(`[Select2] Successfully initialized for ${selector}`);
                } catch (error) {
                    log(`[Select2] ERROR: Initialization failed for ${selector}:`, error.message);
                    alert(`Select2 initialization failed for ${selector}: ${error.message}`);
                }

                // Log Select2 state
                $select.on('select2:select select2:unselect', function () {
                    log(`[Select2] ${selector} value changed:`, $select.val());
                });
            }

                        // Initialize sortable table
            function initializeSortable() {
                log('[Sortable] Initializing quoteItemsTable with SortableJS');
                const $tbody = $('#quoteItemsTable tbody')[0];
                if (!$tbody) {
                    log('[Sortable] ERROR: Table body not found');
                    return;
                }
                if (!Sortable) {
                    log('[Sortable] ERROR: SortableJS is not available');
                    alert('Drag-and-drop functionality is not available. Please ensure SortableJS is loaded.');
                    return;
                }
                try {
                    new Sortable($tbody, {
                        handle: '.drag-handle',
                        animation: 150,
                        ghostClass: 'placeholder',
                        onStart: function (evt) {
                            log('[Sortable] Drag started', evt.item.id);
                        },
                        onSort: function (evt) {
                            log('[Sortable] Sorting', evt.item.id, evt.oldIndex, evt.newIndex);
                        },
                        onEnd: function (evt) {
                            log('[Sortable] Drag ended', evt.item.id, evt.oldIndex, evt.newIndex);
                            const newOrder = [];
                            $('#quoteItemsTable tbody tr').each(function (index) {
                                const rowId = $(this).attr('id');
                                const itemIndex = parseInt(rowId.replace('item_', ''));
                                newOrder.push(itemsData[itemIndex]);
                                $(this).attr('id', `item_${index}`);
                                $(this).find('.delete-item').attr('data-row-id', `item_${index}`);
                            });
                            itemsData = new FiguraOrder;
                            log('[Sortable] New itemsData order:', itemsData);
                            updateTotalAmount();
                        }
                    });
                    log('[Sortable] Initialization successful');
                } catch (error) {
                    log('[Sortable] ERROR: Initialization failed:', error.message);
                }
            }

                        // Update item total in new quote
            function updateItemTotal() {
                log('[Calc] Updating item total');
                const quantity = parseFloat($('#newQuantity').val()) || 0;
                const unitPrice = parseFloat($('#newUnitPrice').val()) || 0;
                const discountPercentage = parseFloat($('#newDiscountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#newDiscountAmount').val()) || 0;

                let total = quantity * unitPrice;
                if (discountPercentage > 0) {
                    total -= (total * discountPercentage / 100);
                } else if (discountAmount > 0) {
                    total -= discountAmount;
                }
                $('#newTotalPrice').val(total.toFixed(2));
                log(`[Calc] Item total: Quantity=${quantity}, UnitPrice=${unitPrice}, DiscountPercentage=${discountPercentage}, DiscountAmount=${discountAmount}, Total=${total}`);
            }

            function refreshQuoteItemsTable(quoteId) {
                log('[QuoteItem] Refreshing items table for QuoteId:', quoteId);
                
                $.ajax({
                    url: `/CRM/Quotes?handler=QuoteItems&quoteId=${quoteId}`,
                    method: 'GET',
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        try {
                            // Handle case where response might be wrapped in "value" property
                            const items = data.value || data;
                            
                            log('[QuoteItem] Success for QuoteId:', quoteId, 'Data:', items);
                            const $tbody = $(`#quoteItemsTable_${quoteId} tbody`);
                            $tbody.empty();
                            
                            if (!items || !Array.isArray(items) || items.length === 0) {
                                $tbody.append('<tr><td colspan="7">Nincsenek tételek az árajánlathoz.</td></tr>');
                                return;
                            }

                            items.forEach(item => {
                                const discount = item.discountPercentage ? 
                                    `${item.discountPercentage.toFixed(2).replace('.', ',')}%` :
                                    item.discountAmount ? 
                                    `${item.discountAmount.toFixed(2).replace('.', ',')}` : 
                                    '0,00';
                                
                                const total = (item.quantity * item.unitPrice - 
                                    (item.discountAmount || 
                                    (item.discountPercentage ? 
                                    (item.quantity * item.unitPrice * item.discountPercentage / 100) : 0)
                                    )).toFixed(2).replace('.', ',');
                                
                                $tbody.append(`
                                    <tr data-item-id="${item.quoteItemId}">
                                        <td>${item.productName || 'N/A'}</td>
                                        <td>${item.itemDescription || ''}</td>
                                        <td>${item.quantity}</td>
                                        <td>${item.unitPrice.toFixed(2).replace('.', ',')}</td>
                                        <td>${discount}</td>
                                        <td>${total}</td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-primary btn-sm edit-item"
                                                        data-quote-id="${quoteId}"
                                                        data-item-id="${item.quoteItemId}">
                                                    <i class="bi bi-pencil-square me-1"></i>Szerkesztés
                                                </button>
                                                <button class="btn btn-danger btn-sm delete-item"
                                                        data-quote-id="${quoteId}"
                                                        data-item-id="${item.quoteItemId}">
                                                    <i class="bi bi-trash me-2"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `);
                            });
                        } catch (e) {
                            log('[QuoteItem] Error processing response:', e);
                            alert('Hiba történt az adatok feldolgozása közben');
                        }
                    },
                    error: function (xhr, status, error) {
                        let errorMsg = 'Ismeretlen hiba';
                        try {
                            const response = JSON.parse(xhr.responseText);
                            errorMsg = response.message || errorMsg;
                        } catch (e) {
                            errorMsg = xhr.responseText || errorMsg;
                        }
                        
                        log('[QuoteItem] Error:', status, error, 'Response:', xhr.responseText);
                        alert(`Hiba történt: ${errorMsg}`);
                    }
                });
            }

            function updateTotalAmount() {
                // Calculate subtotal from all items
                const subtotal = itemsData.reduce((sum, item) => sum + (item.totalPrice || 0), 0);
                
                // Get global discounts
                const discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#discountAmount').val()) || 0;
                
                // Validate only one discount is applied
                if (discountPercentage > 0 && discountAmount > 0) {
                    alert('Csak kedvezmény százaléka vagy összege adható meg, nem mindkettő!');
                    return;
                }
                
                // Calculate final total
                let total = subtotal;
                if (discountPercentage > 0) {
                    total = subtotal * (1 - discountPercentage / 100);
                } else if (discountAmount > 0) {
                    total = subtotal - discountAmount;
                }
                
                // Update the UI
                $('#totalAmount').val(total.toFixed(2));
            }


            // Update total for existing quotes
            function updateTotalAmount(quoteId) {
                log('[Total] Updating total for quote:', quoteId);
                
                let subtotal = 0;
                $(`#quoteItemsTable_${quoteId} tbody tr`).each(function() {
                    const quantity = parseFloat($(this).find('td:nth-child(3)').text());
                    const unitPrice = parseFloat($(this).find('td:nth-child(4)').text().replace(',', '.'));
                    const discountText = $(this).find('td:nth-child(5)').text();
                    
                    let discount = 0;
                    if (discountText.includes('%')) {
                        discount = quantity * unitPrice * parseFloat(discountText.replace('%', '').replace(',', '.')) / 100;
                    } else {
                        discount = parseFloat(discountText.replace(',', '.'));
                    }
                    
                    subtotal += (quantity * unitPrice) - discount;
                });
                
                const discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#discountAmount').val()) || 0;
                let total = subtotal;
                
                if (discountPercentage > 0) {
                    total = subtotal * (1 - discountPercentage / 100);
                } else if (discountAmount > 0) {
                    total = subtotal - discountAmount;
                }
                
                $('#totalAmount').val(total.toFixed(2).replace('.', ','));
                log('[Total] Updated total:', total);
                return total;
            }


            // Update total for new quotes
            function updateNewQuoteTotal() {
                log('[Total] Updating new quote total');
                
                let subtotal = itemsData.reduce((sum, item) => sum + item.totalPrice, 0);
                const discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#discountAmount').val()) || 0;
                let total = subtotal;
                
                if (discountPercentage > 0) {
                    total = subtotal * (1 - discountPercentage / 100);
                } else if (discountAmount > 0) {
                    total = subtotal - discountAmount;
                }
                
                $('#totalAmount').val(total.toFixed(2));
                log('[Total] New quote total:', total);
                return total;
            }

            // Calculate total price for a quote item in real-time
            function updateItemTotal(quoteId) {
                log('[Calc] Updating item total for QuoteId:', quoteId);
                const quantity = parseFloat($(`#newQuantity_${quoteId}`).val()) || 0;
                const unitPrice = parseFloat($(`#newUnitPrice_${quoteId}`).val().replace(',', '.')) || 0;
                const discount = parseFloat($(`#newItemDiscount_${quoteId}`).val().replace(',', '.')) || 0;
                const discountType = $(`#newItemDiscountType_${quoteId}`).val();

                let total = quantity * unitPrice;
                if (discount > 0) {
                    if (discountType === 'percentage') {
                        total -= (total * discount / 100);
                    } else if (discountType === 'amount') {
                        total -= discount;
                    }
                }

                $(`#newTotalPrice_${quoteId}`).val(total.toFixed(2).replace('.', ','));
                log(`[Calc] Item total: Quantity=${quantity}, UnitPrice=${unitPrice}, Discount=${discount}, DiscountType=${discountType}, Total=${total}`);
            }
            


            // Initialize when modal opens
            $('#newQuoteModal').on('show.bs.modal', function() {
                // Initialize items array
                itemsData = [];
                
                // Initialize total amount
                $('#totalAmount').val('0.00');
                $('#discountPercentage').val('0.00');
                $('#discountAmount').val('0.00');
                
                // Clear items table
                $('#quoteItemsTable tbody').empty();
            });

            // Handle discount changes
            $(document).on('input', '#discountPercentage, #discountAmount', function() {
                // Ensure only one discount is applied
                if ($(this).attr('id') === 'discountPercentage' && $(this).val() > 0) {
                    $('#discountAmount').val('0');
                } else if ($(this).attr('id') === 'discountAmount' && $(this).val() > 0) {
                    $('#discountPercentage').val('0');
                }
                updateTotalAmount();
            });

            // Delete Quote Handler
            $(document).on('click', '.confirm-delete-quote', function () {
                const $button = $(this);
                $button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Törlés...');
                const quoteId = $(this).data('quote-id');
                log('[Quote] Confirm delete quote clicked: QuoteId=', quoteId);

                if (!quoteId || quoteId <= 0) {
                    log('[Quote] ERROR: Invalid QuoteId', quoteId);
                    alert('Érvénytelen árajánlat azonosító.');
                    $button.prop('disabled', false).html('Törlés');
                    return;
                }

                const $modal = $(`#deleteQuoteModal_${quoteId}`);
                $modal.modal('hide');

                $.ajax({
                    url: '/CRM/Quotes?handler=DeleteQuote',
                    method: 'POST',
                    data: { quoteId: quoteId },
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        log('[Quote] Delete response:', response);
                        if (response.success) {
                            $(`.partner-card[data-quote-id="${quoteId}"]`).remove();
                            alert('Árajánlat sikeresen törölve!');
                        } else {
                            alert('Hiba: ' + (response.message || 'Árajánlat törlése sikertelen.'));
                        }
                    },
                    error: function (xhr, status, error) {
                        log('[Quote] Delete error:', xhr.responseJSON, status, error);
                        alert('Hiba történt az árajánlat törlése közben: ' + (xhr.responseJSON?.message || 'Szerver hiba.'));
                    },
                    complete: function () {
                        $button.prop('disabled', false).html('Törlés');
                    }
                });
            });



            // Open Edit Quote Modal
            $(document).on('click', '[data-bs-target^="#editQuoteModal_"]', function () {
                const quoteId = $(this).data('bs-target').replace('#editQuoteModal_', '');
                log('[Quote] Opening edit modal for QuoteId:', quoteId);
                const $modal = $(`#editQuoteModal_${quoteId}`);
                $modal.on('shown.bs.modal', function () {
                    initializeEditSelect2(quoteId);
                    $(`#basic-tab_${quoteId}`).tab('show');
                });
            });

            // Handle Edit Quote Form Submission
            $(document).on('submit', '[id^="editQuoteForm_"]', function (e) {
                e.preventDefault();
                const $form = $(this);
                const quoteId = $form.find('input[name="QuoteId"]').val();
                log('[Quote] Submitting edit form for QuoteId:', quoteId);

                if (!$form[0].checkValidity()) {
                    $form.addClass('was-validated');
                    alert('Kérjük, töltse ki az összes kötelező mezőt.');
                    return;
                }

                // Get PartnerId from Select2
                const partnerId = $(`#editPartnerId_${quoteId}`).val();
                if (!partnerId || isNaN(parseInt(partnerId))) {
                    log('[Quote] ERROR: Invalid PartnerId for QuoteId:', quoteId, 'Value:', partnerId);
                    alert('Kérjük, válasszon egy érvényes partnert.');
                    return;
                }

                // Serialize form data and append PartnerId
                const formData = $form.serializeArray();
                formData.push({ name: 'PartnerId', value: partnerId });
                log('[Quote] Form data:', formData);

                $.ajax({
                    url: '/CRM/Quotes?handler=EditQuote',
                    method: 'POST',
                    data: formData,
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    beforeSend: function () {
                        log('[Quote] Sending AJAX request for QuoteId:', quoteId);
                        $form.find('button[type="submit"]').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status"></span> Mentés...');
                    },
                    success: function (response) {
                        log('[Quote] Edit response for QuoteId:', quoteId, response);
                        if (response.success) {
                            alert('Árajánlat sikeresen frissítve!');
                            updateQuoteCard(quoteId, formData);
                            $(`#editQuoteModal_${quoteId}`).modal('hide');
                        } else {
                            alert('Hiba: ' + (response.message || 'Árajánlat frissítése sikertelen.'));
                        }
                    },
                    error: function (xhr, status, error) {
                        log('[Quote] Edit error for QuoteId:', quoteId, xhr.responseJSON, status, error);
                        alert('Hiba történt az árajánlat frissítése közben: ' + (xhr.responseJSON?.message || 'Szerver hiba.'));
                    },
                    complete: function () {
                        log('[Quote] AJAX complete for QuoteId:', quoteId);
                        $form.find('button[type="submit"]').prop('disabled', false).html('Változtatások mentése');
                        $(`#editQuoteModal_${quoteId}`).modal('hide');
                        $('body').removeClass('modal-open').css('padding-right', '');
                        $('.modal-backdrop').remove();
                        $('.modal:visible').each(function () {
                            $(this).modal('hide');
                        });
                        log('[Quote] Modal state reset for QuoteId:', quoteId);
                    }
                });
            });



            // Open New Quote Item Modal
            $(document).on('click', '[data-bs-target^="#newQuoteItemModal_"]', function () {
                const quoteId = $(this).data('bs-target').replace('#newQuoteItemModal_', '');
                log('[QuoteItem] Opening new item modal for QuoteId:', quoteId);
                const $modal = $(`#newQuoteItemModal_${quoteId}`);
                $modal.on('shown.bs.modal', function () {
                    initializeNewItemSelect2(quoteId);
                });
            });

            // Handle New Quote Item Form Submission
            $(document).on('submit', '[id^="newQuoteItemForm_"]', function (e) {
                e.preventDefault();
                const $form = $(this);
                const quoteId = $form.find('input[name="QuoteId"]').val();
                log('[QuoteItem] Submitting new item form for QuoteId:', quoteId);

                if (!$form[0].checkValidity()) {
                    $form.addClass('was-validated');
                    alert('Kérjük, töltse ki az összes kötelező mezőt.');
                    return;
                }

                const productId = $(`#productId_${quoteId}`).val(); // Fix ID
                if (!productId) {
                    log('[QuoteItem] ERROR: ProductId is missing for QuoteId:', quoteId);
                    alert('Kérjük, válasszon egy érvényes terméket.');
                    return;
                }
                const formData = $form.serializeArray();
                formData.push({ name: 'ProductId', value: productId });
                log('[QuoteItem] Form data:', formData);

                $.ajax({
                    url: '/CRM/Quotes?handler=AddItem',
                    method: 'POST',
                    data: formData,
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    beforeSend: function () {
                        log('[QuoteItem] Sending AJAX request for QuoteId:', quoteId);
                        $form.find('button[type="submit"]').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status"></span> Hozzáadás...');
                    },
                    success: function (response) {
                        log('[QuoteItem] Add item response for QuoteId:', quoteId, response);
                        if (response.success) {
                            alert('Tétel sikeresen hozzáadva!');
                            refreshQuoteItemsTable(quoteId);
                            $form[0].reset();
                            $(`#productId_${quoteId}`).val(null).trigger('change');
                            $(`#newQuoteItemModal_${quoteId}`).modal('hide');
                        } else {
                            alert('Hiba: ' + (response.message || 'Tétel hozzáadása sikertelen.'));
                        }
                    },
                    error: function (xhr, status, error) {
                        log('[QuoteItem] Add item error for QuoteId:', quoteId, xhr.responseJSON, status, error);
                        alert('Hiba történt a tétel hozzáadása közben: ' + (xhr.responseJSON?.message || 'Szerver hiba.'));
                    },
                    complete: function () {
                        log('[QuoteItem] AJAX complete for QuoteId:', quoteId);
                        $form.find('button[type="submit"]').prop('disabled', false).html('Tétel hozzáadása');
                        $(`#newQuoteItemModal_${quoteId}`).modal('hide');
                        $('body').removeClass('modal-open').css('padding-right', '');
                        $('.modal-backdrop').remove();
                        $('.modal:visible').each(function () {
                            $(this).modal('hide');
                        });
                        log('[QuoteItem] Modal state reset for QuoteId:', quoteId);
                    }
                });
            });


            // Store items for new quote
            let itemsData = [];



            // New Quote button handler
            $('#newQuoteButton').on('click', function () {
                log('[Quote] New Quote button clicked');
                const $modal = $('#newQuoteModal');
                $modal.modal('show');
                $modal.off('shown.bs.modal').on('shown.bs.modal', function () {
                    log('[Modal] New Quote Modal shown');
                    log('[Modal] Select elements:', $modal.find('select').map((i, el) => ({ id: el.id, html: el.outerHTML })).get());
                    const $quoteNumber = $modal.find('#quoteNumber');
                    $quoteNumber.siblings('.spinner').show();
                    $.ajax({
                        url: '/api/Quotes/nextQuoteNumber',
                        method: 'GET',
                        success: function (quoteNumber) {
                            log(`[Quote] Fetched quote number: ${quoteNumber}`);
                            $quoteNumber.val(quoteNumber);
                            $quoteNumber.siblings('.spinner').hide();
                        },
                        error: function (xhr, status, error) {
                            log(`[Quote] Failed to fetch quote number: ${xhr.status} ${error}`);
                            $quoteNumber.val('QUOTE-0001');
                            $quoteNumber.siblings('.spinner').hide();
                        }
                    });
                    $modal.find('#quoteDate').val(getTodayDate());
                    $modal.find('#validityDate').val('');
                    $modal.find('#subject').val('');
                    $modal.find('#description').val('');
                    $modal.find('#detailedDescription').val('');
                    $modal.find('#salesPerson').val('');
                    $modal.find('#status').val('Draft');
                    $modal.find('#discountPercentage').val('0.00');
                    $modal.find('#discountAmount').val('0.00');
                    $modal.find('#totalAmount').val('0.00');
                    $modal.find('#quoteItemsTable tbody').empty();
                    $modal.find('.item-form').hide();
                    itemsData = [];
                    initializeSelect2('#partnerId', 'partner', '#newQuoteModal');
                    initializeSelect2('#currencyId', 'currency', '#newQuoteModal');
                    initializeSelect2('#newProductId', 'product', '#newQuoteModal');
                    initializeSortable();
                    $('#details-tab').tab('show');
                });
            });

            // New Quote Modal cleanup
            $('#newQuoteModal').on('hidden.bs.modal', function () {
                log('[Modal] New Quote Modal hidden');
                const $modal = $(this);
                log(`[Modal] Select elements before reset:`, $modal.find('select').map((i, el) => ({ id: el.id, html: el.outerHTML })).get());
                $modal.find('#partnerId, #currencyId, #newProductId').val(null).trigger('change');
                $modal.find('#quoteForm')[0].reset();
                $modal.find('#quoteItemsTable tbody').empty();
                $modal.find('.item-form').hide();
                itemsData = [];
                $('#quoteItemsTable tbody').sortable('destroy');
                log(`[Modal] Select elements after reset:`, $modal.find('select').map((i, el) => ({ id: el.id, html: el.outerHTML })).get());
            });

            // Toggle item form in new quote
            $(document).on('click', '.toggle-item-form', function () {
                log('[Item] Toggle item form');
                const $itemForm = $('.item-form');
                $itemForm.toggleClass('active').slideToggle();
                if ($itemForm.hasClass('active')) {
                    initializeSelect2('#newProductId', 'product', '#newQuoteModal');
                    $itemForm.find('#newQuantity').val(1);
                    $itemForm.find('#newUnitPrice').val('');
                    $itemForm.find('#newDiscountPercentage').val('0');
                    $itemForm.find('#newDiscountAmount').val('0');
                    $itemForm.find('#newTotalPrice').val('');
                    $itemForm.find('#newItemDescription').val('');
                    $itemForm.find('#newProductId').val(null).trigger('change');
                }
            });

            // Handle discount changes
            $(document).on('input', '#discountPercentage, #discountAmount', function() {
                // Ensure only one discount field is used
                if ($(this).is('#discountPercentage') && $(this).val() > 0) {
                    $('#discountAmount').val('0');
                } 
                else if ($(this).is('#discountAmount') && $(this).val() > 0) {
                    $('#discountPercentage').val('0');
                }
                updateTotalAmount();
            });

            // Cancel item form
            $(document).on('click', '.cancel-item', function () {
                log('[Item] Cancel item form');
                $('.item-form').removeClass('active').slideUp();
                $('.item-form').find('input, select').val('');
                $('.item-form').find('#newQuantity').val(1);
                $('.item-form').find('#newDiscountPercentage').val('0');
                $('.item-form').find('#newDiscountAmount').val('0');
            });

            // Mutual exclusivity for item discounts
            $(document).on('input', '#newDiscountPercentage', function () {
                const value = parseFloat($(this).val()) || 0;
                if (value > 0) {
                    $('#newDiscountAmount').val('0').prop('disabled', true);
                } else {
                    $('#newDiscountAmount').prop('disabled', false);
                }
                updateItemTotal();
            });

            $(document).on('input', '#newDiscountAmount', function () {
                const value = parseFloat($(this).val()) || 0;
                if (value > 0) {
                    $('#newDiscountPercentage').val('0').prop('disabled', true);
                } else {
                    $('#newDiscountPercentage').prop('disabled', false);
                }
                updateItemTotal();
            });

            // Mutual exclusivity for quote discounts
            $(document).on('input', '#discountPercentage', function () {
                const value = parseFloat($(this).val()) || 0;
                if (value > 0) {
                    $('#discountAmount').val('0').prop('disabled', true);
                } else {
                    $('#discountAmount').prop('disabled', false);
                }
                updateTotalAmount();
            });

            $(document).on('input', '#discountAmount', function () {
                const value = parseFloat($(this).val()) || 0;
                if (value > 0) {
                    $('#discountPercentage').val('0').prop('disabled', true);
                } else {
                    $('#discountPercentage').prop('disabled', false);
                }
                updateTotalAmount();
            });

            $(document).on('input', '#newQuantity, #newUnitPrice, #newDiscountPercentage, #newDiscountAmount', updateItemTotal);

            // Add item to new quote
            $(document).on('click', '.add-item', function() {
                log('[Item] Add item clicked');
                const $itemForm = $('.item-form');
                
                // Get form values
                const productData = $itemForm.find('#newProductId').select2('data')[0];
                const productId = productData ? parseInt(productData.id) : 0;
                const productText = productData ? productData.text : 'Ismeretlen termék';
                const description = $itemForm.find('#newItemDescription').val().trim();
                const quantity = parseFloat($itemForm.find('#newQuantity').val()) || 0;
                const unitPrice = parseFloat($itemForm.find('#newUnitPrice').val()) || 0;
                const discountPercentage = parseFloat($itemForm.find('#newDiscountPercentage').val()) || 0;
                const discountAmount = parseFloat($itemForm.find('#newDiscountAmount').val()) || 0;

                // Validation checks
                if (!productId || productId <= 0) {
                    alert('Kérem, válasszon egy érvényes terméket!');
                    return;
                }
                if (quantity < 1) {
                    alert('Kérem, adja meg az érvényes mennyiséget (1 vagy több)!');
                    return;
                }
                if (unitPrice <= 0) {
                    alert('Kérem, adja meg az érvényes egységárat (nagyobb, mint 0)!');
                    return;
                }
                if (discountPercentage > 0 && discountAmount > 0) {
                    alert('Csak kedvezmény százaléka vagy összege adható meg, nem mindkettő!');
                    return;
                }
                if (discountPercentage < 0 || discountPercentage > 100) {
                    alert('Kedvezmény százaléka 0 és 100 között kell legyen!');
                    return;
                }
                if (discountAmount < 0) {
                    alert('Kedvezmény összege nem lehet negatív!');
                    return;
                }

                // Calculate item total
                let itemTotal = quantity * unitPrice;
                let discountText = '0,00';
                
                if (discountPercentage > 0) {
                    itemTotal = itemTotal * (1 - discountPercentage / 100);
                    discountText = `${discountPercentage.toFixed(2)}%`;
                } else if (discountAmount > 0) {
                    itemTotal = itemTotal - discountAmount;
                    discountText = `${discountAmount.toFixed(2)}`;
                }

                // Create item object
                const item = {
                    productId: productId,
                    productText: productText,
                    itemDescription: description,
                    quantity: quantity,
                    unitPrice: unitPrice,
                    discountPercentage: discountPercentage > 0 ? discountPercentage : null,
                    discountAmount: discountAmount > 0 ? discountAmount : null,
                    totalPrice: itemTotal
                };

                // Add to items array
                itemsData.push(item);
                
                // Add to table
                const $tbody = $('#quoteItemsTable tbody');
                const rowId = `item_${itemsData.length - 1}`;
                $tbody.append(`
                    <tr id="${rowId}">
                        <td class="drag-handle"><i class="bi bi-grip-vertical"></i></td>
                        <td>${productText}</td>
                        <td>${description || ''}</td>
                        <td>${quantity}</td>
                        <td>${unitPrice.toFixed(2)}</td>
                        <td>${discountText}</td>
                        <td>${itemTotal.toFixed(2)}</td>
                        <td><button class="btn btn-sm btn-danger delete-item" data-row-id="${rowId}"><i class="bi bi-trash me-2"></i></button></td>
                    </tr>
                `);

                // Update the total amount
                updateTotalAmount();
                
                // Reset form
                $itemForm.removeClass('active').slideUp();
                $itemForm.find('input, select').val('');
                $itemForm.find('#newQuantity').val(1);
                $itemForm.find('#newDiscountPercentage').val('0');
                $itemForm.find('#newDiscountAmount').val('0');
                
                log('[Item] Item added:', item);
            });

            // Delete item handler
            $(document).on('click', '.delete-item', function() {
                const rowId = $(this).data('row-id');
                const index = parseInt(rowId.split('_')[1]);
                
                // Remove from array
                if (index >= 0 && index < itemsData.length) {
                    itemsData.splice(index, 1);
                }
                
                // Remove from table
                $(`#${rowId}`).remove();
                
                // Update totals
                updateTotalAmount();
            });

            // Update total amount function
            function updateTotalAmount() {
                // Calculate subtotal from all items
                const subtotal = itemsData.reduce((sum, item) => sum + (item.totalPrice || 0), 0);
                
                // Get global discounts
                const discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#discountAmount').val()) || 0;
                
                // Calculate final total
                let total = subtotal;
                if (discountPercentage > 0) {
                    total = subtotal * (1 - discountPercentage / 100);
                } else if (discountAmount > 0) {
                    total = subtotal - discountAmount;
                }
                
                // Update the UI
                $('#totalAmount').val(total.toFixed(2));
            }


            // Delete item from quote
            $(document).on('click', '.delete-newitem', function() {
                const rowId = $(this).data('row-id');
                const $row = $(`#${rowId}`);
                const index = parseInt(rowId.split('_')[1]);
                
                log('[Item] Delete item clicked', { rowId, index });
                
                // Remove from itemsData array
                if (index >= 0 && index < itemsData.length) {
                    itemsData.splice(index, 1);
                }
                
                // Remove the row from table
                $row.remove();
                
                // Update the row IDs for remaining items
                $('#quoteItemsTable tbody tr').each(function(newIndex) {
                    const newRowId = `item_${newIndex}`;
                    $(this).attr('id', newRowId);
                    $(this).find('.delete-item').data('row-id', newRowId);
                });
                
                updateTotalAmount();
                log('[Item] Item deleted', { rowId, index });
            });


            // Delete quote item
            $(document).on('click', '.delete-item', function() {
                const quoteId = $(this).data('quote-id');
                const itemId = $(this).data('item-id');
                
                if (!confirm('Biztosan törölni szeretné ezt a tételt?')) return;

                $.ajax({
                    url: '/CRM/Quotes?handler=DeleteItem',
                    method: 'POST',
                    headers: { 
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() 
                    },
                    contentType: 'application/json',
                    data: JSON.stringify({ 
                        quoteId: quoteId, 
                        quoteItemId: itemId 
                    }),
                    success: function(response) {
                        if (response.success) {
                            $(`tr[data-item-id="${itemId}"]`).remove();
                            updateTotalAmount(quoteId);
                            showToast('success', 'Tétel sikeresen törölve!');
                        } else {
                            showToast('error', response.message || 'Hiba történt a tétel törlése során.');
                        }
                    },
                    error: function(xhr) {
                        showToast('error', 'Szerver hiba történt a tétel törlése közben.');
                    }
                });
            });

            // Remove item from new quote
            $(document).on('click', '.remove-item', function() {
                const $row = $(this).closest('tr');
                const index = $row.index();
                
                itemsData.splice(index, 1);
                $row.remove();
                updateNewQuoteTotal();
                showToast('success', 'Tétel eltávolítva!');
            });




            // Save quote
            $('#saveQuoteButton').click(function () {
                log('[Quote] Save quote clicked');
                if (!itemsData.length) {
                    alert('Legalább egy tétel hozzáadása kötelező!');
                    return;
                }

                const discountPercentage = parseFloat($('#discountPercentage').val()) || 0;
                const discountAmount = parseFloat($('#discountAmount').val()) || 0;
                if (discountPercentage > 0 && discountAmount > 0) {
                    alert('Csak kedvezmény százaléka vagy összege adható meg az árajánlat szintjén, nem mindkettő!');
                    return;
                }

                const payload = {
                    quoteId: parseInt($('#quoteId').val()) || 0,
                    partnerId: parseInt($('#partnerId').select2('data')[0]?.id) || 0,
                    currencyId: parseInt($('#currencyId').select2('data')[0]?.id) || 0,
                    quoteDate: $('#quoteDate').val() || getTodayDate(),
                    salesPerson: $('#salesPerson').val() || '',
                    validityDate: $('#validityDate').val() || null,
                    subject: $('#subject').val() || '',
                    description: $('#description').val() || '',
                    detailedDescription: $('#detailedDescription').val() || '',
                    status: $('#status').val() || 'Draft',
                    discountPercentage: discountPercentage > 0 ? discountPercentage : null,
                    discountAmount: discountAmount > 0 ? discountAmount : null,
                    quoteItems: itemsData.map(item => ({
                        productId: item.productId,
                        itemDescription: item.itemDescription || '',
                        quantity: item.quantity,
                        unitPrice: item.unitPrice,
                        discountPercentage: item.discountPercentage,
                        discountAmount: item.discountAmount
                    }))
                };

                log('[Quote] Payload:', payload);

                // Validate required fields
                let missingFields = [];
                if (!payload.partnerId) missingFields.push('partnerId');
                if (!payload.currencyId) missingFields.push('currencyId');
                if (!payload.quoteDate) missingFields.push('quoteDate');
                if (!payload.subject) missingFields.push('subject');
                if (payload.quoteItems.some(item => !item.productId)) missingFields.push('productId');
                if (payload.quoteItems.some(item => item.quantity < 1)) missingFields.push('quantity');
                if (payload.quoteItems.some(item => item.unitPrice <= 0)) missingFields.push('unitPrice');

                if (missingFields.length > 0) {
                    log('[Quote] Missing required fields:', missingFields);
                    alert('Kérem, töltse ki az összes kötelező mezőt! Hiányzó mezők: ' + missingFields.join(', '));
                    return;
                }

                $.ajax({
                    url: '/CRM/Quotes?handler=CreateQuote',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        log('[Quote] Quote saved:', response);
                        if (response.quoteId) {
                            alert('Árajánlat sikeresen mentve!');
                            $('#newQuoteModal').modal('hide');
                            location.reload();
                        } else {
                            alert('Hiba: ' + (response.error || 'Árajánlat mentése sikertelen.'));
                        }
                    },
                    error: function (xhr) {
                        log('[Quote] Error saving quote:', xhr.responseJSON);
                        var errors = xhr.responseJSON?.errors || [xhr.responseJSON?.error || 'Árajánlat mentése sikertelen.'];
                        alert('Hiba: ' + errors.join(', '));
                    }
                });
            });

            // Add/Edit Quote Item Modal
            $(document).on('click', '.add-quote-item', function () {
                log('[Item] Add/Edit quote item clicked');
                const quoteId = $(this).data('quote-id');
                const itemId = $(this).data('item-id') || 0; // 0 for new item
                const $modal = $('#editQuoteItemModal');
                const $form = $modal.find('.edit-quote-item-form');
                $modal.find('.modal-title').text(itemId ? 'Tétel szerkesztése' : 'Új tétel hozzáadása');
                $form.find('.quote-id').val(quoteId);
                $form.find('.item-id').val(itemId);
                $form.find('#editProductId').val(null).trigger('change');
                $form.find('#editItemDescription').val('');
                $form.find('#editQuantity').val(1);
                $form.find('#editUnitPrice').val('');
                $form.find('#editTotalPrice').val('');

                // If editing, populate form with item data
                if (itemId) {
                    const $row = $(`#editQuoteItemsTable_${quoteId} tbody tr[data-item-id="${itemId}"]`);
                    if ($row.length) {
                        $form.find('#editItemDescription').val($row.find('td:eq(1)').text());
                        $form.find('#editQuantity').val($row.find('td:eq(2)').text());
                        $form.find('#editUnitPrice').val($row.find('td:eq(3)').text());
                        $form.find('#editTotalPrice').val($row.find('td:eq(5)').text());
                        // Pre-select product
                        const productName = $row.find('td:eq(0)').text();
                        const productId = $row.data('product-id') || itemId; // Assuming productId is stored
                        if (productId && productName) {
                            const $select = $form.find('#editProductId');
                            $select.append(new Option(productName, productId, true, true)).trigger('change');
                        }
                    }
                }

                $modal.modal('show');
                $modal.off('shown.bs.modal').on('shown.bs.modal', function () {
                    log('[Modal] Edit Quote Item Modal shown');
                    initializeSelect2('#editProductId', 'product', '#editQuoteItemModal');
                });
            });

            // Update item total in edit modal
            $(document).on('input', '#editQuantity, #editUnitPrice', function () {
                log('[Calc] Updating edit item total');
                const quantity = parseFloat($('#editQuantity').val()) || 0;
                const unitPrice = parseFloat($('#editUnitPrice').val()) || 0;
                const total = (quantity * unitPrice).toFixed(2);
                $('#editTotalPrice').val(total);
            });

            function deleteQuoteItem(quoteId, quoteItemId) {
                log('[Item] Delete quote item clicked: QuoteId=' + quoteId + ', QuoteItemId=' + quoteItemId);
                if (!confirm('Biztosan törölni szeretné ezt a tételt?')) {
                    return;
                }

                $.ajax({
                    url: '/CRM/Quotes?handler=DeleteItem',
                    method: 'POST',
                    headers: { 
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() 
                    },
                    contentType: 'application/json',
                    data: JSON.stringify({ 
                        quoteId: quoteId, 
                        quoteItemId: quoteItemId 
                    }),
                    success: function (response) {
                        if (response && response.success) {
                            refreshQuoteItemsTable(quoteId);
                            showToast('success', 'Tétel sikeresen törölve!');
                        } else {
                            const msg = response?.message || 'Hiba történt a tétel törlése során.';
                            showToast('error', msg);
                        }
                    },
                    error: function (xhr) {
                        let errorMsg = 'Hiba történt a tétel törlése során.';
                        try {
                            const response = JSON.parse(xhr.responseText);
                            errorMsg = response.message || errorMsg;
                        } catch (e) {
                            errorMsg = xhr.statusText || errorMsg;
                        }
                        showToast('error', errorMsg);
                        log('[Item] Delete error:', xhr.status, errorMsg);
                    }
                });
            }

            // Save Quote Item
            $(document).on('click', '.save-quote-item', function () {
                log('[Item] Save quote item clicked');
                const $form = $(this).closest('.modal-content').find('.edit-quote-item-form');
                const quoteId = parseInt($form.find('.quote-id').val());
                const itemId = parseInt($form.find('.item-id').val()) || 0;
                const productId = $form.find('#editProductId').val();
                const itemDescription = $form.find('#editItemDescription').val();
                const quantity = parseFloat($form.find('#editQuantity').val()) || 0;
                const unitPrice = parseFloat($form.find('#editUnitPrice').val()) || 0;

                if (!productId || quantity < 1 || unitPrice <= 0) {
                    alert('Kérjük, töltse ki az összes kötelező mezőt (termék, mennyiség, egységár).');
                    return;
                }

                const itemData = {
                    quoteId: quoteId,
                    quoteItemId: itemId,
                    productId: parseInt(productId),
                    quantity: quantity,
                    unitPrice: unitPrice,
                    itemDescription: itemDescription,
                    discountPercentage: null,
                    discountAmount: null
                };

                const url = itemId ? '/CRM/Quotes?handler=UpdateItem' : '/CRM/Quotes?handler=AddItem';
                log(`[Item] Submitting item: QuoteId=${quoteId}, ItemId=${itemId}`, itemData);

                $.ajax({
                    url: url,
                    method: 'POST',
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    contentType: 'application/json',
                    data: JSON.stringify(itemData),
                    success: function (response) {
                        log('[Item] Item saved:', response);
                        $('#editQuoteItemModal').modal('hide');
                        refreshQuoteItemsTable(quoteId);
                        alert('Tétel sikeresen mentve!');
                    },
                    error: function (xhr, status, error) {
                        log(`[Item] Failed to save item: ${xhr.status} ${error}`, xhr.responseText);
                        alert('Hiba történt a tétel mentése során.');
                    },
                    complete: function () {
                        $('body').removeClass('modal-open').css('padding-right', '');
                        $('.modal-backdrop').remove();
                        $('.modal:visible').each(function () {
                            $(this).modal('hide');
                        });
                    }
                });
            });



            // Attach real-time calculation to input fields
            $(document).on('input change', '[id^="newQuantity_"], [id^="newUnitPrice_"], [id^="newItemDiscount_"], [id^="newItemDiscountType_"]', function () {
                const quoteId = $(this).attr('id').split('_')[1];
                updateItemTotal(quoteId);
            });

            // Handle Save Quote Item Button
            $(document).on('click', '[id^="saveQuoteItem_"]', function () {
                const quoteId = $(this).data('quote-id');
                const $form = $(`#newQuoteItemForm_${quoteId}`);
                const $button = $(this);
                log('[QuoteItem] Save button clicked for QuoteId:', quoteId);

                if (!$form[0].checkValidity()) {
                    $form.addClass('was-validated');
                    alert('Kérjük, töltse ki az összes kötelező mezőt.');
                    return;
                }

                const productId = $(`#productId_${quoteId}`).val();
                if (!productId) {
                    log('[QuoteItem] ERROR: ProductId is missing for QuoteId:', quoteId);
                    alert('Kérjük, válasszon egy érvényes terméket.');
                    return;
                }

                const discount = parseFloat($(`#newItemDiscount_${quoteId}`).val().replace(',', '.')) || 0;
                const discountType = $(`#newItemDiscountType_${quoteId}`).val();
                const payload = {
                    QuoteId: parseInt($form.find('input[name="QuoteId"]').val()),
                    ProductId: parseInt(productId),
                    Quantity: parseInt($(`#newQuantity_${quoteId}`).val()) || 0,
                    UnitPrice: parseFloat($(`#newUnitPrice_${quoteId}`).val().replace(',', '.')) || 0,
                    ItemDescription: $(`#newItemDescription_${quoteId}`).val() || '',
                    DiscountPercentage: discountType === 'percentage' && discount > 0 ? discount : null,
                    DiscountAmount: discountType === 'amount' && discount > 0 ? discount : null
                };

                log('[QuoteItem] Payload:', payload);

                $.ajax({
                    url: '/CRM/Quotes?handler=AddItem',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    beforeSend: function () {
                        log('[QuoteItem] Sending AJAX request for QuoteId:', quoteId);
                        $button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status"></span> Hozzáadás...');
                    },
                    success: function (response) {
                        log('[QuoteItem] Add item response for QuoteId:', quoteId, response);
                        if (response.success) {
                            alert('Tétel sikeresen hozzáadva!');
                            refreshQuoteItemsTable(quoteId); // Refresh the table
                            $form[0].reset();
                            $(`#productId_${quoteId}`).val(null).trigger('change'); // Clear Select2
                            $(`#newQuoteItemModal_${quoteId}`).modal('hide'); // Close new item modal
                            $(`#quoteItemsModal_${quoteId}`).modal('show'); // Ensure base modal is open
                        } else {
                            alert('Hiba: ' + (response.message || 'Tétel hozzáadása sikertelen.'));
                        }
                    },
                    error: function (xhr, status, error) {
                        log('[QuoteItem] Add item error for QuoteId:', quoteId, xhr.responseJSON, status, error);
                        alert('Hiba történt a tétel hozzáadása közben: ' + (xhr.responseJSON?.message || 'Szerver hiba.'));
                    },
                    complete: function () {
                        log('[QuoteItem] AJAX complete for QuoteId:', quoteId);
                        $button.prop('disabled', false).html('Tétel mentése');
                        $(`#newQuoteItemModal_${quoteId}`).modal('hide');
                        $('body').removeClass('modal-open').css('padding-right', '');
                        $('.modal-backdrop').remove();
                        $(`#quoteItemsModal_${quoteId}`).modal('show');
                        log('[QuoteItem] Modal state: newQuoteItemModal closed, quoteItemsModal open for QuoteId:', quoteId);
                    }
                });
            });


        });
    </script>
}
    <style>

        .drag-handle {
    cursor: move;
    width: 30px;
    text-align: center;
    vertical-align: middle;
}

.drag-handle .bi-grip-vertical {
    font-size: 1.2rem;
    color: #6c757d;
}

#quoteItemsTable tbody tr:hover .drag-handle .bi-grip-vertical {
    color: #007bff;
}

#quoteItemsTable .placeholder {
    background-color: #f8f9fa;
    border: 2px dashed #007bff;
    height: 50px;
}



[data-theme="dark"] .partner-card {
        background-color: #2a2a2a;
        border: 1px solid #444;
    }


/* Badge styling */
.badge-draft { background-color: #6c757d; }
.badge-sent { background-color: #007bff; }
.badge-accepted { background-color: #28a745; }
.badge-rejected { background-color: #dc3545; }

    /* Ensure textarea in Leírás column is wider and readable */
    #quoteItemsTable .itemDescription {
        width: 100%;
        min-width: 200px;
        height: 60px;
        resize: vertical;
    }
    /* Adjust table column widths */
    #quoteItemsTable th:nth-child(2), #quoteItemsTable td:nth-child(2) {
        width: 30%;
    }

        /* Card-based layout matching Leads page */
        .card-grid-header {
            padding: 0 15px 2px 15px;
            margin-top: 0px;
            background-color: #F1EFEC;
            border-bottom: 1px solid #dee2e6;
        }

        .card-grid-row {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr 1fr 1fr auto;
            gap: 10px;
            align-items: center;
        }

        .card-grid-column {
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .card-grid-cell {
            padding: 0 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Column widths */
        .quote-number-col { flex: 1 1 15%; min-width: 120px; }
        .quote-partner-col { flex: 1 1 25%; min-width: 150px; }
        .quote-date-col { flex: 1 1 15%; min-width: 100px; }
        .quote-status-col { flex: 1 1 15%; min-width: 100px; }
        .quote-amount-col { flex: 1 1 15%; min-width: 120px; }
        .actions-column, .actions-cell { flex: 0 0 auto; width: auto; text-align: right; padding-right: 10px; }

        /* Button group styling */
        .btn-group-sm .btn {
            padding: 0.2rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Badge styling */
        .badge-draft { background-color: #6c757d; }
        .badge-sent { background-color: #007bff; }
        .badge-accepted { background-color: #28a745; }
        .badge-rejected { background-color: #dc3545; }

        /* Ensure pagination is centered */
        .fixed-footer .pagination {
            display: flex;
            justify-content: center;
            width: 100%;
            margin-bottom: 0;
        }

        .fixed-footer nav {
            flex-grow: 1;
            text-align: center;
        }

        /* Modal Sizing */
        .modal-lg { max-width: 1000px !important; }

        /* Consistent Tab Content Styling */
        #newQuoteModal .tab-content,
        #newQuoteItemModal .tab-content,
        [id^="editQuoteModal_"] .tab-content,
        [id^="newQuoteItemModal_"] .tab-content,
        [id^="viewQuoteModal_"] .tab-content {
            min-width: 0;
            width: 100%;
            min-height: 450px;
            max-height: 65vh;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 1rem;
            background-color: #fff;
        }

        /* Consistent Tab Pane Styling */
        #newQuoteModal .tab-pane,
        #newQuoteItemModal .tab-pane,
        [id^="editQuoteModal_"] .tab-pane,
        [id^="newQuoteItemModal_"] .tab-pane,
        [id^="viewQuoteModal_"] .tab-pane {
            width: 100%;
        }

        /* Adjust Modal Body Padding */
        #newQuoteModal .modal-body,
        #newQuoteItemModal .modal-body,
        [id^="editQuoteModal_"] .modal-body,
        [id^="newQuoteItemModal_"] .modal-body,
        [id^="viewQuoteModal_"] .modal-body {
            padding: 1rem 1rem 0 1rem;
        }

        /* Remove margin below tabs */
        #newQuoteModal .nav-tabs,
        [id^="editQuoteModal_"] .nav-tabs,
        [id^="viewQuoteModal_"] .nav-tabs {
            margin-bottom: 0 !important;
        }

        /* General Table Cell Styling */
        .table tbody tr td {
            vertical-align: middle;
        }

        /* View Modal Specific Content Styling */
        [id^="viewQuoteModal_"] .table {
            margin-bottom: 0;
        }

        [id^="viewQuoteModal_"] .tab-pane > p {
            padding: 1.5rem;
            text-align: center;
            color: #6c757d;
        }

        /* Select2 styling */
.select2-container {
            width: 100% !important;
        }

        .select2-container--bootstrap-5 .select2-selection--single {
            height: 38px;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            background-color: #fff;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
            padding-top: 0;
            padding-bottom: 0;
            color: #495057;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: 38px;
            right: 0.75rem;
        }

        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        .select2-container-wrapper {
            position: relative;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single {
            background-color: #3a3a3a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-dropdown {
            background-color: #2a2a2a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option--highlighted {
            background-color: #357abd;
            color: #ffffff;
        }

        /* Dark mode overrides */
        [data-theme="dark"] .card-grid-header {
            background-color: #2a2a2a;
            border-bottom: 1px solid #444;
        }

        [data-theme="dark"] .card-grid-column {
            color: #b0b0b0;
        }

        [data-theme="dark"] .quote-card {
            background-color: #2a2a2a;
            border: 1px solid #444;
        }

        [data-theme="dark"] .fixed-footer {
            background-color: #2a2a2a;
            border-top: 1px solid #444;
        }

        [data-theme="dark"] .alert-success {
            background-color: #2e7d32;
            border-color: #1b5e20;
            color: #e0e0e0;
        }

        [data-theme="dark"] .alert-danger {
            background-color: #d32f2f;
            border-color: #b71c1c;
            color: #e0e0e0;
        }

        [data-theme="dark"] #newQuoteModal .tab-content,
        [data-theme="dark"] #newQuoteItemModal .tab-content,
        [data-theme="dark"] [id^="editQuoteModal_"] .tab-content,
        [data-theme="dark"] [id^="newQuoteItemModal_"] .tab-content,
        [data-theme="dark"] [id^="viewQuoteModal_"] .tab-content,
        [data-theme="dark"] [id^="deleteQuoteModal_"] .tab-content {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newQuoteModal .tab-pane,
        [data-theme="dark"] #newQuoteItemModal .tab-pane,
        [data-theme="dark"] [id^="editQuoteModal_"] .tab-pane,
        [data-theme="dark"] [id^="newQuoteItemModal_"] .tab-pane,
        [data-theme="dark"] [id^="viewQuoteModal_"] .tab-pane,
        [data-theme="dark"] [id^="deleteQuoteModal_"] .tab-pane {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newQuoteModal .modal-body,
        [data-theme="dark"] #newQuoteItemModal .modal-body,
        [data-theme="dark"] [id^="editQuoteModal_"] .modal-body,
        [data-theme="dark"] [id^="newQuoteItemModal_"] .modal-body,
        [data-theme="dark"] [id^="viewQuoteModal_"] .modal-body,
        [data-theme="dark"] [id^="deleteQuoteModal_"] .modal-body {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control {
            background-color: #333333 !important;
            border-color: #666 !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control:focus {
            background-color: #333333 !important;
            border-color: #888 !important;
            color: #e0e0e0 !important;
            box-shadow: 0 0 0 0.2rem rgba(100, 100, 100, 0.25) !important;
        }

        [data-theme="dark"] .form-control::placeholder {
            color: #aaaaaa !important;
        }

        [data-theme="dark"] .form-label {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .modal-title {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newQuoteModal .nav-tabs,
        [data-theme="dark"] [id^="editQuoteModal_"] .nav-tabs,
        [data-theme="dark"] [id^="viewQuoteModal_"] .nav-tabs {
            background-color: #2a2a2a !important;
            border-bottom: 1px solid #444 !important;
        }

        [data-theme="dark"] #newQuoteModal .nav-tabs .nav-link,
        [data-theme="dark"] [id^="editQuoteModal_"] .nav-tabs .nav-link,
        [data-theme="dark"] [id^="viewQuoteModal_"] .nav-tabs .nav-link {
            color: #b0b0b0 !important;
        }

        [data-theme="dark"] #newQuoteModal .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="editQuoteModal_"] .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="viewQuoteModal_"] .nav-tabs .nav-link:hover {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
        }

        [data-theme="dark"] #newQuoteModal .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="editQuoteModal_"] .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="viewQuoteModal_"] .nav-tabs .nav-link.active {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
            border-color: #444 #444 #2a2a2a !important;
        }

        [data-theme="dark"] [id^="viewQuoteModal_"] .tab-pane > p {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewQuoteModal_"] .table {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewQuoteModal_"] .table th,
        [data-theme="dark"] [id^="viewQuoteModal_"] .table td {
            border-color: #444 !important;
            color: #e0e0e0 !important;
        }
    </style>
