



Postgra Migráciü

Current Status

MSSQL: The Cloud9.2 database is active in the cloud92-sqlserver-1 container, accessible at 127.0.0.1:1433 with user SA and password HUmmer512!!!. You’ve also created a backup (Cloud92PG.bak), but we’ll migrate directly from the live database.
PostgreSQL: The cloud92postgre database is ready in the postgres container, accessible at 127.0.0.1:5432 with user postgres and password HUmmer512docker.

-----------


mssql docker db elérés: 

tp@T-MacBook-Air Cloud9.2 % docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P HUmmer512\!\!\! -Q "SELECT name FROM sys.databases" -C
name                                                                                                                            
--------------------------------------------------------------------------------------------------------------------------------
master                                                                                                                          
tempdb                                                                                                                          
model                                                                                                                           
msdb                                                                                                                            

(4 rows affected)
tp@T-MacBook-Air Cloud9.2 % 



A full text kereséshez: 

docker pull opensearchproject/opensearch:2.5.0

nuget packege opensearch packagek kellenek:
dotnet add package OpenSearch.Client
dotnet add package OpenSearch.Net
http://localhost:9200/


docker run -d \
  --name opensearch \
  -p 9200:9200 \
  -p 9600:9600 \
  -e "discovery.type=single-node" \
  -e "OPENSEARCH_INITIAL_ADMIN_PASSWORD=admin" \
  opensearchproject/opensearch:2.5.0

appsetting.json:
,
  "OpenSearch": {
    "Url": "http://localhost:9200",
    "Username": "admin",
    "Password": "admin"
  }

dotnet add /Users/tp/cloud9.2/Cloud9_2.csproj package NEST --version 7.17.5 (lehet, hogy nem kell az útvonal)

builder.Services.AddScoped<ElasticSearchService>(); (program.cs)

using Nest;
using Microsoft.EntityFrameworkCore;
using Cloud9_2.Data;
using Cloud9_2.Models;

public class ElasticSearchService
{
    private readonly ElasticClient _client;
    private readonly ApplicationDbContext _context;

    public ElasticSearchService(ApplicationDbContext context, IConfiguration configuration)
    {
        var url = configuration["OpenSearch:Url"];
        var settings = new ConnectionSettings(new Uri(url))
            .BasicAuthentication(configuration["OpenSearch:Username"], configuration["OpenSearch:Password"])
            .DefaultIndex("documentmetadata");
        _client = new ElasticClient(settings);
        _context = context;
    }

    public async Task IndexMetadata()
    {
        var metadata = await _context.DocumentMetadata
            .Include(dm => dm.Document)
            .ToListAsync();
        foreach (var item in metadata)
        {
            var document = new
            {
                Id = item.ID,
                DocumentId = item.DocumentId,
                Key = item.Key,
                Value = item.Value,
                FileName = item.Document?.FileName
            };
            await _client.IndexDocumentAsync(document);
        }
    }

    public async Task<List<dynamic>> Search(string query)
    {
        var response = await _client.SearchAsync<dynamic>(s => s
            .Query(q => q
                .QueryString(qs => qs
                    .Query($"*{query}*")
                )
            )
        );
        return response.Documents.ToList();
    }
}

using Microsoft.AspNetCore.Mvc;
using Cloud9_2.Services;

[Route("api/[controller]")]
[ApiController]
public class SearchController : ControllerBase
{
    private readonly ElasticSearchService _searchService;

    public SearchController(ElasticSearchService searchService)
    {
        _searchService = searchService;
    }

    [HttpGet]
    public async Task<IActionResult> Search(string query)
    {
        if (string.IsNullOrEmpty(query))
            return BadRequest("Query is required");

        var results = await _searchService.Search(query);
        return Ok(results);
    }
}

