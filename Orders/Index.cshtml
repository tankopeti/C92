
@page
@model Cloud9_2.Pages.CRM.Orders.IndexModel
@using System.Globalization
@{
    ViewData["Title"] = "Rendelések";
    Layout = "_Layout";
}
@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Rendelések</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Orders.Count of @Model.DistinctOrderIdCount rendelés@(Model.DistinctOrderIdCount != 1 ? "ek" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newOrderButton" class="btn-new" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Új rendelés létrehozása">
                    <i class="bi bi-plus-circle me-1"></i>Új rendelés
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés rendelések között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
                <!-- Filter/Sort Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderDate">Összes rendelés (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderId">Rendezés: Rendelés ID (Csökkenő)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderNumber">Rendelésszám</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=PartnerName">Partner neve</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=TotalAmount">Összesen</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Card Grid Header -->
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column order-number-col">Rendelésszám</div>
                <div class="card-grid-column order-partner-col">Partner</div>
                <div class="card-grid-column order-date-col">Dátum</div>
                <div class="card-grid-column order-status-col">Státusz</div>
                <div class="card-grid-column order-amount-col">Rendelés összege</div>
                <div class="card-grid-column actions-column">Műveletek</div>
            </div>
        </div>
    </div>

    <!-- Card Grid Body -->
    <div class="scrollable-card-container">
        <div class="card-grid-body">
            @if (Model.Orders.Any())
            {
                @foreach (var order in Model.Orders)
{
                    <div class="card partner-card mb-3" data-order-id="@order.OrderId">
                        <div class="card-body p-2">
                            <div class="card-grid-row align-items-center">
                                <div class="card-grid-cell order-number-col">
                                    <div class="order-info">
                                        <div class="fw-bold">@order.OrderNumber</div>
                                    </div>
                                </div>
                                <div class="card-grid-cell order-partner-col">
                                    <div class="order-partner text-muted small">
                                        <i class="bi bi-person me-1"></i>@order.Partner?.Name
                                    </div>
                                </div>
                                <div class="card-grid-cell order-date-col">
                                    <div class="order-date text-muted small">
                                        <i class="bi bi-calendar me-1"></i>@(order.OrderDate?.ToString("yyyy-MM-dd"))
                                    </div>
                                </div>
                                <div class="card-grid-cell order-status-col">
                                    @{
                                        var badgeClass = "badge bg-secondary";
                                        if (order.Status == "Pending") badgeClass = "badge badge-pending";
                                        else if (order.Status == "Confirmed") badgeClass = "badge badge-confirmed";
                                        else if (order.Status == "Shipped") badgeClass = "badge badge-shipped";
                                        else if (order.Status == "Cancelled") badgeClass = "badge badge-cancelled";
                                    }
                                    <span class="@badgeClass">@Model.StatusDisplayNames[order.Status]</span>
                                </div>
                                <div class="card-grid-cell order-amount-col">
                                    <div class="order-amount text-muted small">
                                        <i class="bi bi-currency-dollar me-1"></i>@(order.TotalAmount?.ToString("C", CultureInfo.GetCultureInfo("hu-HU")))
                                    </div>
                                </div>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-info btn-sm view-order-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewOrderModal_@order.OrderId"
                                            aria-label="Rendelés részleteinek megtekintése">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                id="actionsDropdown_@order.OrderId"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false"
                                                aria-label="További műveletek">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@order.OrderId">
                                            <li>
                                                <a class="dropdown-item" href="#"
                                                   data-bs-toggle="modal"
                                                   data-bs-target="#editOrderModal_@order.OrderId">
                                                    <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                                </a>
                                            </li>
                                            <li><a class="dropdown-item" href="#" onclick="copyOrder(@order.OrderId)"><i class="bi bi-copy me-2"></i>Másolás</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteOrderModal_@order.OrderId"><i class="bi bi-trash me-2"></i>Törlés</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Order Modal -->
                    <div class="modal fade" id="editOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="editOrderModalLabel_@order.OrderId" aria-hidden="true">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editOrderModalLabel_@order.OrderId">Rendelés szerkesztése: @order.OrderNumber</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- Tabs -->
                                    <ul class="nav nav-tabs" id="orderTabs_@order.OrderId" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="base-info-tab_@order.OrderId" data-bs-toggle="tab" data-bs-target="#base-info_@order.OrderId" type="button" role="tab" aria-controls="base-info_@order.OrderId" aria-selected="true">Alapadatok</button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="items-tab_@order.OrderId" data-bs-toggle="tab" data-bs-target="#items_@order.OrderId" type="button" role="tab" aria-controls="items_@order.OrderId" aria-selected="false">Tételek</button>
                                        </li>
                                    </ul>

                                    <!-- Tab Content -->
                                    <div class="tab-content" id="orderTabContent_@order.OrderId">
                                        <!-- Base Info Tab -->
                                        <div class="tab-pane fade show active" id="base-info_@order.OrderId" role="tabpanel" aria-labelledby="base-info-tab_@order.OrderId">
                                            <form id="orderBaseInfoForm_@order.OrderId">
                                                <table class="table table-sm mt-3">
                                                    <tbody>
                                                        <tr>
                                                            <th>Rendelésszám</th>
                                                            <td><input type="text" class="form-control" name="orderNumber" value="@order.OrderNumber" readonly></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Rendelés dátuma</th>
                                                            <td><input type="date" class="form-control" name="orderDate" value="@(order.OrderDate?.ToString("yyyy-MM-dd"))" required></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Partner</th>
                                                            <td>
                                                                <select name="partnerId" class="form-select tom-select" data-selected-id="@order.PartnerId" data-selected-text="@(order.Partner?.Name ?? "Unknown")" autocomplete="off" required>
                                                                    <option value=""></option>
                                                                </select>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Pénznem</th>
                                                            <td>
                                                                <select name="currencyId" class="form-select tom-select" data-selected-id="@order.CurrencyId" data-selected-text="@(order.Currency?.CurrencyName ?? "Unknown")" autocomplete="off" required>
                                                                    <option value=""></option>
                                                                </select>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Státusz</th>
                                                            <td>
                                                                <select class="form-select" name="status" required>
                                                                    @foreach (var status in Model.StatusDisplayNames)
                                                                    {
                                                                        <option value="@status.Key" selected="@(order.Status == status.Key)">@status.Value</option>
                                                                    }
                                                                </select>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Összesen</th>
                                                            <td><input type="number" step="0.01" class="form-control" name="totalAmount" value="@(order.TotalAmount?.ToString("F2", CultureInfo.InvariantCulture))" required></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </form>
                                        </div>

                                        <!-- Items Tab -->
                                        <div class="tab-pane fade" id="items_@order.OrderId" role="tabpanel" aria-labelledby="items-tab_@order.OrderId">
                                            <button type="button" class="btn btn-primary mb-3 add-item-row" data-order-id="@order.OrderId">Tétel hozzáadása</button>
                                            <form id="orderItemsForm_@order.OrderId" data-order-id="@order.OrderId">
                                                <table class="table table-sm table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 30%;">Termék</th>
                                                            <th style="width: 15%;">Mennyiség</th>
                                                            <th style="width: 15%;">Egységár</th>
                                                            <th style="width: 20%;">Kedvezmény</th>
                                                            <th style="width: 15%;">Összesen</th>
                                                            <th style="width: 5%;"></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="items-tbody_@order.OrderId">
                                                        @foreach (var item in order.OrderItems)
                                                        {
                                                            <script>console.log('Server-side item ID:', '@item.OrderItemId', 'ProductId:', '@item.ProductId');</script>
                                                            <tr class="order-item-row" data-item-id="@item.OrderItemId">
                                                                <td>
                                                                    <select name="orderItems[@item.OrderItemId].ProductId" class="form-select tom-select-product" data-selected-id="@item.ProductId" data-selected-text="@(item.Product?.Name ?? "Unknown")" autocomplete="off" required>
                                                                        <option value="" disabled selected>-- Válasszon terméket --</option>
                                                                    </select>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="orderItems[@item.OrderItemId].Quantity" class="form-control form-control-sm quantity" value="@item.Quantity.ToString(CultureInfo.InvariantCulture)" min="0" step="1" required>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="orderItems[@item.OrderItemId].UnitPrice" class="form-control form-control-sm unit-price" value="@item.UnitPrice.ToString(CultureInfo.InvariantCulture)" min="0" step="0.01" required>
                                                                </td>
                                                                <td>
                                                                    <div class="input-group input-group-sm">
                                                                        <input type="text" name="@(item.DiscountPercentage != null ? "orderItems[" + item.OrderItemId + "].DiscountPercentage" : "orderItems[" + item.OrderItemId + "].DiscountAmount")" class="form-control discount-value" value="@(item.DiscountPercentage != null ? item.DiscountPercentage : item.DiscountAmount)" placeholder="pl. 10">
                                                                        <select class="form-select discount-type" data-discount-name-prefix="orderItems[@item.OrderItemId]">
                                                                            @if (item.DiscountPercentage != null)
                                                                            {
                                                                                <option value="Percentage" selected>%</option>
                                                                                <option value="Amount">Összeg</option>
                                                                            }
                                                                            else
                                                                            {
                                                                                <option value="Percentage">%</option>
                                                                                <option value="Amount" selected>Összeg</option>
                                                                            }
                                                                        </select>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <span class="total-price">@item.TotalPrice.ToString("F2")</span>
                                                                    <input type="hidden" name="orderItems[@item.OrderItemId].Description" class="item-description" value="@(item.Description ?? "")">
                                                                </td>
                                                                <td>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="@item.OrderItemId"><i class="bi bi-pencil"></i></button>
                                                                    <button type="button" class="btn btn-danger btn-sm remove-item-row"><i class="bi bi-trash"></i></button>
                                                                </td>
                                                            </tr>
                                                            <tr class="description-row" data-item-id="@item.OrderItemId" style="display: none;">
                                                                <td colspan="6">
                                                                    <div class="mb-2">
                                                                        <label class="form-label">Leírás (max 200 karakter)</label>
                                                                        <textarea name="orderItems[@item.OrderItemId].DescriptionInput" class="form-control form-control-sm item-description" maxlength="200" rows="2">@(item.Description ?? "")</textarea>
                                                                        <div class="form-text">Karakterek: <span class="char-count">@((item.Description?.Length ?? 0))</span>/200</div>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                        <!-- Order Total Row -->
                                                        <tr class="order-total-row">
                                                            <td colspan="3"></td>
                                                            <td><strong>Összesen:</strong></td>
                                                            <td><span class="order-total-amount">0.00</span></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="order-discount-row">
                                                            <td colspan="3"></td>
                                                            <td><strong>Kedvezményes ár:</strong></td>
                                                            <td><span class="order-final-total">0.00</span></td>
                                                            <td></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                                    <button type="button" class="btn btn-primary save-order" data-order-id="@order.OrderId">Mentés</button>
                                </div>
                            </div>
                        </div>
                    </div>


<!-- View Order Modal -->
<div class="modal fade" id="viewOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="viewOrderModalLabel_@order.OrderId" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewOrderModalLabel_@order.OrderId">Részletek: @order.OrderNumber</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
            </div>
            <div class="modal-body">
                <table class="table table-sm">
                    <tbody>
                        <tr><th>Rendelésszám</th><td>@order.OrderNumber</td></tr>
                        <tr><th>Rendelés dátuma</th><td>@(order.OrderDate?.ToString("yyyy-MM-dd"))</td></tr>
                        <tr><th>Partner</th><td>@order.Partner?.Name</td></tr>
                        <tr><th>Pénznem</th><td>@order.Currency?.CurrencyName</td></tr>
                        <tr><th>Státusz</th><td>@Model.StatusDisplayNames[order.Status]</td></tr>
                        <tr><th>Összesen</th><td>@(order.TotalAmount?.ToString("F2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00")</td></tr>
                    </tbody>
                </table>
                <div class="alert alert-info">
                    Debug: OrderItems Count = @(order.OrderItems?.Count() ?? 0)
                </div>
                <h5 class="mt-4">Tételek</h5>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Termék ID</th>
                            <th>Termék</th>
                            <th>Leírás</th>
                            <th>Mennyiség</th>
                            <th>Egységár</th>
                            <th>Kedvezmény</th>
                            <th>Összesen</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (order.OrderItems != null && order.OrderItems.Any())
                        {
                            @foreach (var orderItem in order.OrderItems)
                            {
                                <tr data-item-id="@orderItem.OrderItemId">
                                    <td>@(orderItem.ProductId.ToString() ?? "N/A")</td>
                                    <td>@(orderItem.Product?.Name ?? "N/A")</td>
                                    <td>@orderItem.Description</td>
                                    <td>@orderItem.Quantity</td>
                                    <td>@orderItem.UnitPrice.ToString("F2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU"))</td>
                                    <td>
                                        @(orderItem.DiscountPercentage.HasValue && orderItem.DiscountPercentage.Value > 0
                                            ? $"{orderItem.DiscountPercentage.Value:F2}%"
                                            : orderItem.DiscountAmount.HasValue && orderItem.DiscountAmount.Value > 0
                                                ? $"{orderItem.DiscountAmount.Value:F2}"
                                                : "0,00")
                                    </td>
                                    <td>
                                        @((orderItem.Quantity * orderItem.UnitPrice - (orderItem.DiscountAmount ?? (orderItem.DiscountPercentage.HasValue ? (orderItem.Quantity * orderItem.UnitPrice * orderItem.DiscountPercentage.Value / 100) : 0))).ToString("F2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")))
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7">Nincsenek tételek.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Bezárás">Bezárás</button>
            </div>
        </div>
    </div>
</div>
                    <!-- Delete Order Modal -->
                    <div class="modal fade" id="deleteOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="deleteOrderModalLabel_@order.OrderId" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deleteOrderModalLabel_@order.OrderId">Rendelés törlése</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="deleteOrderForm_@order.OrderId" method="post">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="orderId" value="@order.OrderId" autocomplete="off" />
                                        <p>Biztosan törölni szeretné a következő rendelést: <strong>@order.OrderNumber</strong>?</p>
                                        <div id="deleteWarning_@order.OrderId" class="alert alert-warning" style="display: none;">
                                            Ez a rendelés nem törölhető, mert kapcsolódó rekordok léteznek.
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Mégse">Mégse</button>
                                    <button type="button" class="btn btn-danger confirm-delete-order" data-order-id="@order.OrderId" aria-label="Rendelés törlése">Törlés</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning text-center mt-3" role="alert">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        @:No orders found matching "@Model.SearchTerm" on page @Model.CurrentPage.
                    }
                    else if (Model.TotalRecords > 0)
                    {
                        @:No orders found on page @Model.CurrentPage, but @Model.TotalRecords orders exist. Try changing the page or adjusting filters.
                    }
                    else
                    {
                        @:No orders found. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Első rendelés létrehozása">Create the first one?</button>
                    }
                    <!-- Debug Info -->
                    <div class="mt-2 small text-muted">
                        Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, DistinctOrderIdCount=@Model.DistinctOrderIdCount, SearchTerm="@Model.SearchTerm"
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Pagination Footer -->
    @await Html.PartialAsync("_PaginationFooter", new Cloud9_2.Models.PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Orders"
    })

    <!-- New Order Modal -->
    <div class="modal fade" id="newOrderModal" tabindex="-1" aria-labelledby="newOrderModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newOrderModalLabel">Új rendelés létrehozása</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Tabs -->
                    <ul class="nav nav-tabs" id="orderTabs_new" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="base-info-tab_new" data-bs-toggle="tab" data-bs-target="#base-info_new" type="button" role="tab" aria-controls="base-info_new" aria-selected="true">Alapadatok</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="items-tab_new" data-bs-toggle="tab" data-bs-target="#items_new" type="button" role="tab" aria-controls="items_new" aria-selected="false">Tételek</button>
                        </li>
                    </ul>
                    <!-- Tab Content -->
                    <div class="tab-content" id="orderTabContent_new">
                        <!-- Base Info Tab -->
                        <div class="tab-pane fade show active" id="base-info_new" role="tabpanel" aria-labelledby="base-info-tab_new">
                            <form id="orderBaseInfoForm_new">
                                <table class="table table-sm mt-3">
                                    <tbody>
                                        <tr>
                                            <th>Rendelésszám</th>
                                            <td><input type="text" class="form-control" name="orderNumber" value="@Model.NextOrderNumber" placeholder="Automatikusan generálódik" readonly></td>
                                        </tr>
                                        <tr>
                                            <th>Rendelés dátuma</th>
                                            <td><input type="date" class="form-control" name="orderDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" required></td>
                                        </tr>
                                        <tr>
                                            <th>Partner</th>
                                            <td>
                                                <select name="partnerId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                    <option value="" disabled selected>-- Válasszon partnert --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Pénznem</th>
                                            <td>
                                                <select name="currencyId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                    <option value="" disabled selected>-- Válasszon pénznemet --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Státusz</th>
                                            <td>
                                                <select class="form-select" name="status" required>
                                                    @foreach (var status in Model.StatusDisplayNames)
                                                    {
                                                        <option value="@status.Key" selected="@(status.Key == "Pending" ? "selected" : "")">@status.Value</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Összesen</th>
                                            <td><input type="number" step="0.01" class="form-control" name="totalAmount" value="" required></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </form>
                        </div>
                        <!-- Items Tab -->
                        <div class="tab-pane fade" id="items_new" role="tabpanel" aria-labelledby="items-tab_new">
                            <button type="button" class="btn btn-primary mb-3 add-item-row" data-order-id="new">Tétel hozzáadása</button>
                            <form id="orderItemsForm_new" data-order-id="new">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr>
                                            <th style="width: 30%;">Termék</th>
                                            <th style="width: 15%;">Mennyiség</th>
                                            <th style="width: 15%;">Egységár</th>
                                            <th style="width: 20%;">Kedvezmény</th>
                                            <th style="width: 15%;">Összesen</th>
                                            <th style="width: 5%;"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="items-tbody_new">
                                        <!-- Order Total Row -->
                                        <tr class="order-total-row">
                                            <td colspan="3"></td>
                                            <td><strong>Összesen:</strong></td>
                                            <td><span class="order-total-amount">0.00</span></td>
                                            <td></td>
                                        </tr>
                                        <tr class="order-discount-row">
                                            <td colspan="3"></td>
                                            <td><strong>Kedvezményes ár:</strong></td>
                                            <td><span class="order-final-total">0.00</span></td>
                                            <td></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                    <button type="button" class="btn btn-primary save-order" data-order-id="new">Mentés</button>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<!-- Tom Select Dependencies -->
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

   <script>
    // Ensure jQuery is loaded
        if (typeof jQuery === 'undefined') {
            console.error('jQuery is not loaded!');
        } else {
            console.log('jQuery loaded successfully');
        }

            $(document).ready(function () {
                const debug = true;

            // Use event delegation for dynamic buttons
            $(document).on('click', '.confirm-delete-Order', function (e) {
                e.preventDefault();
                const $button = $(this);
                const orderId = $button.data('Order-id');
                console.log('Delete button clicked for orderId:', orderId); // Debug

                if (!orderId) {
                    console.error('orderId is missing from button data-Order-id');
                    return;
                }

                const $form = $(`#deleteOrderForm_${orderId}`);
                const $warningDiv = $(`#deleteWarning_${orderId}`);

                if ($form.length) {
                    console.log('Form found for orderId:', orderId); // Debug
                    const token = $form.find('input[name="__RequestVerificationToken"]').val();
                    if (!token) {
                        console.error('Anti-forgery token not found in form');
                        $warningDiv.text('Hiba: Biztonsági token hiányzik.');
                        $warningDiv.show();
                        return;
                    }

                    $.ajax({
                        url: `/api/Orders/${orderId}`, // Adjust if endpoint differs
                        type: 'DELETE',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        beforeSend: function () {
                            console.log('Sending DELETE request for orderId:', orderId); // Debug
                        },
                        success: function (data, status, xhr) {
                            console.log('Delete response:', { status: xhr.status, data }); // Debug
                            if (xhr.status === 204) {
                                console.log('Order deleted successfully, reloading page');
                                $(`#deleteOrderModal_${orderId}`).modal('hide');
                                window.location.reload();
                            } else {
                                console.warn('Unexpected status code:', xhr.status);
                                $warningDiv.text('Sikeres törlés, de váratlan válasz: ' + xhr.status);
                                $warningDiv.show();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete error:', { status: xhr.status, response: xhr.responseText }); // Debug
                            let message = 'Hiba történt a törlés során.';
                            if (xhr.status === 404) {
                                message = xhr.responseJSON?.error || 'Az árajánlat nem található.';
                            } else if (xhr.status === 500) {
                                message = xhr.responseJSON?.error || 'Szerver hiba történt a törlés során.';
                            } else if (xhr.status === 403) {
                                message = 'Hozzáférés megtagadva: bejelentkezés szükséges.';
                            }
                            $warningDiv.text(message);
                            $warningDiv.show();
                        }
                    });
                } else {
                    console.error('Form not found for orderId:', orderId);
                    $warningDiv.text('Hiba: Törlési űrlap nem található.');
                    $warningDiv.show();
                }
            });

        function showToast(type, message) {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);
            $('#toastContainer').append(toast);
            const bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();
            setTimeout(() => toast.remove(), 5500);
        }

        function getTodayDate() {
            const today = new Date();
            return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        }


        $(document).on('click', '.confirm-delete-Order', function () {
            const orderId = $(this).data('Order-id');
            $.ajax({
                url: `/api/Orders/${orderId}`,
                method: 'DELETE',
                success: function (response) {
                    showToast('success', 'Árajánlat sikeresen törölve!');
                    $(`#deleteOrderModal_${orderId}`).modal('hide');
                    $(`.partner-card[data-Order-id="${orderId}"]`).remove();
                },
                error: function (xhr) {
                    console.error('Error deleting Order:', xhr.responseText);
                    showToast('error', 'Hiba történt a törlés során.');
                }
            });
        });
    });
</script>

<!-- JavaScript for Tom Select, Add Row, Total Price Calculation, and Save -->
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Dropdown script loaded'); // Debug

            const filterItems = document.querySelectorAll('.dropdown-menu [data-filter]');
            console.log('Found filter items:', filterItems.length); // Debug

            filterItems.forEach(item => {
                item.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filter = this.getAttribute('data-filter');
                    const sort = this.getAttribute('data-sort');
                    console.log('Clicked item:', { filter, sort }); // Debug

                    // Try multiple selectors to find the form
                    let form = document.querySelector('form[asp-page="./Index"]') ||
                               document.querySelector('form[action="/CRM/Orders"]') ||
                               document.querySelector('form[action="/CRM/Orders/Index"]');

                    if (form) {
                        console.log('Form found, submitting:', { filter, sort }); // Debug

                        // Clear previous hidden inputs
                        form.querySelectorAll('input[name="StatusFilter"], input[name="SortBy"]').forEach(input => input.remove());

                        // Add StatusFilter
                        const statusInput = document.createElement('input');
                        statusInput.type = 'hidden';
                        statusInput.name = 'StatusFilter';
                        statusInput.value = filter === 'all' ? '' : filter;
                        form.appendChild(statusInput);

                        // Add SortBy
                        const sortInput = document.createElement('input');
                        sortInput.type = 'hidden';
                        sortInput.name = 'SortBy';
                        sortInput.value = sort;
                        form.appendChild(sortInput);

                        form.submit();
                    } else {
                        console.error('Form not found. Available forms:', document.querySelectorAll('form').length);
                        document.querySelectorAll('form').forEach(f => console.log('Form action:', f.getAttribute('action')));
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Status mapping
            const statusMapping = {
                'Folyamatban': 'InProgress',
                'Felfüggesztve': 'Suspended',
                'Jóváhagyásra_vár': 'PendingApproval',
                'Jóváhagyva': 'Approved',
                'Kiküldve': 'Sent',
                'Elfogadva': 'Accepted',
                'Megrendelve': 'Ordered',
                'Teljesítve': 'Fulfilled',
                'Lezárva': 'Closed',
                'InProgress': 'InProgress',
                'Accepted': 'Accepted',
                'Rejected': 'Rejected',
                'Draft': 'Draft'
            };
            // Handle filter/sort dropdown
            document.querySelectorAll('.dropdown-menu [data-filter]').forEach(filterItem => {
                filterItem.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filter = this.getAttribute('data-filter');
                    const sort = this.getAttribute('data-sort');
                    const form = document.querySelector('form[action="./Index"]');
                    if (form) {
                        // Add StatusFilter
                        const statusInput = document.createElement('input');
                        statusInput.type = 'hidden';
                        statusInput.name = 'StatusFilter';
                        statusInput.value = filter === 'all' ? '' : filter;
                        form.appendChild(statusInput);

                        // Add SortBy
                        const sortInput = document.createElement('input');
                        sortInput.type = 'hidden';
                        sortInput.name = 'SortBy';
                        sortInput.value = sort;
                        form.appendChild(sortInput);

                        form.submit();
                    }
                });
            });

            // Calculate Total Price for a Row
            function calculateTotalPrice(row, forceRecalculate = false) {
                try {
                    console.log('Calculating total price for row:', row.dataset.itemId);
                    const quantityInput = row.querySelector('.quantity');
                    const unitPriceInput = row.querySelector('.unit-price');
                    const discountValueInput = row.querySelector('.discount-value');
                    const discountTypeSelect = row.querySelector('.discount-type');
                    const totalPriceSpan = row.querySelector('.total-price');

                    if (!quantityInput || !unitPriceInput || !discountValueInput || !discountTypeSelect || !totalPriceSpan) {
                        console.error('Missing elements in row:', row.dataset.itemId, {
                            quantity: !!quantityInput,
                            unitPrice: !!unitPriceInput,
                            discountValue: !!discountValueInput,
                            discountType: !!discountTypeSelect,
                            totalPrice: !!totalPriceSpan
                        });
                        return 0;
                    }

                    if (forceRecalculate || row.dataset.initialized !== 'true') {
                        const quantity = parseFloat(quantityInput.value) || 0;
                        const unitPrice = parseFloat(unitPriceInput.value) || 0;
                        const discountValue = parseFloat(discountValueInput.value) || 0;
                        const discountType = discountTypeSelect.value;

                        let total = quantity * unitPrice;
                        let discount = 0;

                        if (discountValue > 0) {
                            if (discountType === 'Percentage') {
                                discount = total * (discountValue / 100);
                            } else {
                                discount = discountValue;
                            }
                        }

                        total = total - discount;
                        total = total < 0 ? 0 : total;
                        totalPriceSpan.textContent = total.toFixed(2);
                        row.dataset.initialized = 'true';
                        console.log('Total price set to:', total.toFixed(2), 'for item:', row.dataset.itemId);
                        return total;
                    } else {
                        const currentTotal = parseFloat(totalPriceSpan.textContent) || 0;
                        console.log('Using existing total price:', currentTotal, 'for item:', row.dataset.itemId);
                        return currentTotal;
                    }
                } catch (error) {
                    console.error('Error calculating total price for row:', row.dataset.itemId, error);
                    return 0;
                }
            }

            // Calculate Order Totals
            function calculateOrderTotals(orderId, retryCount = 0) {
                try {
                    const tbody = document.querySelector(`#items-tbody_${orderId}`);
                    const totalAmountSpan = document.querySelector(`#items-tbody_${orderId} .Order-total-amount`);
                    const finalTotalSpan = document.querySelector(`#items-tbody_${orderId} .Order-final-total`);
                    const discountValueInput = document.querySelector(`#items-tbody_${orderId} .Order-discount-value`);
                    const discountTypeSelect = document.querySelector(`#items-tbody_${orderId} .Order-discount-type`);

                    if (!tbody || !totalAmountSpan || !finalTotalSpan) {
                        console.error('Missing Order total elements for orderId:', orderId, {
                            tbody: !!tbody,
                            totalAmountSpan: !!totalAmountSpan,
                            finalTotalSpan: !!finalTotalSpan,
                            discountValueInput: !!discountValueInput,
                            discountTypeSelect: !!discountTypeSelect
                        });
                        return 0;
                    }

                    const rows = tbody.querySelectorAll('.Order-item-row');
                    console.log('Found rows for Order totals:', rows.length, 'IDs:', Array.from(rows).map(r => r.dataset.itemId));
                    if (rows.length === 0 && retryCount < 5) {
                        console.warn('No rows found for orderId:', orderId, 'retrying in 100ms, attempt:', retryCount + 1);
                        setTimeout(() => calculateOrderTotals(orderId, retryCount + 1), 100);
                        return 0;
                    }

                    let totalAmount = 0;
                    rows.forEach(row => {
                        const price = parseFloat(row.querySelector('.total-price').textContent) || 0;
                        console.log('Row price:', price, 'for item:', row.dataset.itemId);
                        totalAmount += price;
                    });

                    const discountValue = parseFloat(discountValueInput?.value) || 0;
                    const discountType = discountTypeSelect?.value;
                    let OrderDiscount = 0;

                    if (discountValue > 0 && discountType) {
                        if (discountType === 'Percentage') {
                            OrderDiscount = totalAmount * (discountValue / 100);
                        } else {
                            OrderDiscount = discountValue;
                        }
                    }

                    const finalTotal = totalAmount - OrderDiscount;
                    console.log('Total Amount:', totalAmount.toFixed(2), 'Final Total:', finalTotal.toFixed(2));
                    totalAmountSpan.textContent = totalAmount.toFixed(2);
                    finalTotalSpan.textContent = finalTotal < 0 ? '0.00' : finalTotal.toFixed(2);
                    return finalTotal;
                } catch (error) {
                    console.error('Error calculating Order totals for orderId:', orderId, error);
                    return 0;
                }
            }

            // Update Discount Input Name Based on Type
            function updateDiscountInputName(row) {
                const discountInput = row.querySelector('.discount-value');
                const discountType = row.querySelector('.discount-type');
                if (discountInput && discountType) {
                    const prefix = discountType.dataset.discountNamePrefix;
                    discountInput.name = `${prefix}.${discountType.value === 'Percentage' ? 'DiscountPercentage' : 'DiscountAmount'}`;
                }
            }

            // Update Order-Level Discount Input Name
            function updateOrderDiscountInputName(orderId) {
                const discountInput = document.querySelector(`#items-tbody_${orderId} .Order-discount-value`);
                const discountType = document.querySelector(`#items-tbody_${orderId} .Order-discount-type`);
                if (discountInput && discountType) {
                    discountInput.name = discountType.value === 'Percentage' ? 'DiscountPercentage' : 'DiscountAmount';
                }
            }

            // Initialize Row Calculations
            function initializeRowCalculations(row) {
                const inputs = row.querySelectorAll('.quantity, .unit-price, .discount-value, .discount-type');
                console.log('Initializing row:', row.dataset.itemId, 'Found inputs:', inputs.length);
                inputs.forEach(input => {
                    input.addEventListener('input', () => {
                        console.log('Input changed:', input.name, 'Value:', input.value);
                        updateDiscountInputName(row);
                        calculateTotalPrice(row, true);
                        calculateOrderTotals(row.closest('tbody').id.replace('items-tbody_', ''));
                    });
                });
                updateDiscountInputName(row);
                calculateTotalPrice(row);
            }

            // Initialize Description Toggle
            function initializeDescriptionToggle(row) {
                const itemId = row.dataset.itemId;
                const descriptionRow = document.querySelector(`.description-row[data-item-id="${itemId}"]`);
                const editButton = row.querySelector('.edit-description');
                if (!descriptionRow || !editButton) {
                    console.warn('Description row or edit button missing for item:', itemId);
                    return;
                }
                const textarea = descriptionRow.querySelector('.item-description-input');
                const charCount = descriptionRow.querySelector('.char-count');
                const hiddenInput = row.querySelector('.item-description');

                textarea.addEventListener('input', () => {
                    const length = textarea.value.length;
                    charCount.textContent = `${length}/200`;
                    hiddenInput.value = textarea.value;
                    console.log('Description updated for item:', itemId, 'Value:', textarea.value);
                });

                editButton.addEventListener('click', () => {
                    const isHidden = descriptionRow.style.display === 'none';
                    descriptionRow.style.display = isHidden ? 'table-row' : 'none';
                    console.log('Toggled description for item:', itemId, 'Visible:', isHidden);
                });
            }

            // Initialize Order-Level Discount Calculations
            function initializeOrderDiscountCalculations(orderId) {
                const tbody = document.querySelector(`#items-tbody_${orderId}`);
                const inputs = tbody.querySelectorAll('.Order-discount-value, .Order-discount-type');
                inputs.forEach(input => {
                    input.addEventListener('input', () => {
                        updateOrderDiscountInputName(orderId);
                        calculateOrderTotals(orderId);
                    });
                });
                updateOrderDiscountInputName(orderId);
            }

            // Initialize Delete Functionality
            function initializeDeleteButtons(orderId) {
                const tbody = document.querySelector(`#items-tbody_${orderId}`);
                if (!tbody) {
                    console.error('Tbody not found for orderId:', orderId);
                    return;
                }
                tbody.addEventListener('click', function(event) {
                    if (event.target.closest('.remove-item-row')) {
                        const button = event.target.closest('.remove-item-row');
                        const row = button.closest('.Order-item-row');
                        const itemId = row.dataset.itemId;
                        const descriptionRow = document.querySelector(`.description-row[data-item-id="${itemId}"]`);

                        console.log('Delete clicked for item:', itemId);
                        row.remove();
                        if (descriptionRow) {
                            descriptionRow.remove();
                        }
                        calculateOrderTotals(orderId);
                    }
                });
            }

            // Initialize Tom Select for Partners
            function initializePartnerTomSelect(select, orderId) {
                const selectedId = select.dataset.selectedId;
                const selectedText = select.dataset.selectedText;
                console.log('Tom Select Partner Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

                const control = new TomSelect(select, {
                    valueField: 'id',
                    labelField: 'text',
                    searchField: 'text',
                    placeholder: '-- Válasszon partnert --',
                    allowEmptyOption: true,
                    maxOptions: 100,
                    load: function(query, callback) {
                        const url = `/api/partners?term=${encodeURIComponent(query)}`;
                        console.log('Partner Search Query:', url);
                        fetch(url)
                            .then(response => {
                                if (!response.ok) {
                                    return response.text().then(text => {
                                        throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                                    });
                                }
                                return response.json();
                            })
                            .then(data => {
                                console.log('API /api/partners Response:', data);
                                if (Array.isArray(data)) {
                                    callback(data);
                                } else {
                                    console.warn('Invalid response format for partners:', data);
                                    callback([]);
                                }
                            })
                            .catch(error => {
                                console.error('Partner Search Error:', error);
                                callback([{ id: 0, text: 'Hiba: Nem sikerült betölteni a partnereket' }]);
                            });
                    },
                    shouldLoad: function(query) {
                        return query.length > 0;
                    },
                    render: {
                        option: function(data, escape) {
                            return `<div>${escape(data.text)}</div>`;
                        },
                        item: function(data, escape) {
                            return `<div>${escape(data.text)}</div>`;
                        },
                        no_results: function(data, escape) {
                            return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                        }
                    }
                });

                if (selectedId && selectedId !== '0') {
                    control.addOption({ id: selectedId, text: selectedText });
                    control.setValue(selectedId);
                    const url = `/api/partners/${selectedId}`;
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => {
                                    throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data && data.text) {
                                control.addOption({ id: data.id, text: data.text });
                                control.setValue(data.id);
                            }
                        })
                        .catch(error => {
                            console.error('Failed to preload partner for ID:', selectedId, 'orderId:', orderId, error);
                        });
                }
            }

            // Initialize Tom Select for Products
            function initializeProductTomSelect(select, orderId) {
                const selectedId = select.dataset.selectedId;
                const selectedText = select.dataset.selectedText;
                console.log('Tom Select Product Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

                const control = new TomSelect(select, {
                    valueField: 'id',
                    labelField: 'name',
                    searchField: 'name',
                    placeholder: '-- Válasszon terméket --',
                    allowEmptyOption: true,
                    maxOptions: 100,
                    load: function(query, callback) {
                        const url = `/api/Product?search=${encodeURIComponent(query)}`;
                        console.log('Product Search Query:', url);
                        fetch(url)
                            .then(response => {
                                if (!response.ok) {
                                    return response.text().then(text => {
                                        throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                                    });
                                }
                                return response.json();
                            })
                            .then(data => {
                                console.log('API /api/Product Response:', data);
                                if (Array.isArray(data)) {
                                    callback(data);
                                } else {
                                    console.warn('Invalid response format for products:', data);
                                    callback([]);
                                }
                            })
                            .catch(error => {
                                console.error('Product Search Error:', error);
                                callback([{ id: 0, name: 'Hiba: Nem sikerült betölteni a termékeket' }]);
                            });
                    },
                    shouldLoad: function(query) {
                        return query.length > 0;
                    },
                    render: {
                        option: function(data, escape) {
                            return `<div>${escape(data.name)}</div>`;
                        },
                        item: function(data, escape) {
                            return `<div>${escape(data.name)}</div>`;
                        },
                        no_results: function(data, escape) {
                            return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                        }
                    }
                });

                if (selectedId && selectedId !== '0' && selectedText) {
                    control.addOption({ id: selectedId, name: selectedText });
                    control.setValue(selectedId);
                    console.log('Set initial product:', selectedText, 'for ID:', selectedId, 'orderId:', orderId);
                    const url = `/api/Product/${selectedId}`;
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => {
                                    throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data && data.name) {
                                control.addOption({ id: data.id, name: data.name });
                                control.setValue(data.id);
                            }
                        })
                        .catch(error => {
                            console.error('Failed to preload product for ID:', selectedId, 'orderId:', orderId, error);
                        });
                }
            }

            // Add Row Functionality
            function addItemRow(orderId) {
                const tbody = document.querySelector(`#items-tbody_${orderId}`);
                if (!tbody) {
                    console.error('Items tbody not found for orderId:', orderId);
                    return;
                }
                const newItemId = 'new_' + Date.now();
                console.log('Adding new item row for orderId:', orderId, 'NewItemId:', newItemId);

                const itemRow = document.createElement('tr');
                itemRow.className = 'Order-item-row';
                itemRow.dataset.itemId = newItemId;
                itemRow.innerHTML = `
                    <td>
                        <select name="OrderItems[${newItemId}].ProductId" class="form-select tom-select-product" data-selected-id="" data-selected-text="" autocomplete="off" required>
                            <option value="" disabled selected>-- Válasszon terméket --</option>
                        </select>
                    </td>
                    <td>
                        <input type="number" name="OrderItems[${newItemId}].Quantity" class="form-control form-control-sm quantity" value="1" min="0" step="1" required>
                    </td>
                    <td>
                        <input type="number" name="OrderItems[${newItemId}].UnitPrice" class="form-control form-control-sm unit-price" value="0" min="0" step="0.01" required>
                    </td>
                    <td>
                        <div class="input-group input-group-sm">
                            <input type="number" name="OrderItems[${newItemId}].DiscountPercentage" class="form-control discount-value" value="" placeholder="pl. 10" min="0" step="0.01">
                            <select class="form-select discount-type" data-discount-name-prefix="OrderItems[${newItemId}]">
                                <option value="Percentage" selected>%</option>
                                <option value="Amount">Összeg</option>
                            </select>
                        </div>
                    </td>
                    <td>
                        <span class="total-price">0.00</span>
                        <input type="hidden" name="OrderItems[${newItemId}].ItemDescription" class="item-description" value="">
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="${newItemId}"><i class="bi bi-pencil"></i></button>
                        <button type="button" class="btn btn-danger btn-sm remove-item-row"><i class="bi bi-trash"></i></button>
                    </td>
                `;

                const descriptionRow = document.createElement('tr');
                descriptionRow.className = 'description-row';
                descriptionRow.dataset.itemId = newItemId;
                descriptionRow.style.display = 'none';
                descriptionRow.innerHTML = `
                    <td colspan="6">
                        <div class="mb-2">
                            <label class="form-label">Leírás (max 200 karakter)</label>
                            <textarea name="OrderItems[${newItemId}].ItemDescriptionInput" class="form-control form-control-sm item-description-input" maxlength="200" rows="2"></textarea>
                            <div class="form-text">Karakterek: <span class="char-count">0</span>/200</div>
                        </div>
                    </td>
                `;

                tbody.insertBefore(itemRow, tbody.querySelector('.Order-total-row'));
                tbody.insertBefore(descriptionRow, tbody.querySelector('.Order-total-row'));

                initializeRowCalculations(itemRow);
                initializeDescriptionToggle(itemRow);
                const newSelect = itemRow.querySelector('.tom-select-product');
                initializeProductTomSelect(newSelect, orderId);
                calculateOrderTotals(orderId);
                console.log('Added new item row:', newItemId, 'Row HTML:', itemRow.outerHTML);
            }

            // Validate Form
            function validateForm(form, orderId) {
                const errors = [];
                const requiredFields = form.querySelectorAll('[required]');
                requiredFields.forEach(field => {
                    const value = field.value.trim();
                    if (!value) {
                        const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                        errors.push(`${label} mező kitöltése kötelező`);
                    }
                    if (['subject'].includes(field.name)) {
                        if (!value || value === '1' || value === 'x') {
                            const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                            errors.push(`${label} mező nem lehet üres, "1" vagy "x"`);
                            console.warn(`Invalid value for ${field.name}: ${value}`);
                        }
                    }
                    if (field.name.includes('.Quantity') || field.name.includes('.UnitPrice')) {
                        const numValue = parseFloat(value);
                        if (isNaN(numValue) || numValue <= 0) {
                            const label = field.closest('tr')?.querySelector('th')?.textContent || field.name;
                            errors.push(`${label} mező pozitív szám kell legyen`);
                        }
                    }
                    console.log('Validating field:', field.name, 'Value:', value);
                });
                return errors;
            }

            // Save Order
            function saveOrder(orderId) {
                const baseForm = document.querySelector(`#OrderBaseInfoForm_${orderId}`);
                const itemsForm = document.querySelector(`#OrderItemsForm_${orderId}`);
                const totalAmount = calculateOrderTotals(orderId);

                // Switch to base-info tab
                const baseInfoTab = document.querySelector(`#base-info-tab_${orderId}`);
                if (baseInfoTab) {
                    baseInfoTab.click();
                    console.log('Switched to base-info tab for orderId:', orderId);
                }

                // Validate forms
                const baseErrors = validateForm(baseForm, orderId);
                const itemErrors = validateForm(itemsForm, orderId);
                if (baseErrors.length > 0 || itemErrors.length > 0) {
                    const allErrors = [...baseErrors, ...itemErrors];
                    console.log('Validation errors for orderId:', orderId, allErrors);
                    alert('Kérjük, töltse ki az összes kötelező mezőt megfelelően:\n' + allErrors.join('\n'));
                    return;
                }

                const baseData = new FormData(baseForm);
                const itemsData = new FormData(itemsForm);

                // Get Order-level discount
                const discountValue = parseFloat(itemsData.get('DiscountPercentage') || itemsData.get('DiscountAmount')) || 0;
                const discountType = document.querySelector(`#items-tbody_${orderId} .Order-discount-type`)?.value;
                const discountPercentage = discountType === 'Percentage' && discountValue > 0 ? discountValue : null;
                const discountAmount = discountType === 'Amount' && discountValue > 0 ? discountValue : null;

                console.log('Base form data for orderId:', orderId, Object.fromEntries(baseData));
                console.log('Items form data for orderId:', orderId, Object.fromEntries(itemsData));

                const OrderDto = {
                    OrderNumber: baseData.get('OrderNumber') || '',
                    PartnerId: parseInt(baseData.get('partnerId')) || null,
                    OrderDate: baseData.get('OrderDate') || null,
                    Status: statusMapping[baseData.get('status')] || baseData.get('status'),
                    TotalAmount: totalAmount,
                    SalesPerson: baseData.get('salesPerson') || '',
                    ValidityDate: baseData.get('validityDate') || null,
                    Subject: baseData.get('subject') || '',
                    Description: baseData.get('description') || '',
                    DetailedDescription: baseData.get('detailedDescription') || '',
                    DiscountPercentage: discountPercentage,
                    DiscountAmount: discountAmount
                };

                const OrderItems = [];
                const rows = document.querySelectorAll(`#items-tbody_${orderId} .Order-item-row`);
                console.log('Found rows for saving:', rows.length, 'IDs:', Array.from(rows).map(r => r.dataset.itemId));
                rows.forEach(row => {
                    const itemId = row.dataset.itemId;
                    const isNew = itemId.startsWith('new_');
                    const productId = itemsData.get(`OrderItems[${itemId}].ProductId`);
                    if (!productId) {
                        console.warn('Skipping item with no ProductId:', itemId);
                        return;
                    }
                    const itemDescription = itemsData.get(`OrderItems[${itemId}].ItemDescription`) || "";
                    const discountValue = itemsData.get(`OrderItems[${itemId}].DiscountPercentage`) || itemsData.get(`OrderItems[${itemId}].DiscountAmount`);
                    const discountType = row.querySelector('.discount-type')?.value;
                    const productSelect = row.querySelector('.tom-select-product');
                    const productName = productSelect?.dataset.selectedText || row.querySelector('.ts-control .item')?.textContent || '';
                    const item = {
                        OrderItemId: isNew ? null : parseInt(itemId),
                        orderId: parseInt(orderId) || null,
                        ProductId: parseInt(productId),
                        ProductName: productName,
                        Quantity: parseFloat(itemsData.get(`OrderItems[${itemId}].Quantity`)) || 0,
                        UnitPrice: parseFloat(itemsData.get(`OrderItems[${itemId}].UnitPrice`)) || 0,
                        ItemDescription: itemDescription,
                        DiscountPercentage: discountType === 'Percentage' && discountValue ? parseFloat(discountValue) : null,
                        DiscountAmount: discountType === 'Amount' && discountValue ? parseFloat(discountValue) : null
                    };
                    OrderItems.push({ item, isNew });
                });

                if (OrderItems.length === 0) {
                    console.log('No Order items found for orderId:', orderId);
                    alert('Legalább egy tétel szükséges az árajánlathoz.');
                    return;
                }

                console.log('Saving Order for orderId:', orderId, { OrderDto, OrderItems });

                // Handle new Order creation differently
                if (orderId === 'new') {
                    // Create Order
                    console.log('Creating new Order: /api/Orders, Payload:', OrderDto);
                    fetch('/api/Orders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(OrderDto)
                    })
                    .then(response => {
                        console.log(`Order create response for orderId: ${orderId}, Status ${response.status}, Headers:`, Object.fromEntries(response.headers));
                        if (!response.ok) {
                            return response.json().then(err => {
                                console.error(`Order error details:`, err);
                                throw new Error(`Failed to create Order: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        const neworderId = data.orderId || data.orderId;
                        console.log('Order created successfully, orderId:', neworderId);

                        // Save Order Items
                        const itemPromises = OrderItems.map(({ item }) => {
                            const url = `/api/Orders/${neworderId}/Items`;
                            const payload = {
                                orderId: neworderId,
                                ProductId: item.ProductId,
                                ProductName: item.ProductName,
                                Quantity: item.Quantity,
                                UnitPrice: item.UnitPrice,
                                ItemDescription: item.ItemDescription,
                                DiscountPercentage: item.DiscountPercentage,
                                DiscountAmount: item.DiscountAmount
                            };
                            console.log(`Saving item: new, Method: POST, URL: ${url}, Payload:`, payload);
                            return fetch(url, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            })
                            .then(response => {
                                console.log(`Item response for new: Status ${response.status}, Headers:`, Object.fromEntries(response.headers));
                                if (!response.ok) {
                                    return response.json().then(err => {
                                        console.error(`Error details for new:`, err);
                                        throw new Error(`Failed to create item: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                                    });
                                }
                                return response.json();
                            });
                        });

                        return Promise.all(itemPromises).then(savedItems => {
                            console.log('All items saved for orderId:', neworderId, savedItems.map(i => ({ OrderItemId: i.OrderItemId || i.OrderItemId, ProductId: i.productId || i.ProductId })));
                            return neworderId;
                        });
                    })
                    .then(neworderId => {
                        console.log('Order and items saved successfully for orderId:', neworderId);
                        alert('Árajánlat sikeresen létrehozva!');
                        const modal = document.getElementById('newOrderModal');
                        bootstrap.Modal.getInstance(modal).hide();
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Save error for orderId:', orderId, error);
                        alert('Hiba történt az árajánlat létrehozása közben: ' + error.message);
                    });
                } else {
                    // Existing Order update logic
                    const itemPromises = OrderItems.map(({ item, isNew }) => {
                        const url = isNew ? `/api/Orders/${orderId}/Items` : `/api/Orders/${orderId}/Items/${item.OrderItemId}`;
                        const method = isNew ? 'POST' : 'PUT';
                        const payload = {
                            orderId: item.orderId,
                            ProductId: item.ProductId,
                            ProductName: item.ProductName,
                            Quantity: item.Quantity,
                            UnitPrice: item.UnitPrice,
                            ItemDescription: item.ItemDescription,
                            DiscountPercentage: item.DiscountPercentage,
                            DiscountAmount: item.DiscountAmount
                        };
                        console.log(`Saving item: ${item.OrderItemId || 'new'}, Method: ${method}, URL: ${url}, Payload:`, payload);
                        return fetch(url, {
                            method: method,
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        })
                        .then(response => {
                            console.log(`Item response for ${item.OrderItemId || 'new'}: Status ${response.status}, Headers:`, Object.fromEntries(response.headers));
                            if (!response.ok) {
                                return response.json().then(err => {
                                    console.error(`Error details for ${item.OrderItemId || 'new'}:`, err);
                                    throw new Error(`Failed to ${isNew ? 'create' : 'update'} item ${item.OrderItemId || 'new'}: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                                });
                            }
                            return response.json();
                        });
                    });

                    Promise.all(itemPromises)
                        .then(savedItems => {
                            console.log('All items saved for orderId:', orderId, savedItems.map(i => ({ OrderItemId: i.OrderItemId || i.OrderItemId, ProductId: i.productId || i.ProductId })));
                            console.log(`Updating Order: /api/Orders/${orderId}, Payload:`, OrderDto);
                            return fetch(`/api/Orders/${orderId}`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(OrderDto)
                            });
                        })
                        .then(response => {
                            console.log(`Order update response for orderId: ${orderId}, Status ${response.status}, Headers:`, Object.fromEntries(response.headers));
                            if (!response.ok) {
                                return response.json().then(err => {
                                    console.error(`Order error details:`, err);
                                    throw new Error(`Failed to update Order: ${response.status} "${err.title || JSON.stringify(err.errors) || 'Request failed'}"`);
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Order saved successfully for orderId:', orderId, data);
                            alert('Árajánlat sikeresen mentve!');
                            const modal = document.getElementById(`editOrderModal_${orderId}`);
                            bootstrap.Modal.getInstance(modal).hide();
                            window.location.reload();
                        })
                        .catch(error => {
                            console.error('Save error for orderId:', orderId, error);
                            alert('Hiba történt az árajánlat mentése közben: ' + error.message);
                        });
                }
            }

            // Initialize Event Listeners for a Order
            function initializeEventListeners(orderId) {
                // Add Row
                const addButtons = document.querySelectorAll(`.add-item-row[data-Order-id="${orderId}"]`);
                console.log('Found add-item-row buttons for orderId:', orderId, addButtons.length, 'Selectors:', Array.from(addButtons).map(b => b.outerHTML));
                if (addButtons.length === 0) {
                    console.error('No add-item-row buttons found for orderId:', orderId);
                }
                addButtons.forEach((button, index) => {
                    button.removeEventListener('click', () => addItemRow(orderId));
                    button.addEventListener('click', () => {
                        console.log(`Add item button ${index} clicked for orderId: ${orderId}`);
                        addItemRow(orderId);
                    });
                });

                // Save Order
                const saveButtons = document.querySelectorAll(`.save-Order[data-Order-id="${orderId}"]`);
                console.log('Found save-Order buttons for orderId:', orderId, saveButtons.length, 'Selectors:', Array.from(saveButtons).map(b => b.outerHTML));
                saveButtons.forEach((button, index) => {
                    button.removeEventListener('click', () => saveOrder(orderId));
                    button.addEventListener('click', () => {
                        console.log(`Save Order button ${index} clicked for orderId: ${orderId}`);
                        saveOrder(orderId);
                    });
                });

                // Initialize existing rows
                const productSelects = document.querySelectorAll(`#items-tbody_${orderId} .tom-select-product`);
                console.log('Found tom-select-product selects for orderId:', orderId, productSelects.length);
                productSelects.forEach(select => {
                    initializeProductTomSelect(select, orderId);
                    const row = select.closest('.Order-item-row');
                    if (row) {
                        initializeRowCalculations(row);
                        initializeDescriptionToggle(row);
                    }
                });

                const partnerSelects = document.querySelectorAll(`#OrderBaseInfoForm_${orderId} .tom-select`);
                console.log('Found tom-select partner selects for orderId:', orderId, partnerSelects.length);
                partnerSelects.forEach(select => {
                    initializePartnerTomSelect(select, orderId);
                });

                initializeDeleteButtons(orderId);
                initializeOrderDiscountCalculations(orderId);
                calculateOrderTotals(orderId);
                console.log('Event listeners initialized for orderId:', orderId);
            }

            // Initialize all modals
            document.querySelectorAll('.modal[id^="editOrderModal_"]').forEach(modal => {
                const orderId = modal.id.replace('editOrderModal_', '');
                modal.addEventListener('shown.bs.modal', function () {
                    console.log('Edit modal shown for orderId:', orderId);
                    initializeEventListeners(orderId);
                    calculateOrderTotals(orderId);
                });
            });

            // Initialize new Order modal
            const newOrderModal = document.getElementById('newOrderModal');
            if (newOrderModal) {
                newOrderModal.addEventListener('shown.bs.modal', function () {
                    console.log('New Order modal shown for orderId: new');
                    initializeEventListeners('new');
                    calculateOrderTotals('new');
                });
            }
        });
    </script>
}


    <script>
        // Rendelés másolása. csak külön script-ben működik, ezért kell ide is a showtoast.
            function showToast(type, message) {
                // Create the toast element
                const toast = $(`
                    <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `);

                // Append toast to the container
                $('#toastContainer').append(toast);

                // Initialize and show the toast
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();

                // Remove the toast after 5 seconds
                setTimeout(() => toast.remove(), 5500); // Includes 500ms fade-out
            }

            async function copyOrder(orderId) {
                try {
                    const response = await fetch(`/api/Orders/${orderId}/copy`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const result = await response.json();
                    if (response.ok && result) {
                        showToast('success', `Árajánlat sikeresen másolva! Új szám: ${result.OrderNumber}`);
                        
                        // Delay the reload to let the toast be visible
                        setTimeout(() => location.reload(), 3000); // Reload after 3 seconds
                    } else {
                        showToast('error', result.error || 'Másolás sikertelen.');
                    }
                } catch (error) {
                    showToast('error', 'Hiba történt a másolás során.');
                    console.error('[Error] Copy Order error:', error);
                }
            }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.copy-Order-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-Order-id');
                    copyOrder(orderId);
                });
            });
        });
    </script>

}

<!-- CSS Fix for Tom Select Placeholder and Layout -->
<style>

    .bg-success-dark {
    background-color: #146c43 !important;
    color: white;
    }
    .bg-primary-dark {
        background-color: #0a58ca !important;
        color: white;
    }
    .bg-info-dark {
        background-color: #087990 !important;
        color: white;
    }
    .ts-wrapper .ts-control > .placeholder {
        color: #6c757d !important; /* Bootstrap secondary color */
        opacity: 1 !important;
    }
    .ts-wrapper .ts-control {
        min-height: calc(1.5em + 0.5rem + 2px); /* Smaller for clarity */
    }
    .table {
        border-collapse: separate;
    }
    .table th, .table td {
        padding: 12px 10px; /* More padding for breathing room */
        vertical-align: middle;
    }
    .table thead th {
        background-color: #e9ecef; /* Subtle header background */
        font-weight: 600;
    }
    .Order-item-row {
        background-color: #fff; /* White background for rows */
        box-shadow: 0 1px 3px rgba(0,0,0,0.1); /* Subtle shadow for separation */
    }
    .form-control-sm, .form-select-sm {
        font-size: 0.85rem; /* Smaller font for inputs */
        padding: 0.25rem 0.5rem; /* Compact padding */
    }
    .input-group-sm .form-control, .input-group-sm .form-select {
        height: 30px; /* Compact input group */
    }
    .input-group .form-control.discount-value, .input-group .form-control.Order-discount-value {
        width: 80px; /* Smaller discount input */
    }
    .input-group .form-select.discount-type, .input-group .form-select.Order-discount-type {
        width: 60px; /* Smaller discount type select */
    }
    .total-price, .Order-total-amount, .Order-final-total {
        display: inline-block;
        min-width: 80px;
        text-align: right;
        font-weight: 500;
    }
    .btn-sm {
        padding: 0.2rem 0.4rem; /* Smaller buttons */
        font-size: 0.8rem;
    }
    .edit-description, .remove-item-row {
        margin-right: 6px;
    }
    .char-count {
        font-weight: bold;
    }
    .description-row {
        background-color: #f8f9fa; /* Light background for contrast */
    }
    .description-row .form-label {
        font-weight: 500;
        font-size: 0.9rem;
    }
    .description-row .mb-2 {
        padding: 8px 10px; /* Reduced padding */
    }
    .description-row .form-control-sm {
        font-size: 0.85rem;
        resize: vertical; /* Allow vertical resize only */
    }
    .Order-total-row, .Order-discount-row {
        font-weight: bold;
        background-color: #f1f3f5; /* Slightly darker for totals */
    }
</style>

<style>

    .table .description-row {
        background-color: #f8f9fa; /* Light background for description row */
    }
    .table .description-row td {
        padding: 10px;
    }
    .table .description {
        resize: vertical;
        min-height: 60px;
        max-height: 100px;
        width: 100%;
    }
    .table th:nth-child(1), .table td:nth-child(1) { /* Product column */
        max-width: 200px;
    }
    .btn-link {
        text-decoration: none;
    }
    .nav-tabs {
        margin-bottom: 15px;
    }
    .tab-content {
        min-height: 200px; /* Ensure tab content has enough space */
    }

.drag-handle {
    cursor: move;
    width: 30px;
    text-align: center;
    vertical-align: middle;
}

.drag-handle .bi-grip-vertical {
    font-size: 1.2rem;
    color: #6c757d;
}

#orderItemsTable tbody tr:hover .drag-handle .bi-grip-vertical {
    color: #007bff;
}

#orderItemsTable .placeholder {
    background-color: #f8f9fa;
    border: 2px dashed #007bff;
    height: 50px;
}



[data-theme="dark"] .partner-card {
        background-color: #2a2a2a;
        border: 1px solid #444;
    }


/* Badge styling */
.badge-draft { background-color: #6c757d; }
.badge-sent { background-color: #007bff; }
.badge-accepted { background-color: #28a745; }
.badge-rejected { background-color: #dc3545; }

    /* Ensure textarea in Leírás column is wider and readable */
    #orderItemsTable .itemDescription {
        width: 100%;
        min-width: 200px;
        height: 60px;
        resize: vertical;
    }
    /* Adjust table column widths */
    #orderItemsTable th:nth-child(2), #orderItemsTable td:nth-child(2) {
        width: 30%;
    }

        /* Card-based layout matching Leads page */
        .card-grid-header {
            padding: 0 15px 2px 15px;
            margin-top: 0px;
            background-color: #F1EFEC;
            border-bottom: 1px solid #dee2e6;
        }

        .card-grid-row {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr 1fr 1fr auto;
            gap: 10px;
            align-items: center;
        }

        .card-grid-column {
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .card-grid-cell {
            padding: 0 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Column widths */
        .order-number-col { flex: 1 1 15%; min-width: 120px; }
        .order-partner-col { flex: 1 1 25%; min-width: 150px; }
        .order-date-col { flex: 1 1 15%; min-width: 100px; }
        .order-status-col { flex: 1 1 15%; min-width: 100px; }
        .order-amount-col { flex: 1 1 15%; min-width: 120px; }
        .actions-column, .actions-cell { flex: 0 0 auto; width: auto; text-align: right; padding-right: 10px; }

        /* Button group styling */
        .btn-group-sm .btn {
            padding: 0.2rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Badge styling */
        .badge-draft { background-color: #6c757d; }
        .badge-sent { background-color: #007bff; }
        .badge-accepted { background-color: #28a745; }
        .badge-rejected { background-color: #dc3545; }

        /* Ensure pagination is centered */
        .fixed-footer .pagination {
            display: flex;
            justify-content: center;
            width: 100%;
            margin-bottom: 0;
        }

        .fixed-footer nav {
            flex-grow: 1;
            text-align: center;
        }

        /* Modal Sizing */
        .modal-lg { max-width: 1000px !important; }

        /* Consistent Tab Content Styling */
        #newOrderModal .tab-content,
        #newOrderItemModal .tab-content,
        [id^="editOrderModal_"] .tab-content,
        [id^="newOrderItemModal_"] .tab-content,
        [id^="viewOrderModal_"] .tab-content {
            min-width: 0;
            width: 100%;
            min-height: 450px;
            max-height: 65vh;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 1rem;
            background-color: #fff;
        }

        /* Consistent Tab Pane Styling */
        #newOrderModal .tab-pane,
        #newOrderItemModal .tab-pane,
        [id^="editOrderModal_"] .tab-pane,
        [id^="newOrderItemModal_"] .tab-pane,
        [id^="viewOrderModal_"] .tab-pane {
            width: 100%;
        }

        /* Adjust Modal Body Padding */
        #newOrderModal .modal-body,
        #newOrderItemModal .modal-body,
        [id^="editOrderModal_"] .modal-body,
        [id^="newOrderItemModal_"] .modal-body,
        [id^="viewOrderModal_"] .modal-body {
            padding: 1rem 1rem 0 1rem;
        }

        /* Remove margin below tabs */
        #newOrderModal .nav-tabs,
        [id^="editOrderModal_"] .nav-tabs,
        [id^="viewOrderModal_"] .nav-tabs {
            margin-bottom: 0 !important;
        }

        /* General Table Cell Styling */
        .table tbody tr td {
            vertical-align: middle;
        }

        /* View Modal Specific Content Styling */
        [id^="viewOrderModal_"] .table {
            margin-bottom: 0;
        }

        [id^="viewOrderModal_"] .tab-pane > p {
            padding: 1.5rem;
            text-align: center;
            color: #6c757d;
        }

        /* Select2 styling */
.select2-container {
            width: 100% !important;
        }

        .select2-container {
    z-index: 1060; /* Higher than Bootstrap modal */
}

        .select2-container--bootstrap-5 .select2-selection--single {
            height: 38px;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            background-color: #fff;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
            padding-top: 0;
            padding-bottom: 0;
            color: #495057;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: 38px;
            right: 0.75rem;
        }

        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        .select2-container-wrapper {
            position: relative;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single {
            background-color: #3a3a3a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-dropdown {
            background-color: #2a2a2a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option--highlighted {
            background-color: #357abd;
            color: #ffffff;
        }

        /* Dark mode overrides */
        [data-theme="dark"] .card-grid-header {
            background-color: #2a2a2a;
            border-bottom: 1px solid #444;
        }

        [data-theme="dark"] .card-grid-column {
            color: #b0b0b0;
        }

        [data-theme="dark"] .order-card {
            background-color: #2a2a2a;
            border: 1px solid #444;
        }

        [data-theme="dark"] .fixed-footer {
            background-color: #2a2a2a;
            border-top: 1px solid #444;
        }

        [data-theme="dark"] .alert-success {
            background-color: #2e7d32;
            border-color: #1b5e20;
            color: #e0e0e0;
        }

        [data-theme="dark"] .alert-danger {
            background-color: #d32f2f;
            border-color: #b71c1c;
            color: #e0e0e0;
        }

        [data-theme="dark"] #newOrderModal .tab-content,
        [data-theme="dark"] #newOrderItemModal .tab-content,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-content,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-content {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .tab-pane,
        [data-theme="dark"] #newOrderItemModal .tab-pane,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-pane,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-pane {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .modal-body,
        [data-theme="dark"] #newOrderItemModal .modal-body,
        [data-theme="dark"] [id^="editOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="newOrderItemModal_"] .modal-body,
        [data-theme="dark"] [id^="viewOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="deleteOrderModal_"] .modal-body {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control {
            background-color: #333333 !important;
            border-color: #666 !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control:focus {
            background-color: #333333 !important;
            border-color: #888 !important;
            color: #e0e0e0 !important;
            box-shadow: 0 0 0 0.2rem rgba(100, 100, 100, 0.25) !important;
        }

        [data-theme="dark"] .form-control::placeholder {
            color: #aaaaaa !important;
        }

        [data-theme="dark"] .form-label {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .modal-title {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs {
            background-color: #2a2a2a !important;
            border-bottom: 1px solid #444 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link {
            color: #b0b0b0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link:hover {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link.active {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
            border-color: #444 #444 #2a2a2a !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane > p {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table th,
        [data-theme="dark"] [id^="viewOrderModal_"] .table td {
            border-color: #444 !important;
            color: #e0e0e0 !important;
        }
    </style>
