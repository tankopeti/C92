@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Cloud9_2.Models
@using Cloud9_2.Data
@using Microsoft.AspNetCore.Antiforgery
@model Cloud9_2.Pages.CRM.Orders.IndexModel
@using System.Globalization
@functions {
    public string GetAntiForgeryToken()
    {
        var antiForgery = PageContext.HttpContext.RequestServices.GetService<IAntiforgery>();
        var tokenSet = antiForgery?.GetAndStoreTokens(PageContext.HttpContext);
        return tokenSet?.RequestToken ?? string.Empty;
    }
}
@{
    ViewData["Title"] = "Rendelések";
    Layout = "_Layout";
}

@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Rendelések</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Orders.Count of @Model.DistinctOrderIdCount rendelés@(Model.DistinctOrderIdCount != 1 ? "ek" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newOrderButton" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Új rendelés létrehozása">
                    + Új rendelés
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" asp-page="./Index" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés rendelések között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <a href="@Url.Page("./Index")" class="btn btn-outline-danger btn-sm" aria-label="Keresés törlése">
                            <i class="bi bi-x"></i>
                        </a>
                    }
                </form>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" data-filter="all" data-sort="orderdate">Összes rendelés (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="all" data-sort="deadline">Rendezés: Határidő</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="all" data-sort="orderid">Rendezés: Rendelés ID</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Table -->
        <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
            <table class="table table-striped table-hover">
                <thead class="sticky-top custom-thead">
                    <tr>
                        @foreach (var column in new[] { "OrderNumber", "Partner", "OrderDate", "Status", "TotalAmount" })
                        {
                            <th class="text-nowrap">@(column == "OrderNumber" ? "Rendelésszám" : column == "OrderDate" ? "Dátum" : column == "TotalAmount" ? "Összeg" : column == "Status" ? "Státusz" : column)</th>
                        }
                        <th class="text-nowrap">Műveletek</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Orders.Any())
                    {
                        @foreach (var order in Model.Orders.OrderByDescending(o => o.OrderDate))
                        {
                            <tr data-order-id="@order.OrderId">
                                <td class="text-nowrap"><i class="bi bi-file-earmark-text me-1"></i>@order.OrderNumber</td>
                                <td class="text-nowrap"><i class="bi bi-person me-1"></i>@order.Partner?.Name</td>
                                <td class="text-nowrap"><i class="bi bi-calendar me-1"></i>@(order.OrderDate?.ToString("yyyy-MM-dd"))</td>
                                <td class="text-nowrap">
                                    @{
                                        var badgeClass = "badge bg-secondary";
                                        if (order.Status == "Draft") badgeClass = "badge bg-secondary";
                                        else if (order.Status == "Pending") badgeClass = "badge bg-warning";
                                        else if (order.Status == "Confirmed") badgeClass = "badge bg-success";
                                        else if (order.Status == "Shipped") badgeClass = "badge bg-primary";
                                        else if (order.Status == "Cancelled") badgeClass = "badge bg-danger";
                                    }
                                    <span class="@badgeClass">@Model.StatusDisplayNames[order.Status]</span>
                                </td>
                                <td class="text-nowrap"><i class="bi bi-currency-dollar me-1"></i>@((order.TotalAmount)?.ToString("C", CultureInfo.GetCultureInfo("hu-HU")))</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button"
                                                class="btn btn-outline-info view-order-btn"
                                                data-bs-toggle="modal"
                                                data-bs-target="#viewOrderModal_@order.OrderId"
                                                aria-label="Rendelés részleteinek megtekintése">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <div class="dropdown">
                                            <button class="btn btn-outline-secondary dropdown-toggle btn-sm" type="button"
                                                    id="actionsDropdown_@order.OrderId"
                                                    data-bs-toggle="dropdown"
                                                    aria-expanded="false"
                                                    data-bs-toggle="tooltip"
                                                    data-bs-placement="top"
                                                    data-bs-title="További műveletek">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@order.OrderId">
                                                <li>
                                                    <a class="dropdown-item" href="#"
                                                       data-bs-toggle="modal"
                                                       data-bs-target="#editOrderModal_@order.OrderId">
                                                        <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item copy-order-btn" href="#"
                                                       data-order-id="@order.OrderId">
                                                        <i class="bi bi-copy me-2"></i>Másolás
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item send-email-btn" href="#"
                                                       data-order-id="@order.OrderId">
                                                        <i class="bi bi-envelope me-2"></i>Küldés emailben
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item text-danger" href="#"
                                                       data-bs-toggle="modal"
                                                       data-bs-target="#deleteOrderModal_@order.OrderId"
                                                       data-order-id="@order.OrderId">
                                                        <i class="bi bi-trash me-2"></i>Törlés
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="alert alert-warning" role="alert">
                                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                                    {
                                        @:Nincs találat a "@Model.SearchTerm" keresésre az @Model.CurrentPage. oldalon.
                                    }
                                    else if (Model.TotalRecords > 0)
                                    {
                                        @:Nincs rendelés az @Model.CurrentPage. oldalon, de @Model.TotalRecords rendelés létezik. Próbáljon másik oldalt vagy szűrőt.
                                    }
                                    else
                                    {
                                        @:Nincs rendelés. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Első rendelés létrehozása">Hozza létre az elsőt?</button>
                                    }
                                    <div class="mt-2 small text-muted">
                                        Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, DistinctOrderIdCount=@Model.DistinctOrderIdCount, SearchTerm="@Model.SearchTerm"
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Footer -->
        @await Html.PartialAsync("_PaginationFooter", new PaginationViewModel
        {
            CurrentPage = Model.CurrentPage,
            TotalPages = Model.TotalPages,
            PageSize = Model.PageSize,
            SearchTerm = Model.SearchTerm,
            PageRoute = "./Index",
            EntityName = "Orders"
        })
    </div>

    <!-- Modals -->
    @await Html.PartialAsync("_Modals")

    <!-- Anti-Forgery Form -->
    <form id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>

    <!-- Toast Container -->
    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
</div>

<!-- Dependencies -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Filter/Sort Dropdown Logic
            document.querySelectorAll('.dropdown-menu [data-filter]').forEach(item => {
                item.addEventListener('click', function (e) {
                    e.preventDefault();
                    const filter = this.getAttribute('data-filter');
                    const sort = this.getAttribute('data-sort');
                    let searchTerm = '@Model.SearchTerm';
                    let pageSize = '@Model.PageSize';
                    let url = '/CRM/Orders?pageSize=' + pageSize;
                    if (filter !== 'all') {
                        url += '&StatusFilter=' + encodeURIComponent(filter);
                    }
                    if (sort) {
                        url += '&SortBy=' + encodeURIComponent(sort);
                    }
                    if (searchTerm) {
                        url += '&searchTerm=' + encodeURIComponent(searchTerm);
                    }
                    window.location.href = url;
                });
            });

            // Copy Order Button Logic
            document.querySelectorAll('.copy-order-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-order-id');
                    if (!orderId) {
                        console.error('Order ID not found');
                        return;
                    }
                    // Placeholder for copy functionality
                    console.log('Copy order with ID:', orderId);
                    // Note: Actual copy logic should be implemented in orders.js
                });
            });

            // Send Email Button Logic
            document.querySelectorAll('.send-email-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-order-id');
                    if (!orderId) {
                        console.error('Order ID not found');
                        return;
                    }
                    // Placeholder for send email functionality
                    console.log('Send email for order with ID:', orderId);
                    // Note: Actual send email logic should be implemented in orders.js
                });
            });
        });
    </script>

    <style>
        /* Badge styling */
        .badge {
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 700;
            line-height: 1;
            color: #fff;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }
    </style>
}