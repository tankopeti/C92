@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Cloud9_2.Models
@using Cloud9_2.Data
@using Microsoft.AspNetCore.Antiforgery
@model Cloud9_2.Pages.CRM.Orders.IndexModel
@using System.Globalization

@functions {
    public string GetAntiForgeryToken()
    {
        var antiForgery = PageContext.HttpContext.RequestServices.GetService<IAntiforgery>();
        var tokenSet = antiForgery?.GetAndStoreTokens(PageContext.HttpContext);
        return tokenSet?.RequestToken ?? string.Empty;
    }
}
@{
    ViewData["Title"] = "Rendelések";
    Layout = "_Layout";
}
@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <!-- Breadcrumb Navigation -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Rendelések</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Orders.Count of @Model.DistinctOrderIdCount rendelés@(Model.DistinctOrderIdCount != 1 ? "ek" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>

        <!-- Header with Buttons and Search -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="newOrderButton" class="btn-new" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Új rendelés létrehozása">
                    <i class="bi bi-plus-circle me-1"></i>Új rendelés
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés rendelések között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
                <!-- Filter/Sort Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderDate">Összes rendelés (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderId">Rendezés: Rendelés ID (Csökkenő)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=OrderNumber">Rendelésszám</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=PartnerName">Partner neve</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=TotalAmount">Összesen</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Card Grid Header -->
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column order-number-col">Rendelésszám</div>
                <div class="card-grid-column order-partner-col">Partner</div>
                <div class="card-grid-column order-date-col">Dátum</div>
                <div class="card-grid-column order-status-col">Státusz</div>
                <div class="card-grid-column order-amount-col">Rendelés összege</div>
                <div class="card-grid-column actions-column">Műveletek</div>
            </div>
        </div>
    </div>

    <!-- Card Grid Body -->
    <div class="scrollable-card-container">
        <div class="card-grid-body">
            @if (Model.Orders.Any())
            {
                @foreach (var order in Model.Orders)
                {
                    <div class="card partner-card mb-3" data-order-id="@order.OrderId">
                        <div class="card-body p-2">
                            <div class="card-grid-row align-items-center">
                                <div class="card-grid-cell order-number-col">
                                    <div class="order-info">
                                        <div class="fw-bold">@order.OrderNumber</div>
                                    </div>
                                </div>
                                <div class="card-grid-cell order-partner-col">
                                    <div class="order-partner text-muted small">
                                        <i class="bi bi-person me-1"></i>@order.Partner?.Name
                                    </div>
                                </div>
                                <div class="card-grid-cell order-date-col">
                                    <div class="order-date text-muted small">
                                        <i class="bi bi-calendar me-1"></i>@(order.OrderDate?.ToString("yyyy-MM-dd"))
                                    </div>
                                </div>
                                <div class="card-grid-cell order-status-col">
                                    @{
                                        var badgeClass = "badge bg-secondary";
                                        if (order.Status == "Pending") badgeClass = "badge badge-pending";
                                        else if (order.Status == "Confirmed") badgeClass = "badge badge-confirmed";
                                        else if (order.Status == "Shipped") badgeClass = "badge badge-shipped";
                                        else if (order.Status == "Cancelled") badgeClass = "badge badge-cancelled";
                                    }
                                    <span class="@badgeClass">@Model.StatusDisplayNames[order.Status]</span>
                                </div>
                                <div class="card-grid-cell order-amount-col">
                                    <div class="order-amount text-muted small">
                                        <i class="bi bi-currency-dollar me-1"></i>@(order.TotalAmount?.ToString("C", CultureInfo.GetCultureInfo("hu-HU")))
                                    </div>
                                </div>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-info btn-sm view-order-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewOrderModal_@order.OrderId"
                                            aria-label="Rendelés részleteinek megtekintése">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                id="actionsDropdown_@order.OrderId"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false"
                                                aria-label="További műveletek">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@order.OrderId">
                                            <li>
                                                <a class="dropdown-item" href="#"
                                                   data-bs-toggle="modal"
                                                   data-bs-target="#editOrderModal_@order.OrderId">
                                                    <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                                </a>
                                            </li>
                                            <li><a class="dropdown-item" href="#" onclick="copyOrder(@order.OrderId)"><i class="bi bi-copy me-2"></i>Másolás</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteOrderModal_@order.OrderId"><i class="bi bi-trash me-2"></i>Törlés</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Order Modal -->
                    <div class="modal fade" id="editOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="editOrderModalLabel_@order.OrderId" aria-hidden="true">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editOrderModalLabel_@order.OrderId">Rendelés szerkesztése: @(order.OrderNumber ?? "N/A")</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- Tabs -->
                                    <ul class="nav nav-tabs" id="orderTabs_@order.OrderId" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="base-info-tab_@order.OrderId" data-bs-toggle="tab" data-bs-target="#base-info_@order.OrderId" type="button" role="tab" aria-controls="base-info_@order.OrderId" aria-selected="true">Alapadatok</button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="items-tab_@order.OrderId" data-bs-toggle="tab" data-bs-target="#items_@order.OrderId" type="button" role="tab" aria-controls="items_@order.OrderId" aria-selected="false">Tételek</button>
                                        </li>
                                    </ul>

                                    <!-- Tab Content -->
                                    <div class="tab-content" id="orderTabContent_@order.OrderId">
                                        <!-- Base Info Tab -->
                                        <div class="tab-pane fade show active" id="base-info_@order.OrderId" role="tabpanel" aria-labelledby="base-info-tab_@order.OrderId">
                                            <form id="orderBaseInfoForm_@order.OrderId">
                                                @Html.AntiForgeryToken()
                                                <table class="table table-sm mt-3">
                                                    <tbody>
                                                        <tr>
                                                            <th>Rendelésszám</th>
                                                            <td><input type="text" class="form-control" name="OrderNumber" value="@order.OrderNumber" readonly></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Rendelés dátuma</th>
                                                            <td><input type="date" class="form-control" name="OrderDate" value="@(order.OrderDate?.ToString("yyyy-MM-dd"))" required></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Határidő</th>
                                                            <td><input type="date" class="form-control" name="Deadline" value="@(order.Deadline?.ToString("yyyy-MM-dd"))"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Partner</th>
                                                        <td>
                                                                <select name="PartnerId" class="form-select tom-select" data-selected-id="@order.PartnerId" data-selected-text="@(order.Partner?.Name ?? "")" autocomplete="off">
                                                                    <option value=""></option>
                                                                </select>
                                                        </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Telephely</th>
                                                        <td>
                                                            <select name="SiteId" class="form-select tom-select" data-selected-id="@order.SiteId" data-selected-text="@(order.Site?.Address ?? "")" autocomplete="off">
                                                                <option value=""></option>
                                                            </select>
                                                        </td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <th>Pénznem</th>
                                                        <td>
                                                            <select name="CurrencyId" class="form-select tom-select" data-selected-id="@order.CurrencyId" data-selected-text="@(order.Currency?.CurrencyName ?? "")" autocomplete="off">
                                                                <option value="" disabled selected>-- Válasszon pénznemet --</option>
                                                            </select>
                                                        </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Státusz</th>
                                                            <td>
                                                                <select class="form-select" name="Status" required>
                                                                    @foreach (var status in Model.StatusDisplayNames)
                                                                    {
                                                                        <option value="@status.Key" selected="@(order.Status == status.Key)">@status.Value</option>
                                                                    }
                                                                </select>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Értékesítő</th>
                                                            <td><input type="text" class="form-control" name="SalesPerson" value="@order.SalesPerson"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Szállítási dátum</th>
                                                            <td><input type="date" class="form-control" name="DeliveryDate" value="@(order.DeliveryDate?.ToString("yyyy-MM-dd"))"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Cégnév</th>
                                                            <td><input type="text" class="form-control" name="CompanyName" value="@order.CompanyName"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Tárgy</th>
                                                            <td><input type="text" class="form-control" name="Subject" value="@order.Subject"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Fizetési feltételek</th>
                                                            <td><input type="text" class="form-control" name="PaymentTerms" value="@order.PaymentTerms"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Szállítási mód</th>
                                                            <td><input type="text" class="form-control" name="ShippingMethod" value="@order.ShippingMethod"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Rendelés típusa</th>
                                                            <td><input type="text" class="form-control" name="OrderType" value="@order.OrderType"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Hivatkozási szám</th>
                                                            <td><input type="text" class="form-control" name="ReferenceNumber" value="@order.ReferenceNumber"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Árajánlat</th>
                                                        <td>
                                                            <select name="QuoteId" class="form-select tom-select" data-selected-id="@order.QuoteId" data-selected-text="@(order.Quote?.QuoteNumber ?? "")" autocomplete="off">
                                                                <option value=""></option>
                                                            </select>
                                                        </td>
                                                        </tr>
                                                        <tr>
                                                            <th>Kedvezmény (%)</th>
                                                            <td><input type="number" step="0.01" min="0" max="100" class="form-control" name="DiscountPercentage" value="@(order.DiscountPercentage?.ToString("F2", CultureInfo.InvariantCulture))"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Kedvezmény összege</th>
                                                            <td><input type="number" step="0.01" min="0" class="form-control" name="DiscountAmount" value="@(order.DiscountAmount?.ToString("F2", CultureInfo.InvariantCulture))"></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Összesen</th>
                                                            <td><input type="number" step="0.01" class="form-control" name="TotalAmount" value="@(order.TotalAmount?.ToString("F2", CultureInfo.InvariantCulture))" required></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Leírás</th>
                                                            <td><textarea class="form-control" name="Description" rows="4" maxlength="1000">@order.Description</textarea></td>
                                                        </tr>
                                                        <tr>
                                                            <th>Részletes leírás</th>
                                                            <td><textarea class="form-control" name="DetailedDescription" rows="6" maxlength="2000">@order.DetailedDescription</textarea></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </form>
                                        </div>

                                        <!-- Items Tab (unchanged) -->
                                        <div class="tab-pane fade" id="items_@order.OrderId" role="tabpanel" aria-labelledby="items-tab_@order.OrderId">
                                            <button type="button" class="btn btn-primary mb-3 add-item-row" data-order-id="@order.OrderId">Tétel hozzáadása</button>
                                            <form id="orderItemsForm_@order.OrderId" data-order-id="@order.OrderId">
                                                <input type="hidden" name="__RequestVerificationToken" value="@GetAntiForgeryToken()" />
                                                <table class="table table-sm table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 30%;">Termék</th>
                                                            <th style="width: 15%;">Mennyiség</th>
                                                            <th style="width: 15%;">Egységár</th>
                                                            <th style="width: 20%;">Kedvezmény</th>
                                                            <th style="width: 15%;">Összesen</th>
                                                            <th style="width: 5%;"></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="items-tbody_@order.OrderId">
                                                        @foreach (var item in order.OrderItems)
                                                        {
                                                            <script>console.log('Server-side item ID:', '@item.OrderItemId', 'ProductId:', '@item.ProductId');</script>
                                                            <tr class="order-item-row" data-item-id="@item.OrderItemId">
                                                                <td>
                                                                    <select name="orderItems[@item.OrderItemId].ProductId" class="form-select tom-select-product" data-selected-id="@item.ProductId" data-selected-text="@(item.Product?.Name ?? "")" autocomplete="off" required>
                                                                        <option value="" disabled selected>-- Válasszon terméket --</option>
                                                                    </select>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="orderItems[@item.OrderItemId].Quantity" class="form-control form-control-sm quantity" value="@item.Quantity.ToString(CultureInfo.InvariantCulture)" min="0" step="1" required>
                                                                </td>
                                                                <td>
                                                                    <input type="number" name="orderItems[@item.OrderItemId].UnitPrice" class="form-control form-control-sm unit-price" value="@item.UnitPrice.ToString(CultureInfo.InvariantCulture)" min="0" step="0.01" required>
                                                                </td>
                                                                <td>
                                                                    <div class="input-group input-group-sm">
                                                                        <input type="text" name="@(item.DiscountPercentage != null ? $"orderItems[{item.OrderItemId}].DiscountPercentage" : $"orderItems[{item.OrderItemId}].DiscountAmount")" class="form-control discount-value" value="@(item.DiscountPercentage != null ? item.DiscountPercentage : item.DiscountAmount)" placeholder="pl. 10">
                                                                        <select class="form-select discount-type" data-discount-name-prefix="orderItems[@item.OrderItemId]">
                                                                            @if (item.DiscountPercentage != null)
                                                                            {
                                                                                <option value="Percentage" selected>%</option>
                                                                                <option value="Amount">Összeg</option>
                                                                            }
                                                                            else
                                                                            {
                                                                                <option value="Percentage">%</option>
                                                                                <option value="Amount" selected>Összeg</option>
                                                                            }
                                                                        </select>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <span class="total-price">@((item.Quantity * item.UnitPrice).ToString("F2", CultureInfo.InvariantCulture))</span>
                                                                    <input type="hidden" name="orderItems[@item.OrderItemId].Description" class="item-description" value="@(item.Description ?? "")">
                                                                </td>
                                                                <td>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="@item.OrderItemId"><i class="bi bi-pencil"></i></button>
                                                                    <button type="button" class="btn btn-danger btn-sm remove-item-row"><i class="bi bi-trash"></i></button>
                                                                </td>
                                                            </tr>
                                                            <tr class="description-row" data-item-id="@item.OrderItemId" style="display: none;">
                                                                <td colspan="6">
                                                                    <div class="mb-2">
                                                                        <label class="form-label">Leírás (max 200 karakter)</label>
                                                                        <textarea name="orderItems[@item.OrderItemId].DescriptionInput" class="form-control form-control-sm item-description" maxlength="200" rows="2">@(item.Description ?? "")</textarea>
                                                                        <div class="form-text">Karakterek: <span class="char-count">@((item.Description?.Length ?? 0))</span>/200</div>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                        <!-- Order Total Row -->
                                                        <tr class="order-total-row">
                                                            <td colspan="3"></td>
                                                            <td><strong>Összesen:</strong></td>
                                                            <td><span class="order-total-amount">0.00</span></td>
                                                            <td></td>
                                                        </tr>
                                                        <tr class="order-discount-row">
                                                            <td colspan="3"></td>
                                                            <td><strong>Kedvezményes ár:</strong></td>
                                                            <td><span class="order-final-total">0.00</span></td>
                                                            <td></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                                    <button type="button" class="btn btn-primary save-order" data-order-id="@order.OrderId">Mentés</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- View Order Modal -->
                    <div class="modal fade" id="viewOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="viewOrderModalLabel_@order.OrderId" aria-hidden="true">
                        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="viewOrderModalLabel_@order.OrderId">Részletek: @(order.OrderNumber ?? "Nincs megadva")</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                                </div>
                                <div class="modal-body">
                                    <table class="table table-sm">
                                        <tbody>
                                            <tr>
                                                <th>Rendelésszám</th>
                                                <td class="order-number">@(order.OrderNumber ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Rendelés azonosító</th>
                                                <td>@order.OrderId</td>
                                            </tr>
                                            <tr>
                                                <th>Rendelés dátuma</th>
                                                <td>@(order.OrderDate?.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture) ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Határidő</th>
                                                <td>@(order.Deadline?.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture) ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Szállítási dátum</th>
                                                <td>@(order.DeliveryDate?.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture) ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Partner</th>
                                                <td>@(order.Partner?.Name ?? "Nincs partner megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Pénznem</th>
                                                <td>@(order.Currency?.CurrencyName ?? "Nincs pénznem megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Telephely</th>
                                                <td>@(order.SiteId.HasValue ? order.SiteId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Árajánlat azonosító</th>
                                                <td>@(order.QuoteId.HasValue ? order.QuoteId.ToString() : "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Hivatkozási szám</th>
                                                <td>@(string.IsNullOrEmpty(order.ReferenceNumber) ? "Nincs megadva" : order.ReferenceNumber)</td>
                                            </tr>
                                            <tr>
                                                <th>Rendelés típusa</th>
                                                <td>@(string.IsNullOrEmpty(order.OrderType) ? "Nincs megadva" : order.OrderType)</td>
                                            </tr>
                                            <tr>
                                                <th>Cégnév</th>
                                                <td>@(string.IsNullOrEmpty(order.CompanyName) ? "Nincs megadva" : order.CompanyName)</td>
                                            </tr>
                                            <tr>
                                                <th>Státusz</th>
                                                <td>@(Model.StatusDisplayNames.ContainsKey(order.Status) ? Model.StatusDisplayNames[order.Status] : "Ismeretlen")</td>
                                            </tr>
                                            <tr>
                                                <th>Összesen</th>
                                                <td>@(order.TotalAmount?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00") Ft</td>
                                            </tr>
                                            <tr>
                                                <th>Kedvezmény százaléka</th>
                                                <td>@(order.DiscountPercentage.HasValue ? $"{order.DiscountPercentage.Value:N2}%" : "0,00%")</td>
                                            </tr>
                                            <tr>
                                                <th>Kedvezmény összege</th>
                                                <td>@(order.DiscountAmount?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")) ?? "0,00") Ft</td>
                                            </tr>
                                            <tr>
                                                <th>Fizetési feltételek</th>
                                                <td>@(string.IsNullOrEmpty(order.PaymentTerms) ? "Nincs megadva" : order.PaymentTerms)</td>
                                            </tr>
                                            <tr>
                                                <th>Szállítási mód</th>
                                                <td>@(string.IsNullOrEmpty(order.ShippingMethod) ? "Nincs megadva" : order.ShippingMethod)</td>
                                            </tr>
                                            <tr>
                                                <th>Értékesítő</th>
                                                <td>@(string.IsNullOrEmpty(order.SalesPerson) ? "Nincs megadva" : order.SalesPerson)</td>
                                            </tr>
                                            <tr>
                                                <th>Tárgy</th>
                                                <td>@(string.IsNullOrEmpty(order.Subject) ? "Nincs megadva" : order.Subject)</td>
                                            </tr>
                                            <tr>
                                                <th>Leírás</th>
                                                <td>@(string.IsNullOrEmpty(order.Description) ? "Nincs megadva" : order.Description)</td>
                                            </tr>
                                            <tr>
                                                <th>Részletes leírás</th>
                                                <td>@(string.IsNullOrEmpty(order.DetailedDescription) ? "Nincs megadva" : order.DetailedDescription)</td>
                                            </tr>
                                            <tr>
                                                <th>Létrehozta</th>
                                                <td>@(string.IsNullOrEmpty(order.CreatedBy) ? "Nincs megadva" : order.CreatedBy)</td>
                                            </tr>
                                            <tr>
                                                <th>Létrehozás dátuma</th>
                                                <td>@(order.CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture) ?? "Nincs megadva")</td>
                                            </tr>
                                            <tr>
                                                <th>Módosította</th>
                                                <td>@(string.IsNullOrEmpty(order.ModifiedBy) ? "Nincs megadva" : order.ModifiedBy)</td>
                                            </tr>
                                            <tr>
                                                <th>Módosítás dátuma</th>
                                                <td>@(order.ModifiedDate?.ToString("yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture) ?? "Nincs megadva")</td>
                                            </tr>
                                        </tbody>
                                    </table>

                                    <h5 class="mt-4">Tételek</h5>
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Termék ID</th>
                                                <th>Termék</th>
                                                <th>Leírás</th>
                                                <th>Mennyiség</th>
                                                <th>Egységár</th>
                                                <th>Kedvezmény</th>
                                                <th>Összesen</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (order.OrderItems != null && order.OrderItems.Any())
                                            {
                                                @foreach (var orderItem in order.OrderItems)
                                                {
                                                    <tr data-item-id="@orderItem.OrderItemId">
                                                        <td>@(orderItem.ProductId > 0 ? orderItem.ProductId.ToString() : "Nincs megadva")</td>
                                                        <td>@(orderItem.Product?.Name ?? "Ismeretlen termék")</td>
                                                        <td>@(string.IsNullOrEmpty(orderItem.Description) ? "Nincs megadva" : orderItem.Description)</td>
                                                        <td>@(orderItem.Quantity > 0 ? orderItem.Quantity.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")) : "0,00")</td>
                                                        <td>@orderItem.UnitPrice.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU")) Ft</td>
                                                        <td>
                                                            @(orderItem.DiscountPercentage.HasValue && orderItem.DiscountPercentage.Value > 0
                                                                ? $"{orderItem.DiscountPercentage.Value:N2}%"
                                                                : orderItem.DiscountAmount.HasValue && orderItem.DiscountAmount.Value > 0
                                                                    ? $"{orderItem.DiscountAmount.Value:N2} Ft"
                                                                    : "0,00")
                                                        </td>
                                                        <td>
                                                            @((orderItem.Quantity * orderItem.UnitPrice - (orderItem.DiscountAmount ?? (orderItem.DiscountPercentage.HasValue ? (orderItem.Quantity * orderItem.UnitPrice * orderItem.DiscountPercentage.Value / 100) : 0))).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("hu-HU"))) Ft
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center">Nincsenek tételek.</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Bezárás">Bezárás</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Order Modal -->
                    <div class="modal fade" id="deleteOrderModal_@order.OrderId" tabindex="-1" aria-labelledby="deleteOrderModalLabel_@order.OrderId" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deleteOrderModalLabel_@order.OrderId">Rendelés törlése</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Bezárás"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="deleteOrderForm_@order.OrderId" method="post">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="orderId" value="@order.OrderId" autocomplete="off" />
                                        <p>Biztosan törölni szeretné a következő rendelést: <strong>@order.OrderNumber</strong>?</p>
                                        <div id="deleteWarning_@order.OrderId" class="alert alert-warning" style="display: none;">
                                            Ez a rendelés nem törölhető, mert kapcsolódó rekordok léteznek.
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Mégse">Mégse</button>
                                    <button type="button" class="btn btn-danger confirm-delete-order" data-order-id="@order.OrderId" aria-label="Rendelés törlése">Törlés</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning text-center mt-3" role="alert">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        @:No orders found matching "@Model.SearchTerm" on page @Model.CurrentPage.
                    }
                    else if (Model.TotalRecords > 0)
                    {
                        @:No orders found on page @Model.CurrentPage, but @Model.TotalRecords orders exist. Try changing the page or adjusting filters.
                    }
                    else
                    {
                        @:No orders found. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#newOrderModal" aria-label="Első rendelés létrehozása">Create the first one?</button>
                    }
                    <!-- Debug Info -->
                    <div class="mt-2 small text-muted">
                        Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, DistinctOrderIdCount=@Model.DistinctOrderIdCount, SearchTerm="@Model.SearchTerm"
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Pagination Footer -->
    @await Html.PartialAsync("_PaginationFooter", new Cloud9_2.Models.PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Orders"
    })

    <div class="modal fade" id="newOrderModal" tabindex="-1" aria-labelledby="newOrderModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newOrderModalLabel">Új rendelés létrehozása</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Tabs -->
                    <ul class="nav nav-tabs" id="orderTabs_new" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="base-info-tab_new" data-bs-toggle="tab" data-bs-target="#base-info_new" type="button" role="tab" aria-controls="base-info_new" aria-selected="true">Alapadatok</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="items-tab_new" data-bs-toggle="tab" data-bs-target="#items_new" type="button" role="tab" aria-controls="items_new" aria-selected="false">Tételek</button>
                        </li>
                    </ul>
                    <!-- Tab Content -->
                    <div class="tab-content" id="orderTabContent_new">
                        <!-- Base Info Tab -->
                        <div class="tab-pane fade show active" id="base-info_new" role="tabpanel" aria-labelledby="base-info-tab_new">
                            <form id="orderBaseInfoForm_new">
                                <!-- Hidden Fields -->
                                <input type="hidden" name="createdBy" value="System">
                                <input type="hidden" name="createdDate" value="@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss")">
                                <input type="hidden" name="modifiedBy" value="System">
                                <input type="hidden" name="modifiedDate" value="@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss")">
                                <!-- General Section -->
                                <h6 class="mt-3">Általános adatok</h6>
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th>Rendelésszám</th>
                                            <td><input type="text" class="form-control" name="orderNumber" value="@Model.NextOrderNumber" placeholder="Automatikusan generálódik" readonly></td>
                                        </tr>
                                        <tr>
                                            <th>Rendelés dátuma</th>
                                            <td><input type="date" class="form-control" name="orderDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" required></td>
                                        </tr>
                                        <tr>
                                            <th>Határidő</th>
                                            <td><input type="date" class="form-control" name="deadline"></td>
                                        </tr>
                                        <tr>
                                            <th>Szállítási dátum</th>
                                            <td><input type="date" class="form-control" name="deliveryDate"></td>
                                        </tr>
                                        <tr>
                                            <th>Referenciaszám</th>
                                            <td><input type="text" class="form-control" name="referenceNumber" maxlength="100"></td>
                                        </tr>
                                        <tr>
                                            <th>Rendelés típusa</th>
                                            <td><input type="text" class="form-control" name="orderType" maxlength="50"></td>
                                        </tr>
                                    </tbody>
                                </table>
                                <!-- Partner Section -->
                                <h6>Partner adatok</h6>
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th>Partner</th>
                                            <td>
                                                <select name="partnerId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                    <option value="" disabled selected>-- Válasszon partnert --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Partner telephely</th>
                                            <td>
                                                <select name="siteId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off">
                                                    <option value="" disabled selected>-- Válasszon telephelyet --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Cég neve</th>
                                            <td><input type="text" class="form-control" name="companyName" maxlength="100"></td>
                                        </tr>
                                    </tbody>
                                </table>
                                <!-- Financial Section -->
                                <h6>Pénzügyi adatok</h6>
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th>Pénznem</th>
                                            <td>
                                                <select name="currencyId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off" required>
                                                    <option value="" disabled selected>-- Válasszon pénznemet --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Összesen</th>
                                            <td><input type="number" step="0.01" class="form-control" name="totalAmount" value="" required></td>
                                        </tr>
                                        <tr>
                                            <th>Kedvezmény %</th>
                                            <td><input type="number" step="0.1" min="0" max="100" class="form-control" name="discountPercentage"></td>
                                        </tr>
                                        <tr>
                                            <th>Kedvezmény összeg</th>
                                            <td><input type="number" step="0.01" class="form-control" name="discountAmount"></td>
                                        </tr>
                                        <tr>
                                            <th>Fizetési feltételek</th>
                                            <td><input type="text" class="form-control" name="paymentTerms" maxlength="100"></td>
                                        </tr>
                                        <tr>
                                            <th>Szállítási mód</th>
                                            <td><input type="text" class="form-control" name="shippingMethod" maxlength="100"></td>
                                        </tr>
                                    </tbody>
                                </table>
                                <!-- Additional Info Section -->
                                <h6>További adatok</h6>
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th>Státusz</th>
                                            <td>
                                                <select class="form-select" name="status" required>
                                                    @foreach (var status in Model.StatusDisplayNames)
                                                    {
                                                        <option value="@status.Key" selected="@(status.Key == "Pending" ? "selected" : "")">@status.Value</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Értékesítő</th>
                                            <td><input type="text" class="form-control" name="salesPerson" maxlength="100"></td>
                                        </tr>
                                        <tr>
                                            <th>Árajánlat azonosító</th>
                                            <td>
                                                <select name="quoteId" class="form-select tom-select" data-selected-id="" data-selected-text="" autocomplete="off">
                                                    <option value="" disabled selected>-- Válasszon árajánlatot --</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Tárgy</th>
                                            <td><input type="text" class="form-control" name="subject" maxlength="200"></td>
                                        </tr>
                                        <tr>
                                            <th>Leírás</th>
                                            <td><textarea class="form-control" name="description" maxlength="500" rows="3"></textarea></td>
                                        </tr>
                                        <tr>
                                            <th>Részletes leírás</th>
                                            <td><textarea class="form-control" name="detailedDescription" rows="5"></textarea></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </form>
                        </div>
                        <!-- Items Tab -->
                        <div class="tab-pane fade" id="items_new" role="tabpanel" aria-labelledby="items-tab_new">
                            <button type="button" class="btn btn-primary mb-3 add-item-row" data-order-id="new">Tétel hozzáadása</button>
                            <form id="orderItemsForm_new" data-order-id="new">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr>
                                            <th style="width: 30%;">Termék</th>
                                            <th style="width: 15%;">Mennyiség</th>
                                            <th style="width: 15%;">Egységár</th>
                                            <th style="width: 20%;">Kedvezmény</th>
                                            <th style="width: 15%;">Összesen</th>
                                            <th style="width: 5%;"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="items-tbody_new">
                                        <!-- Order Total Row -->
                                        <tr class="order-total-row">
                                            <td colspan="3"></td>
                                            <td><strong>Összesen:</strong></td>
                                            <td><span class="order-total-amount">0.00</span></td>
                                            <td></td>
                                        </tr>
                                        <tr class="order-discount-row">
                                            <td colspan="3"></td>
                                            <td><strong>Kedvezményes ár:</strong></td>
                                            <td><span class="order-final-total">0.00</span></td>
                                            <td></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezár</button>
                    <button type="button" class="btn btn-primary save-order" data-order-id="new">Mentés</button>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
    
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<!-- Tom Select Dependencies -->
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    console.log('Main script loaded');

    // --- Filter/Sort Dropdown Logic ---
    const filterItems = document.querySelectorAll('.dropdown-menu [data-filter]');
    console.log('Found filter items:', filterItems.length);

    filterItems.forEach(item => {
        item.addEventListener('click', function (e) {
            e.preventDefault();
            const filter = this.getAttribute('data-filter');
            const sort = this.getAttribute('data-sort');
            console.log('Clicked filter/sort item:', { filter, sort });

            let form = document.querySelector('form[asp-page="./Index"]') ||
                       document.querySelector('form[action="/CRM/Orders"]') ||
                       document.querySelector('form[action="/CRM/Orders/Index"]');

            if (form) {
                console.log('Form found, submitting:', { filter, sort });
                form.querySelectorAll('input[name="StatusFilter"], input[name="SortBy"]').forEach(input => input.remove());

                const statusInput = document.createElement('input');
                statusInput.type = 'hidden';
                statusInput.name = 'StatusFilter';
                statusInput.value = filter === 'all' ? '' : filter;
                form.appendChild(statusInput);

                const sortInput = document.createElement('input');
                sortInput.type = 'hidden';
                sortInput.name = 'SortBy';
                sortInput.value = sort;
                form.appendChild(sortInput);

                form.submit();
            } else {
                console.error('Form not found. Available forms:', document.querySelectorAll('form').length);
                document.querySelectorAll('form').forEach(f => console.log('Form action:', f.getAttribute('action')));
            }
        });
    });

    // --- Status Mapping ---
    const statusMapping = {
        'Folyamatban': 'InProgress',
        'Felfüggesztve': 'Suspended',
        'Jóváhagyásra_vár': 'PendingApproval',
        'Jóváhagyva': 'Approved',
        'Kiküldve': 'Sent',
        'Elfogadva': 'Accepted',
        'Megrendelve': 'Ordered',
        'Teljesítve': 'Fulfilled',
        'Lezárva': 'Closed',
        'InProgress': 'InProgress',
        'Accepted': 'Accepted',
        'Rejected': 'Rejected',
        'Draft': 'Draft'
    };

    // --- Utility Functions ---
    function showAlert(message, type = 'danger') {
        console.log('Displaying alert:', { message, type });
        const alertContainer = document.getElementById('alert-container');
        const alertMessage = document.getElementById('alert-message');
        if (alertContainer && alertMessage) {
            alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
            alertMessage.textContent = message;
            alertContainer.style.display = 'block';
            setTimeout(() => {
                alertContainer.classList.remove('show');
                setTimeout(() => {
                    alertContainer.style.display = 'none';
                }, 150);
            }, 5000);
        } else {
            console.error('Alert container not found');
            alert(message);
        }
    }
    function calculateTotalPrice(row, forceRecalculate = false) {
        try {
            console.log('Calculating total price for row:', row.dataset.itemId);
            const quantityInput = row.querySelector('.quantity');
            const unitPriceInput = row.querySelector('.unit-price');
            const discountValueInput = row.querySelector('.discount-value');
            const discountTypeSelect = row.querySelector('.discount-type');
            const totalPriceSpan = row.querySelector('.total-price');

            if (!quantityInput || !unitPriceInput || !discountValueInput || !discountTypeSelect || !totalPriceSpan) {
                console.error('Missing elements in row:', row.dataset.itemId);
                return 0;
            }

            if (forceRecalculate || row.dataset.initialized !== 'true') {
                const quantity = parseFloat(quantityInput.value) || 0;
                const unitPrice = parseFloat(unitPriceInput.value) || 0;
                const discountValue = parseFloat(discountValueInput.value) || 0;
                const discountType = discountTypeSelect.value;

                let total = quantity * unitPrice;
                let discount = discountType === 'Percentage' ? total * (discountValue / 100) : discountValue;
                total = Math.max(total - discount, 0);
                totalPriceSpan.textContent = total.toFixed(2);
                row.dataset.initialized = 'true';
                console.log('Total price set to:', total.toFixed(2), 'for item:', row.dataset.itemId);
                return total;
            }
            return parseFloat(totalPriceSpan.textContent) || 0;
        } catch (error) {
            console.error('Error calculating total price:', error);
            return 0;
        }
    }

    function calculateOrderTotals(orderId) {
        try {
            const tbody = document.querySelector(`#items-tbody_${orderId}`);
            const totalAmountSpan = tbody.querySelector('.order-total-amount');
            const finalTotalSpan = tbody.querySelector('.order-final-total');

            if (!tbody || !totalAmountSpan || !finalTotalSpan) {
                console.error('Missing order total elements for orderId:', orderId);
                return 0;
            }

            const rows = tbody.querySelectorAll('.order-item-row');
            console.log('Found rows for order totals:', rows.length, 'IDs:', Array.from(rows).map(r => r.dataset.itemId));

            let totalAmount = 0;
            rows.forEach(row => {
                const price = parseFloat(row.querySelector('.total-price').textContent) || 0;
                console.log('Row price:', price, 'for item:', row.dataset.itemId);
                totalAmount += price;
            });

            totalAmountSpan.textContent = totalAmount.toFixed(2);
            finalTotalSpan.textContent = totalAmount.toFixed(2);

            // Update totalAmount input
            const totalAmountInput = document.querySelector(`#orderBaseInfoForm_${orderId} input[name="totalAmount"]`);
            if (totalAmountInput) {
                totalAmountInput.value = totalAmount.toFixed(2);
            }

            console.log('Total Amount:', totalAmount.toFixed(2), 'Final Total:', totalAmount.toFixed(2));
            return totalAmount;
        } catch (error) {
            console.error('Error calculating order totals:', error);
            return 0;
        }
    }

    function updateDiscountInputName(row) {
        const discountInput = row.querySelector('.discount-value');
        const discountType = row.querySelector('.discount-type');
        if (discountInput && discountType) {
            const prefix = discountType.dataset.discountNamePrefix;
            discountInput.name = `${prefix}.${discountType.value === 'Percentage' ? 'DiscountPercentage' : 'DiscountAmount'}`;
        }
    }

    function initializeRowCalculations(row) {
        const inputs = row.querySelectorAll('.quantity, .unit-price, .discount-value, .discount-type');
        console.log('Initializing row:', row.dataset.itemId, 'Found inputs:', inputs.length);
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                console.log('Input changed:', input.name, 'Value:', input.value);
                updateDiscountInputName(row);
                calculateTotalPrice(row, true);
                calculateOrderTotals(row.closest('tbody').id.replace('items-tbody_', ''));
            });
        });
        updateDiscountInputName(row);
        calculateTotalPrice(row);
    }

    function initializeDescriptionToggle(row) {
        const itemId = row.dataset.itemId;
        const descriptionRow = document.querySelector(`.description-row[data-item-id="${itemId}"]`);
        const editButton = row.querySelector('.edit-description');
        if (!descriptionRow || !editButton) {
            console.warn('Description row or edit button missing for item:', itemId);
            return;
        }
        const textarea = descriptionRow.querySelector('textarea.item-description');
        const charCount = descriptionRow.querySelector('.char-count');
        const hiddenInput = row.querySelector('.item-description');

        textarea.addEventListener('input', () => {
            const length = textarea.value.length;
            charCount.textContent = `${length}/200`;
            hiddenInput.value = textarea.value;
            console.log('Description updated for item:', itemId, 'Value:', textarea.value);
        });

        editButton.addEventListener('click', () => {
            const isHidden = descriptionRow.style.display === 'none';
            descriptionRow.style.display = isHidden ? 'table-row' : 'none';
            console.log('Toggled description for item:', itemId, 'Visible:', isHidden);
        });
    }

    function initializeDeleteButtons(orderId) {
        const tbody = document.querySelector(`#items-tbody_${orderId}`);
        if (!tbody) {
            console.error('Tbody not found for orderId:', orderId);
            return;
        }
        tbody.addEventListener('click', function(event) {
            if (event.target.closest('.remove-item-row')) {
                const button = event.target.closest('.remove-item-row');
                const row = button.closest('.order-item-row');
                const itemId = row.dataset.itemId;
                const descriptionRow = document.querySelector(`.description-row[data-item-id="${itemId}"]`);

                console.log('Delete clicked for item:', itemId);
                row.remove();
                if (descriptionRow) {
                    descriptionRow.remove();
                }
                calculateOrderTotals(orderId);
            }
        });
    }

    function initializeProductTomSelect(select, orderId) {
        const selectedId = select.dataset.selectedId;
        const selectedText = select.dataset.selectedText;
        console.log('Tom Select Product Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (typeof TomSelect === 'undefined') {
            console.error('TomSelect is not defined');
            return;
        }

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        const tomSelectInstance = new TomSelect(select, {
            valueField: 'id',
            labelField: 'name',
            searchField: ['name'],
            dropdownParent: 'body',
            load: function(search, callback) {
                console.log('Fetching products for search:', search);
                fetch(`/api/Product?search=${encodeURIComponent(search)}`)
                    .then(response => {
                        if (!response.ok) {
                            console.error('API error:', response.status, response.statusText);
                            return response.text().then(text => {
                                throw new Error(`HTTP error: ${response.status}, ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then(json => {
                        console.log('API response:', json);
                        if (Array.isArray(json)) {
                            callback(json);
                        } else {
                            console.error('Invalid API response format:', json);
                            callback([{ id: 0, name: 'Hiba: Érvénytelen válaszformátum' }]);
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        callback([{ id: 0, name: 'Hiba: Nem sikerült betölteni a termékeket' }]);
                    });
            },
            placeholder: '-- Válasszon terméket --',
            render: {
                option: function(data, escape) {
                    return `<div>${escape(data.name)}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.name)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            },
            items: selectedId ? [selectedId.toString()] : [],
            options: selectedId && selectedText ? [{ id: selectedId, name: selectedText }] : []
        });

        tomSelectInstance.load('');
    }

    function addItemRow(orderId) {
        const tbody = document.querySelector(`#items-tbody_${orderId}`);
        if (!tbody) {
            console.error('Items tbody not found for orderId:', orderId);
            return;
        }
        const newItemId = 'new_' + Date.now();
        console.log('Adding new item row for orderId:', orderId, 'NewItemId:', newItemId);

        const itemRow = document.createElement('tr');
        itemRow.className = 'order-item-row';
        itemRow.dataset.itemId = newItemId;
        itemRow.innerHTML = `
            <td>
                <select name="orderItems[${newItemId}].ProductId" class="form-select tom-select-product" autocomplete="off" required>
                    <option value="" disabled selected>-- Válasszon terméket --</option>
                </select>
            </td>
            <td>
                <input type="number" name="orderItems[${newItemId}].Quantity" class="form-control form-control-sm quantity" value="1" min="0" step="1" required>
            </td>
            <td>
                <input type="number" name="orderItems[${newItemId}].UnitPrice" class="form-control form-control-sm unit-price" value="0" min="0" step="0.01" required>
            </td>
            <td>
                <div class="input-group input-group-sm">
                    <input type="text" name="orderItems[${newItemId}].DiscountPercentage" class="form-control discount-value" value="0" placeholder="pl. 10">
                    <select class="form-select discount-type" data-discount-name-prefix="orderItems[${newItemId}]">
                        <option value="Percentage" selected>%</option>
                        <option value="Amount">Összeg</option>
                    </select>
                </div>
            </td>
            <td>
                <span class="total-price">0.00</span>
                <input type="hidden" name="orderItems[${newItemId}].Description" class="item-description" value="">
            </td>
            <td>
                <button type="button" class="btn btn-outline-secondary btn-sm edit-description" data-item-id="${newItemId}"><i class="bi bi-pencil"></i></button>
                <button type="button" class="btn btn-danger btn-sm remove-item-row"><i class="bi bi-trash"></i></button>
            </td>`;

        const descriptionRow = document.createElement('tr');
        descriptionRow.className = 'description-row';
        descriptionRow.dataset.itemId = newItemId;
        descriptionRow.style.display = 'none';
        descriptionRow.innerHTML = `
            <td colspan="6">
                <div class="mb-2">
                    <label class="form-label">Leírás (max 200 karakter)</label>
                    <textarea name="orderItems[${newItemId}].DescriptionInput" class="form-control form-control-sm item-description" maxlength="200" rows="2"></textarea>
                    <div class="form-text">Karakterek: <span class="char-count">0</span>/200</div>
                </div>
            </td>`;

        tbody.insertBefore(itemRow, tbody.querySelector('.order-total-row'));
        tbody.insertBefore(descriptionRow, tbody.querySelector('.order-total-row'));

        initializeRowCalculations(itemRow);
        initializeDescriptionToggle(itemRow);
        const newSelect = itemRow.querySelector('.tom-select-product');
        initializeProductTomSelect(newSelect, orderId);
        calculateOrderTotals(orderId);
    }

    function initializePartnerTomSelect(select, orderId) {
        const selectedId = select.dataset.selectedId || '';
        const selectedText = select.dataset.selectedText || '';
        console.log('Tom Select Partner Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        const control = new TomSelect(select, {
            valueField: 'id',
            labelField: 'text',
            searchField: 'text',
            placeholder: '-- Válasszon partnert --',
            allowEmptyOption: true,
            maxOptions: 100,
            load: function(query, callback) {
                const url = `/api/partners?term=${encodeURIComponent(query)}`;
                console.log('Partner Search Query:', url);
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`HTTP error: ${response.status}, ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('API /api/partners Response:', data);
                        if (Array.isArray(data)) {
                            callback(data);
                        } else {
                            console.warn('Invalid response format for partners:', data);
                            callback([]);
                        }
                    })
                    .catch(error => {
                        console.error('Partner Search Error:', error);
                        callback([{ id: 0, text: 'Hiba: Nem sikerült betölteni a partnereket' }]);
                    });
            },
            shouldLoad: function(query) {
                return true;
            },
            render: {
                option: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            },
            onInitialize: function() {
                console.log('Tom Select initialized for orderId:', orderId, 'select element:', select);
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText });
                    this.setValue(selectedId);
                }
                this.load('');
            }
        });

        return control;
    }

    function initializeCurrencyTomSelect(select, orderId) {
        const selectedId = select.dataset.selectedId || '';
        const selectedText = select.dataset.selectedText || '';
        console.log('Tom Select Currency Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        const control = new TomSelect(select, {
            dropdownParent: 'body',
            valueField: 'id',
            labelField: 'text',
            searchField: 'text',
            placeholder: '-- Válasszon pénznemet --',
            allowEmptyOption: true,
            maxOptions: 100,
            load: function(query, callback) {
                const url = `/api/currencies?search=${encodeURIComponent(query)}`;
                console.log('Currency Search Query:', url);
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`HTTP error: ${response.status}, ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('API /api/currencies Response:', data);
                        if (Array.isArray(data)) {
                            callback(data);
                        } else {
                            console.warn('Invalid response format for currencies:', data);
                            callback([]);
                        }
                    })
                    .catch(error => {
                        console.error('Currency Search Error:', error);
                        callback([{ id: 0, text: 'Hiba: Nem sikerült betölteni a pénznemeket' }]);
                    });
            },
            shouldLoad: function(query) {
                return true;
            },
            render: {
                option: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            },
            onInitialize: function() {
                console.log('Tom Select Currency initialized for orderId:', orderId, 'options:', this.options);
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText });
                    this.setValue(selectedId);
                }
                this.load('');
            }
        });

        return control;
    }

    function initializeSiteTomSelect(select, orderId, partnerData = null) {
        const selectedId = select.dataset.selectedId || '';
        const selectedText = select.dataset.selectedText || '';
        console.log('Tom Select Site Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        const control = new TomSelect(select, {
            dropdownParent: 'body',
            valueField: 'id',
            labelField: 'text',
            searchField: 'text',
            placeholder: '-- Válasszon telephelyet --',
            allowEmptyOption: true,
            maxOptions: 100,
            options: partnerData?.sites || [],
            load: function(query, callback) {
                if (partnerData?.sites) {
                    callback(partnerData.sites.filter(s => s.text.toLowerCase().includes(query.toLowerCase())));
                    return;
                }
                const url = `/api/sites?search=${encodeURIComponent(query)}`;
                console.log('Site Search Query:', url);
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (Array.isArray(data)) {
                            callback(data);
                        } else {
                            console.warn('Invalid response format for sites:', data);
                            callback([]);
                        }
                    })
                    .catch(error => {
                        console.error('Site Search Error:', error);
                        callback([{ id: 0, text: 'Hiba: Nem sikerült betölteni a telephelyeket' }]);
                    });
            },
            shouldLoad: function(query) {
                return !partnerData?.sites;
            },
            render: {
                option: function(data, escape) {
                    if (!data.id || data.disabled) return null;
                    const primaryBadge = data.isPrimary ? '<span class="badge bg-primary ms-2">Elsődleges</span>' : '';
                    return `<div>${escape(data.text)}${primaryBadge}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            },
            onInitialize: function() {
                console.log('Tom Select Site initialized for orderId:', orderId);
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText, isPrimary: false });
                    this.setValue(selectedId);
                } else if (partnerData?.sites) {
                    const primarySite = partnerData.sites.find(s => s.isPrimary);
                    if (primarySite) {
                        this.addOption(primarySite);
                        this.setValue(primarySite.id);
                        console.log('Set primary site:', primarySite.text, 'for orderId:', orderId);
                    }
                }
            }
        });

        return control;
    }

    function initializeContactTomSelect(select, orderId, partnerData = null) {
        const selectedId = select.dataset.selectedId || '';
        const selectedText = select.dataset.selectedText || '';
        console.log('Tom Select Contact Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        if (select.tomselect) {
            select.tomselect.destroy();
        }

        const control = new TomSelect(select, {
            dropdownParent: 'body',
            valueField: 'id',
            labelField: 'text',
            searchField: 'text',
            placeholder: '-- Válasszon kapcsolattartót --',
            allowEmptyOption: true,
            maxOptions: 100,
            options: partnerData?.contacts || [],
            load: function(query, callback) {
                if (partnerData?.contacts) {
                    callback(partnerData.contacts.filter(c => c.text.toLowerCase().includes(query.toLowerCase())));
                    return;
                }
                const url = `/api/contacts?search=${encodeURIComponent(query)}`;
                console.log('Contact Search Query:', url);
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (Array.isArray(data)) {
                            callback(data);
                        } else {
                            console.warn('Invalid response format for contacts:', data);
                            callback([]);
                        }
                    })
                    .catch(error => {
                        console.error('Contact Search Error:', error);
                        callback([{ id: 0, text: 'Hiba: Nem sikerült betölteni a kapcsolattartókat' }]);
                    });
            },
            shouldLoad: function(query) {
                return !partnerData?.contacts;
            },
            render: {
                option: function(data, escape) {
                    if (!data.id || data.disabled) return null;
                    const primaryBadge = data.isPrimary ? '<span class="badge bg-primary ms-2">Elsődleges</span>' : '';
                    return `<div>${escape(data.text)}${primaryBadge}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            },
            onInitialize: function() {
                console.log('Tom Select Contact initialized for orderId:', orderId);
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText, isPrimary: false });
                    this.setValue(selectedId);
                } else if (partnerData?.contacts) {
                    const primaryContact = partnerData.contacts.find(c => c.isPrimary);
                    if (primaryContact) {
                        this.addOption(primaryContact);
                        this.setValue(primaryContact.id);
                        console.log('Set primary contact:', primaryContact.text, 'for orderId:', orderId);
                    }
                }
            }
        });

        return control;
    }

    function initializeQuoteTomSelect(selectElement, orderId, partner) {
        if (!selectElement) {
            console.error('Quote select element not found for orderId:', orderId);
            return;
        }

        console.log('Tom Select Quote Init for orderId:', orderId, 'partner:', partner);

        const quotes = partner?.quotes ?? [];
        if (selectElement.tomselect) {
            selectElement.tomselect.destroy();
        }

        selectElement.innerHTML = '<option value="">Válasszon árajánlatot</option>';
        quotes.forEach(q => {
            const option = document.createElement('option');
            option.value = q.id;
            option.text = q.text;
            selectElement.appendChild(option);
        });

        const control = new TomSelect(selectElement, {
            create: false,
            sortField: {
                field: 'text',
                direction: 'asc'
            },
            dropdownParent: 'body',
            placeholder: 'Válasszon árajánlatot...',
            render: {
                option: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                item: function(data, escape) {
                    return `<div>${escape(data.text)}</div>`;
                },
                no_results: function(data, escape) {
                    return `<div class="no-results">Nincs találat "${escape(data.input)}"</div>`;
                }
            }
        });

        const selectedId = selectElement.dataset.selectedId;
        const selectedText = selectElement.dataset.selectedText;
        if (selectedId && selectedText) {
            control.addOption({ id: selectedId, text: selectedText });
            control.setValue(selectedId);
            console.log('Set initial quote:', selectedText, 'for ID:', selectedId, 'orderId:', orderId);
        }
    }

    function initializeEventListeners(orderId) {
        const addButtons = document.querySelectorAll(`.add-item-row[data-order-id="${orderId}"]`);
        console.log('Found add-item-row buttons for orderId:', orderId, addButtons.length);
        addButtons.forEach((button, index) => {
            const newButton = button.cloneNode(true);
            button.replaceWith(newButton);
            newButton.addEventListener('click', function() {
                console.log(`Add item button ${index} clicked for orderId: ${orderId}`);
                addItemRow(orderId);
            });
        });

        const productSelects = document.querySelectorAll(`#items-tbody_${orderId} .tom-select-product`);
        console.log('Found tom-select-product selects for orderId:', orderId, productSelects.length);
        productSelects.forEach(select => {
            initializeProductTomSelect(select, orderId);
            const row = select.closest('.order-item-row');
            if (row) {
                initializeRowCalculations(row);
                initializeDescriptionToggle(row);
            }
        });

        initializeDeleteButtons(orderId);
        calculateOrderTotals(orderId);
        console.log('Event listeners initialized for orderId:', orderId);
    }

function saveOrder(orderId) {
    console.log('Save order initiated for orderId:', orderId);
    const baseInfoForm = document.querySelector(`#orderBaseInfoForm_${orderId}`);
    const itemsForm = document.querySelector(`#orderItemsForm_${orderId}`);
    if (!baseInfoForm || !itemsForm) {
        console.error('Forms not found for orderId:', orderId);
        showAlert('Hiba: Űrlapok nem találhatók.', 'danger');
        return;
    }

    const baseFormData = new FormData(baseInfoForm);
    const orderData = {
        partnerId: parseInt(baseFormData.get('partnerId')) || 0,
        currencyId: parseInt(baseFormData.get('currencyId')) || 0,
        siteId: parseInt(baseFormData.get('siteId')) || null,
        quoteId: parseInt(baseFormData.get('quoteId')) || null,
        orderNumber: baseFormData.get('orderNumber') || null, // Allow null
        orderDate: baseFormData.get('orderDate') || new Date().toISOString().split('T')[0],
        deadline: baseFormData.get('deadline') || null,
        deliveryDate: baseFormData.get('deliveryDate') || null,
        referenceNumber: baseFormData.get('referenceNumber') || null,
        orderType: baseFormData.get('orderType') || null,
        companyName: baseFormData.get('companyName') || null,
        totalAmount: parseFloat(baseFormData.get('totalAmount')) || 0,
        discountPercentage: parseFloat(baseFormData.get('discountPercentage')) || null,
        discountAmount: parseFloat(baseFormData.get('discountAmount')) || null,
        paymentTerms: baseFormData.get('paymentTerms') || null,
        shippingMethod: baseFormData.get('shippingMethod') || null,
        salesPerson: baseFormData.get('salesPerson') || null,
        subject: baseFormData.get('subject') || null,
        description: baseFormData.get('description') || null,
        detailedDescription: baseFormData.get('detailedDescription') || null,
        status: baseFormData.get('status') || 'Draft',
        createdBy: baseFormData.get('createdBy') || 'System',
        createdDate: baseFormData.get('createdDate') || new Date().toISOString(),
        modifiedBy: baseFormData.get('modifiedBy') || 'System',
        modifiedDate: baseFormData.get('modifiedDate') || new Date().toISOString(),
        orderItems: []
    };

    const itemRows = document.querySelectorAll(`#items-tbody_${orderId} .order-item-row`);
    itemRows.forEach(row => {
        const itemId = row.dataset.itemId;
        const productIdInput = row.querySelector(`select[name="orderItems[${itemId}].ProductId"]`);
        const quantityInput = row.querySelector(`input[name="orderItems[${itemId}].Quantity"]`);
        const unitPriceInput = row.querySelector(`input[name="orderItems[${itemId}].UnitPrice"]`);
        const discountValueInput = row.querySelector(`input.discount-value`);
        const discountTypeSelect = row.querySelector(`select.discount-type`);
        const descriptionInput = row.querySelector(`input[name="orderItems[${itemId}].Description"]`);

        const item = {
            productId: parseInt(productIdInput.value) || 0,
            quantity: parseFloat(quantityInput.value) || 0,
            unitPrice: parseFloat(unitPriceInput.value) || 0,
            discountPercentage: discountTypeSelect.value === 'Percentage' ? parseFloat(discountValueInput.value) || 0 : null,
            discountAmount: discountTypeSelect.value === 'Amount' ? parseFloat(discountValueInput.value) || 0 : null,
            description: descriptionInput.value || null
        };
        orderData.orderItems.push(item);
    });

    let errors = [];
    if (!orderData.partnerId) errors.push('Partner kiválasztása kötelező.');
    if (!orderData.currencyId) errors.push('Pénznem kiválasztása kötelező.');
    if (orderData.totalAmount <= 0) errors.push('Összesen mező kitöltése kötelező.');
    if (!orderData.status) errors.push('Státusz kiválasztása kötelező.');
    if (orderData.orderItems.length === 0) {
        errors.push('Legalább egy tétel hozzáadása kötelező.');
    } else {
        orderData.orderItems.forEach((item, index) => {
            if (!item.productId || item.productId === 0) errors.push(`Tétel ${index + 1}: Termék kiválasztása kötelező.`);
            if (item.quantity <= 0) errors.push(`Tétel ${index + 1}: Mennyiség nagyobb kell legyen, mint 0.`);
            if (item.unitPrice <= 0) errors.push(`Tétel ${index + 1}: Egységár nagyobb kell legyen, mint 0.`);
        });
    }

    if (errors.length > 0) {
        console.log('Validation errors:', errors);
        showAlert(`Hiba: ${errors.join(' ')}`, 'danger');
        return;
    }

    if (orderData.discountPercentage !== null) orderData.discountAmount = null;
    else if (orderData.discountAmount !== null) orderData.discountPercentage = null;

    console.log('Submitting order data:', orderData);
    fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
    })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(JSON.stringify(err)); });
            }
            return response.json();
        })
        .then(data => {
            console.log('Order created:', data);
            showAlert(`Rendelés #${data.orderNumber} sikeresen létrehozva!`, 'success');
            bootstrap.Modal.getInstance(document.getElementById('newOrderModal')).hide();
        })
        .catch(error => {
            console.error('Save order error:', error);
            let errorMessage = 'Rendelés létrehozása sikertelen.';
            try {
                const errorObj = JSON.parse(error.message);
                errorMessage += ` ${Object.values(errorObj.errors || {}).flat().join(' ') || errorObj.error}`;
            } catch (e) {
                errorMessage += ` ${error.message}`;
            }
            showAlert(errorMessage, 'danger');
        });
}

    document.querySelectorAll('.modal[id^="editOrderModal_"]').forEach(modal => {
        const orderId = modal.id.replace('editOrderModal_', '');
        modal.addEventListener('shown.bs.modal', function () {
            console.log('Edit modal shown for orderId:', orderId);
            initializeEventListeners(orderId);
            calculateOrderTotals(orderId);
        });
    });

    const newOrderModal = document.getElementById('newOrderModal');
    if (newOrderModal) {
        newOrderModal.addEventListener('shown.bs.modal', function () {
            console.log('New Order modal shown for orderId: new');

        // Set order number input to "Automatikusan generálódik"
            const orderNumberInput = document.querySelector('#orderBaseInfoForm_new input[name="orderNumber"]');
            if (orderNumberInput) {
                orderNumberInput.value = ''; // Clear value
                orderNumberInput.placeholder = 'Automatikusan generálódik'; // Set placeholder
                orderNumberInput.readOnly = true; // Make read-only
                console.log('Order number input set to: Automatikusan generálódik');
            } else {
                console.error('Order number input not found');
            }

            const partnerSelects = document.querySelectorAll('#orderBaseInfoForm_new select[name="partnerId"]');
            const currencySelects = document.querySelectorAll('#orderBaseInfoForm_new select[name="currencyId"]');
            const siteSelects = document.querySelectorAll('#orderBaseInfoForm_new select[name="siteId"]');
            const quoteSelects = document.querySelectorAll('#orderBaseInfoForm_new select[name="quoteId"]');
            const contactSelects = document.querySelectorAll('#orderBaseInfoForm_new select[name="contactId"]');

            partnerSelects.forEach(select => {
                const control = initializePartnerTomSelect(select, 'new');
                control.on('change', function(value) {
                    const partner = this.options[value];
                    siteSelects.forEach(siteSelect => initializeSiteTomSelect(siteSelect, 'new', partner));
                    contactSelects.forEach(contactSelect => initializeContactTomSelect(contactSelect, 'new', partner));
                    quoteSelects.forEach(quoteSelect => initializeQuoteTomSelect(quoteSelect, 'new', partner));
                });
            });
            currencySelects.forEach(select => initializeCurrencyTomSelect(select, 'new'));
            siteSelects.forEach(select => initializeSiteTomSelect(select, 'new'));
            quoteSelects.forEach(select => initializeQuoteTomSelect(select, 'new'));
            contactSelects.forEach(select => initializeContactTomSelect(select, 'new'));
            initializeEventListeners('new');
            calculateOrderTotals('new');

            const saveButton = newOrderModal.querySelector('.save-order');
            if (saveButton) {
                console.log('Save button found for orderId: new');
                const newSaveButton = saveButton.cloneNode(true);
                saveButton.replaceWith(newSaveButton);
                newSaveButton.addEventListener('click', () => {
                    console.log('Save button clicked for orderId: new');
                    saveOrder('new');
                });
            } else {
                console.error('Save button not found for orderId: new');
            }
        });

        newOrderModal.addEventListener('hidden.bs.modal', function () {
            console.log('New Order modal hidden');
            document.querySelector('#orderBaseInfoForm_new').reset();
            document.querySelector('#items-tbody_new').querySelectorAll('.order-item-row, .description-row').forEach(row => row.remove());
            calculateOrderTotals('new');
        });
    }
});
</script>

<script>
function showToast(type, message) {
    console.log('Showing toast:', type, message);
    const toastId = `toast_${Date.now()}`;
    const toastHtml = `
        <div id="${toastId}" class="toast custom-toast" role="alert" aria-live="polite" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast-header ${type === 'Success' ? 'bg-success text-white' : 'bg-danger text-white'}">
                <strong class="me-auto">${type === 'Success' ? 'Siker' : 'Hiba'}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">${message}</div>
        </div>
    `;
    $('#toastContainer').append(toastHtml);
    const toastElement = $(`#${toastId}`);
    const toast = new bootstrap.Toast(toastElement[0]);
    toast.show();
    toastElement.on('hidden.bs.toast', () => toastElement.remove());
}
</script>


<script>
$(document).on('click', '.save-order', function (e) {
    e.preventDefault();
    const $button = $(this);
    const orderId = $button.data('order-id');
    console.log('Save order clicked for orderId:', orderId);

    const baseInfoForm = $(`#orderBaseInfoForm_${orderId}`);
    const itemsForm = $(`#orderItemsForm_${orderId}`);

    // Validate forms
    let isValid = true;

    // Validate base info
    baseInfoForm.find('select, input, textarea').each(function () {
        if (this.required && !this.value) {
            isValid = false;
            $(this).addClass('is-invalid');
            console.log('Invalid base info field:', this.name);
        } else {
            $(this).removeClass('is-invalid');
        }
    });

    // Validate required fields
    ['PartnerId', 'CurrencyId', 'Status', 'TotalAmount'].forEach(field => {
        const $field = baseInfoForm.find(`[name="${field}"]`);
        if (!$field.val()) {
            isValid = false;
            $field.addClass('is-invalid');
            console.log(`${field} is missing`);
        }
    });

    // Validate order items
    const orderItems = [];
    let totalAmount = 0;
    itemsForm.find('.order-item-row').each(function (index) {
        const $row = $(this);
        const itemId = $row.data('item-id');
        const productId = $row.find(`select[name="orderItems[${itemId}].ProductId"]`).val();
        const quantity = parseFloat($row.find(`input[name="orderItems[${itemId}].Quantity"]`).val()) || 1;
        const unitPrice = parseFloat($row.find(`input[name="orderItems[${itemId}].UnitPrice"]`).val()) || 0;
        const discountType = $row.find('.discount-type').val();
        const discountValue = parseFloat($row.find('.discount-value').val()) || 0;

        if (!productId || isNaN(parseInt(productId)) || parseInt(productId) <= 0) {
            isValid = false;
            $row.find(`select[name="orderItems[${itemId}].ProductId"]`).addClass('is-invalid');
            console.log(`Invalid or missing ProductId for item ${itemId}:`, productId);
            return;
        }

        const itemTotal = quantity * unitPrice;
        let discount = 0;
        if (discountType === 'Percentage' && discountValue) {
            discount = itemTotal * (discountValue / 100);
        } else if (discountType === 'Amount' && discountValue) {
            discount = discountValue;
        }

        totalAmount += itemTotal - discount;

        const item = {
            OrderItemId: itemId.toString().startsWith('new_') ? 0 : parseInt(itemId),
            ProductId: parseInt(productId),
            Quantity: quantity,
            UnitPrice: unitPrice,
            Description: $row.find(`textarea[name="orderItems[${itemId}].DescriptionInput"]`).val() || null,
            DiscountPercentage: discountType === 'Percentage' ? discountValue : null,
            DiscountAmount: discountType === 'Amount' ? discountValue : null
        };
        orderItems.push(item);
        console.log(`OrderItem ${itemId}:`, item);
    });

    if (!isValid) {
        showToast('Danger', 'Kérjük, töltse ki az összes kötelező mezőt, beleértve a partnert, pénznemet, státuszt, összeget és minden tétel termékét.');
        return;
    }

    if (orderItems.length === 0) {
        showToast('Danger', 'Legalább egy tétel szükséges a rendeléshez.');
        console.log('No order items provided for orderId:', orderId);
        return;
    }

    const updateOrderDto = {
        OrderId: orderId
    };

    // Collect base info, excluding anti-forgery token
    baseInfoForm.serializeArray().forEach(item => {
        if (item.value && item.name !== 'csrf_tokenName' && item.name !== '__RequestVerificationToken') {
            if (['TotalAmount', 'DiscountPercentage', 'DiscountAmount'].includes(item.name)) {
                updateOrderDto[item.name] = parseFloat(item.value) || null;
            } else if (['PartnerId', 'SiteId', 'CurrencyId', 'QuoteId'].includes(item.name)) {
                updateOrderDto[item.name] = parseInt(item.value) || null;
            } else {
                updateOrderDto[item.name] = item.value;
            }
        }
    });

    updateOrderDto.TotalAmount = totalAmount;
    updateOrderDto.OrderItems = orderItems;

    console.log('Sending updateOrderDto:', JSON.stringify(updateOrderDto, null, 2));

    const token = itemsForm.find('input[name="__RequestVerificationToken"]').val() || baseInfoForm.find('input[name="__RequestVerificationToken"]').val();
    if (!token) {
        console.error('Anti-forgery token not found');
        showToast('Danger', 'Hiba: Az anti-forgery token nem található.');
        return;
    }

    $button.prop('disabled', true);

    $.ajax({
        url: `/api/orders/${orderId}`,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(updateOrderDto),
        headers: {
            'RequestVerificationToken': token
        },
        success: function (data, status, xhr) {
            console.log('Update response:', { status: xhr.status, data });
            if (xhr.status === 200 && data) {
                showToast('Success', 'A szerkesztés sikeresen megtörtént.');
                $(`#editOrderModal_${orderId}`).modal('hide');
                const statusDisplay = window.StatusDisplayNames ? window.StatusDisplayNames[updateOrderDto.Status] : updateOrderDto.Status;
                const $row = $(`tr[data-order-id="${orderId}"]`);
                if ($row.length) {
                    $row.find('td.order-number').text(updateOrderDto.OrderNumber || 'N/A');
                    $row.find('td.status').text(statusDisplay || 'N/A');
                    $row.find('td.order-date').text(updateOrderDto.OrderDate || 'N/A');
                    $row.find('td.partner').text(baseInfoForm.find(`select[name="PartnerId"] option:selected`).text() || 'N/A');
                    $row.find('td.total-amount').text(totalAmount.toFixed(2));
                } else {
                    console.warn(`Table row for orderId ${orderId} not found`);
                }
            } else {
                showToast('Danger', 'Hiba: Érvénytelen válasz a szervertől.');
            }
        },
        error: function (xhr, status, error) {
            console.error('Update error:', { status: xhr.status, response: xhr.responseJSON || xhr.responseText });
            const errorMessage = xhr.responseJSON?.errors 
                ? Object.values(xhr.responseJSON.errors).flat().join('; ')
                : xhr.responseJSON?.error 
                || xhr.responseJSON?.detail 
                || xhr.responseJSON?.title 
                || xhr.responseText 
                || 'Hiba történt a rendelés frissítése során.';
            showToast('Danger', errorMessage);
        },
        complete: function () {
            $button.prop('disabled', false);
        }
    });
});
</script>

<script>
@* function initializeProductTomSelect(orderId) {
    $(`#items-tbody_${orderId} .tom-select-product`).each(function () {
        const $select = $(this);
        const selectedId = $select.data('selected-id') || '';
        const selectedText = $select.data('selected-text') || '';
        console.log('Tom Select Product Init for orderId:', orderId, 'selectedId:', selectedId, 'selectedText:', selectedText);

        new TomSelect($select[0], {
            valueField: 'id',
            labelField: 'text',
            searchField: ['text'],
            placeholder: '-- Válasszon terméket --',
            allowEmptyOption: true,
            load: function (query, callback) {
                console.log('Fetching products for search:', query);
                fetch(`/api/products?query=${encodeURIComponent(query)}`, {
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('API response:', data);
                        callback(data);
                    })
                    .catch(error => {
                        console.error('Error fetching products:', error);
                        callback();
                    });
            },
            render: {
                option: function (item, escape) {
                    return `<div>${escape(item.text)}</div>`;
                },
                item: function (item, escape) {
                    return `<div>${escape(item.text)}</div>`;
                }
            },
            onInitialize: function () {
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText });
                    this.setValue(selectedId, true);
                }
            },
            onChange: function (value) {
                $select.val(value).trigger('change');
                console.log('Selected ProductId:', value);
            }
        });
    });
} *@

$(document).ready(function () {
    $('.tom-select').each(function () {
        const $select = $(this);
        const selectedId = $select.data('selected-id') || '';
        const selectedText = $select.data('selected-text') || '';
        const name = $select.attr('name');

        let apiUrl = '';
        if (name === 'PartnerId') apiUrl = '/api/partners';
        else if (name === 'SiteId') apiUrl = '/api/sites';
        else if (name === 'CurrencyId') apiUrl = '/api/currencies';
        else if (name === 'QuoteId') apiUrl = '/api/quotes';

        new TomSelect($select[0], {
            valueField: 'id',
            labelField: 'text',
            searchField: ['text'],
            placeholder: $select.find('option[selected]').text() || 'Válasszon...',
            allowEmptyOption: true,
            load: function (query, callback) {
                console.log('Fetching data for', name, 'with query:', query);
                fetch(`${apiUrl}?query=${encodeURIComponent(query)}`, {
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('API response for', name, ':', data);
                        callback(data);
                    })
                    .catch(error => {
                        console.error('Error fetching', name, ':', error);
                        callback();
                    });
            },
            render: {
                option: function (item, escape) {
                    return `<div>${escape(item.text)}</div>`;
                },
                item: function (item, escape) {
                    return `<div>${escape(item.text)}</div>`;
                }
            },
            onInitialize: function () {
                if (selectedId && selectedText) {
                    this.addOption({ id: selectedId, text: selectedText });
                    this.setValue(selectedId, true);
                    console.log('Initialized', name, 'with id:', selectedId, 'text:', selectedText);
                }
            },
            onChange: function (value) {
                $select.val(value).trigger('change');
                console.log('Selected', name, ':', value);
            }
        });
    });
});
</script>


@* <script>
    let isCopying = false; // Prevent multiple clicks

    function copyOrder(orderId) {
        if (isCopying) {
            console.log('Copy in progress, ignoring additional click for order ID:', orderId);
            return;
        }
        isCopying = true;

        // Disable dropdown item
        const dropdownItem = document.querySelector(`a[onclick="copyOrder(${orderId})"]`);
        if (dropdownItem) {
            dropdownItem.classList.add('disabled');
            dropdownItem.style.pointerEvents = 'none';
        }

        console.log('Initiating copy for order ID:', orderId);
        fetch(`/api/orders/${orderId}/copy`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
            .then(response => {
                console.log('Response status:', response.status, 'OK:', response.ok);
                if (!response.ok) {
                    return response.text().then(text => {
                        let errorMessage;
                        try {
                            const err = JSON.parse(text);
                            errorMessage = err.error || `HTTP error: ${response.status}`;
                        } catch {
                            errorMessage = text || `HTTP error: ${response.status}`;
                        }
                        throw new Error(errorMessage);
                    });
                }
                return response.json().catch(err => {
                    console.error('JSON parse error:', err);
                    throw new Error('Invalid response format');
                });
            })
            .then(data => {
                console.log('Order copied successfully:', data);
                // Create success toast
                const toastContainer = document.getElementById('toastContainer');
                const toastDiv = document.createElement('div');
                toastDiv.className = 'toast custom-toast'; // Add custom-toast class
                toastDiv.setAttribute('role', 'alert');
                toastDiv.setAttribute('aria-live', 'assertive');
                toastDiv.setAttribute('aria-atomic', 'true');
                toastDiv.setAttribute('data-bs-autohide', 'true');
                toastDiv.setAttribute('data-bs-delay', '5000');
                toastDiv.innerHTML = `
                    <div class="toast-header bg-success text-white">
                        <strong class="me-auto">Siker</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Bezárás"></button>
                    </div>
                    <div class="toast-body">
                        Rendelés azonosító: ${data.orderId} sikeresen másolva!
                    </div>
                `;
                toastContainer.appendChild(toastDiv);
                const toast = new bootstrap.Toast(toastDiv);
                toast.show();
                toastDiv.addEventListener('hidden.bs.toast', () => toastDiv.remove());

                // Close dropdown
                const dropdown = document.querySelector(`#dropdownMenu_${orderId}`);
                if (dropdown) dropdown.classList.remove('show');

                // Optionally open New Order Modal
                try {
                    openNewOrderModalWithData(data);
                } catch (modalError) {
                    console.error('Error in openNewOrderModalWithData:', modalError);
                }
            })
            .catch(error => {
                console.error('Copy order failed:', error.message);
                // Create error toast
                const toastContainer = document.getElementById('toastContainer');
                const toastDiv = document.createElement('div');
                toastDiv.className = 'toast custom-toast'; // Add custom-toast class
                toastDiv.setAttribute('role', 'alert');
                toastDiv.setAttribute('aria-live', 'assertive');
                toastDiv.setAttribute('aria-atomic', 'true');
                toastDiv.setAttribute('data-bs-autohide', 'true');
                toastDiv.setAttribute('data-bs-delay', '5000');
                toastDiv.innerHTML = `
                    <div class="toast-header bg-danger text-white">
                        <strong class="me-auto">Hiba</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Bezárás"></button>
                    </div>
                    <div class="toast-body">
                        Nem sikerült másolni a rendelést: ${error.message}
                    </div>
                `;
                toastContainer.appendChild(toastDiv);
                const toast = new bootstrap.Toast(toastDiv);
                toast.show();
                toastDiv.addEventListener('hidden.bs.toast', () => toastDiv.remove());
            })
            .finally(() => {
                // Re-enable dropdown item
                isCopying = false;
                if (dropdownItem) {
                    dropdownItem.classList.remove('disabled');
                    dropdownItem.style.pointerEvents = 'auto';
                }
            });
    }

    if (typeof jQuery === 'undefined') {
        console.error('jQuery is not loaded!');
    } else {
        console.log('jQuery loaded successfully');
    }

    $(document).ready(function () {
        const debug = true;

        // Use event delegation for delete buttons
        $(document).on('click', '.confirm-delete-order', function (e) {
            e.preventDefault();
            const $button = $(this);
            const orderId = $button.data('order-id');
            console.log('Delete button clicked for orderId:', orderId); // Debug

            if (!orderId) {
                console.error('orderId is missing from button data-order-id');
                showToast('danger', 'Hiba: Rendelés azonosító hiányzik.');
                return;
            }

            const $form = $(`#deleteOrderForm_${orderId}`);
            const $warningDiv = $(`#deleteWarning_${orderId}`);

            if ($form.length) {
                console.log('Form found for orderId:', orderId); // Debug
                const token = $form.find('input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    console.error('Anti-forgery token not found in form');
                    showToast('danger', 'Hiba: Biztonsági token hiányzik.');
                    return;
                }

                $button.prop('disabled', true); // Disable button to prevent multiple clicks

                $.ajax({
                    url: `/api/orders/${orderId}`,
                    type: 'DELETE',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    beforeSend: function () {
                        console.log('Sending DELETE request for orderId:', orderId); // Debug
                    },
                    success: function (data, status, xhr) {
                        console.log('Delete response:', { status: xhr.status, data }); // Debug
                        if (xhr.status === 204) {
                            console.log('Order deleted successfully:', orderId);
                            $(`#deleteOrderModal_${orderId}`).modal('hide');
                            // Show success toast
                            showToast('success', `Rendelés azonosító: ${orderId} sikeresen törölve!`);
                            // Remove order row from table
                            $(`tr[data-order-id="${orderId}"]`).fadeOut(500, function () {
                                $(this).remove();
                            });
                        } else {
                            console.warn('Unexpected status code:', xhr.status);
                            showToast('warning', `Sikeres törlés, de váratlan válasz: ${xhr.status}`);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Delete error:', { status: xhr.status, response: xhr.responseText }); // Debug
                        let message = 'Hiba történt a törlés során.';
                        if (xhr.status === 404) {
                            message = xhr.responseJSON?.error || 'A rendelés nem található.';
                        } else if (xhr.status === 500) {
                            message = xhr.responseJSON?.error || 'Szerver hiba történt a törlés során.';
                        } else if (xhr.status === 403) {
                            message = 'Hozzáférés megtagadva: bejelentkezés szükséges.';
                        }
                        showToast('danger', message);
                    },
                    complete: function () {
                        $button.prop('disabled', false); // Re-enable button
                    }
                });
            } else {
                console.error('Form not found for orderId:', orderId);
                showToast('danger', 'Hiba: Törlési űrlap nem található.');
            }
        });

        function showToast(type, message) {
            const toast = $(`
                <div class="toast custom-toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);
            $('#toastContainer').append(toast);
            const bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();
            setTimeout(() => toast.remove(), 5500);
        }

        function getTodayDate() {
            const today = new Date();
            return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        }
    });
</script> *@


<script>
    let isCopying = false; // Prevent multiple clicks

    function copyOrder(orderId) {
        if (isCopying) {
            console.log('Copy in progress, ignoring additional click for order ID:', orderId);
            return;
        }
        isCopying = true;

        // Disable dropdown item
        const dropdownItem = document.querySelector(`a[onclick="copyOrder(${orderId})"]`);
        if (dropdownItem) {
            dropdownItem.classList.add('disabled');
            dropdownItem.style.pointerEvents = 'none';
        }

        console.log('Initiating copy for order ID:', orderId);
        fetch(`/api/orders/${orderId}/copy`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
            .then(response => {
                console.log('Response status:', response.status, 'OK:', response.ok);
                if (!response.ok) {
                    return response.text().then(text => {
                        let errorMessage;
                        try {
                            const err = JSON.parse(text);
                            errorMessage = err.error || `HTTP error: ${response.status}`;
                        } catch {
                            errorMessage = text || `HTTP error: ${response.status}`;
                        }
                        throw new Error(errorMessage);
                    });
                }
                return response.json().catch(err => {
                    console.error('JSON parse error:', err);
                    throw new Error('Invalid response format');
                });
            })
            .then(data => {
                console.log('Order copied successfully:', data);
                // Create success toast
                const toastContainer = document.getElementById('toastContainer');
                const toastDiv = document.createElement('div');
                toastDiv.className = 'toast custom-toast'; // Add custom-toast class
                toastDiv.setAttribute('role', 'alert');
                toastDiv.setAttribute('aria-live', 'assertive');
                toastDiv.setAttribute('aria-atomic', 'true');
                toastDiv.setAttribute('data-bs-autohide', 'true');
                toastDiv.setAttribute('data-bs-delay', '5000');
                toastDiv.innerHTML = `
                    <div class="toast-header bg-success text-white">
                        <strong class="me-auto">Siker</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Bezárás"></button>
                    </div>
                    <div class="toast-body">
                        Rendelés azonosító: ${data.orderId} sikeresen másolva!
                    </div>
                `;
                toastContainer.appendChild(toastDiv);
                const toast = new bootstrap.Toast(toastDiv);
                toast.show();
                toastDiv.addEventListener('hidden.bs.toast', () => toastDiv.remove());

                // Close dropdown
                const dropdown = document.querySelector(`#dropdownMenu_${orderId}`);
                if (dropdown) dropdown.classList.remove('show');

                // Optionally open New Order Modal
                try {
                    openNewOrderModalWithData(data);
                } catch (modalError) {
                    console.error('Error in openNewOrderModalWithData:', modalError);
                }
            })
            .catch(error => {
                console.error('Copy order failed:', error.message);
                // Create error toast
                const toastContainer = document.getElementById('toastContainer');
                const toastDiv = document.createElement('div');
                toastDiv.className = 'toast custom-toast'; // Add custom-toast class
                toastDiv.setAttribute('role', 'alert');
                toastDiv.setAttribute('aria-live', 'assertive');
                toastDiv.setAttribute('aria-atomic', 'true');
                toastDiv.setAttribute('data-bs-autohide', 'true');
                toastDiv.setAttribute('data-bs-delay', '5000');
                toastDiv.innerHTML = `
                    <div class="toast-header bg-danger text-white">
                        <strong class="me-auto">Hiba</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Bezárás"></button>
                    </div>
                    <div class="toast-body">
                        Nem sikerült másolni a rendelést: ${error.message}
                    </div>
                `;
                toastContainer.appendChild(toastDiv);
                const toast = new bootstrap.Toast(toastDiv);
                toast.show();
                toastDiv.addEventListener('hidden.bs.toast', () => toastDiv.remove());
            })
            .finally(() => {
                // Re-enable dropdown item
                isCopying = false;
                if (dropdownItem) {
                    dropdownItem.classList.remove('disabled');
                    dropdownItem.style.pointerEvents = 'auto';
                }
            });
    }
</script>

}

<style>

    .custom-toast .toast-body {
        background-color: #ffffff !important; /* White background */
        color: #212529 !important; /* Dark text (Bootstrap's --bs-body-color) */
    }
    .toast-header.bg-success {
        background-color: #198754 !important; /* Ensure green header */
        color: #ffffff !important;
    }
    .toast-header.bg-danger {
        background-color: #dc3545 !important; /* Ensure red header */
        color: #ffffff !important;
    }

    .ts-wrapper.form-select {
    width: 100%;
    padding: 0;
    position: relative;
}
.ts-control {
    min-height: calc(1.5em + 0.75rem + 2px);
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    background-color: #fff;
    cursor: pointer;
}
.ts-dropdown {
    z-index: 1070 !important; /* Above Select2 (1060) and modal (1050) */
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    background-color: #fff;
    display: none; /* Tom Select toggles */
    visibility: visible !important;
    opacity: 1 !important;
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
}
.ts-dropdown.active {
    display: block !important;
}
.ts-dropdown .option {
    padding: 0.375rem 0.75rem;
    cursor: pointer;
}
.ts-dropdown .option:hover {
    background-color: #f8f9fa;
}
[data-theme="dark"] .ts-wrapper.form-select {
    background-color: #2a2a2a;
}
[data-theme="dark"] .ts-control {
    background-color: #333333 !important;
    border-color: #666 !important;
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown {
    background-color: #2a2a2a !important;
    border-color: #666 !important;
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown .option {
    color: #e0e0e0 !important;
}
[data-theme="dark"] .ts-dropdown .option:hover {
    background-color: #3a3a3a !important;
}

    .table .description-row {
        background-color: #f8f9fa; /* Light background for description row */
    }
    .table .description-row td {
        padding: 10px;
    }
    .table .description {
        resize: vertical;
        min-height: 60px;
        max-height: 100px;
        width: 100%;
    }
    .table th:nth-child(1), .table td:nth-child(1) { /* Product column */
        max-width: 200px;
    }
    .btn-link {
        text-decoration: none;
    }
    .nav-tabs {
        margin-bottom: 15px;
    }
    .tab-content {
        min-height: 200px; /* Ensure tab content has enough space */
    }

.drag-handle {
    cursor: move;
    width: 30px;
    text-align: center;
    vertical-align: middle;
}

.drag-handle .bi-grip-vertical {
    font-size: 1.2rem;
    color: #6c757d;
}

#orderItemsTable tbody tr:hover .drag-handle .bi-grip-vertical {
    color: #007bff;
}

#orderItemsTable .placeholder {
    background-color: #f8f9fa;
    border: 2px dashed #007bff;
    height: 50px;
}



[data-theme="dark"] .partner-card {
        background-color: #2a2a2a;
        border: 1px solid #444;
    }


/* Badge styling */
.badge-draft { background-color: #6c757d; }
.badge-sent { background-color: #007bff; }
.badge-accepted { background-color: #28a745; }
.badge-rejected { background-color: #dc3545; }

    /* Ensure textarea in Leírás column is wider and readable */
    #orderItemsTable .itemDescription {
        width: 100%;
        min-width: 200px;
        height: 60px;
        resize: vertical;
    }
    /* Adjust table column widths */
    #orderItemsTable th:nth-child(2), #orderItemsTable td:nth-child(2) {
        width: 30%;
    }

        /* Card-based layout matching Leads page */
        .card-grid-header {
            padding: 0 15px 2px 15px;
            margin-top: 0px;
            background-color: #F1EFEC;
            border-bottom: 1px solid #dee2e6;
        }

        .card-grid-row {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr 1fr 1fr auto;
            gap: 10px;
            align-items: center;
        }

        .card-grid-column {
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .card-grid-cell {
            padding: 0 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Column widths */
        .order-number-col { flex: 1 1 15%; min-width: 120px; }
        .order-partner-col { flex: 1 1 25%; min-width: 150px; }
        .order-date-col { flex: 1 1 15%; min-width: 100px; }
        .order-status-col { flex: 1 1 15%; min-width: 100px; }
        .order-amount-col { flex: 1 1 15%; min-width: 120px; }
        .actions-column, .actions-cell { flex: 0 0 auto; width: auto; text-align: right; padding-right: 10px; }

        /* Button group styling */
        .btn-group-sm .btn {
            padding: 0.2rem 0.5rem;
            font-size: 0.875rem;
        }

        /* Badge styling */
        .badge-draft { background-color: #6c757d; }
        .badge-sent { background-color: #007bff; }
        .badge-accepted { background-color: #28a745; }
        .badge-rejected { background-color: #dc3545; }

        /* Ensure pagination is centered */
        .fixed-footer .pagination {
            display: flex;
            justify-content: center;
            width: 100%;
            margin-bottom: 0;
        }

        .fixed-footer nav {
            flex-grow: 1;
            text-align: center;
        }

        /* Modal Sizing */
        .modal-lg { max-width: 1000px !important; }

        /* Consistent Tab Content Styling */
        #newOrderModal .tab-content,
        #newOrderItemModal .tab-content,
        [id^="editOrderModal_"] .tab-content,
        [id^="newOrderItemModal_"] .tab-content,
        [id^="viewOrderModal_"] .tab-content {
            min-width: 0;
            width: 100%;
            min-height: 450px;
            max-height: 65vh;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 1rem;
            background-color: #fff;
        }

        /* Consistent Tab Pane Styling */
        #newOrderModal .tab-pane,
        #newOrderItemModal .tab-pane,
        [id^="editOrderModal_"] .tab-pane,
        [id^="newOrderItemModal_"] .tab-pane,
        [id^="viewOrderModal_"] .tab-pane {
            width: 100%;
        }

        /* Adjust Modal Body Padding */
        #newOrderModal .modal-body,
        #newOrderItemModal .modal-body,
        [id^="editOrderModal_"] .modal-body,
        [id^="newOrderItemModal_"] .modal-body,
        [id^="viewOrderModal_"] .modal-body {
            padding: 1rem 1rem 0 1rem;
        }

        /* Remove margin below tabs */
        #newOrderModal .nav-tabs,
        [id^="editOrderModal_"] .nav-tabs,
        [id^="viewOrderModal_"] .nav-tabs {
            margin-bottom: 0 !important;
        }

        /* General Table Cell Styling */
        .table tbody tr td {
            vertical-align: middle;
        }

        /* View Modal Specific Content Styling */
        [id^="viewOrderModal_"] .table {
            margin-bottom: 0;
        }

        [id^="viewOrderModal_"] .tab-pane > p {
            padding: 1.5rem;
            text-align: center;
            color: #6c757d;
        }

        /* Select2 styling */
.select2-container {
            width: 100% !important;
        }

        .select2-container {
    z-index: 1060; /* Higher than Bootstrap modal */
}

        .select2-container--bootstrap-5 .select2-selection--single {
            height: 38px;
            padding: 0.375rem 2.25rem 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            background-color: #fff;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
            padding-top: 0;
            padding-bottom: 0;
            color: #495057;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: 38px;
            right: 0.75rem;
        }

        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        .select2-container-wrapper {
            position: relative;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single {
            background-color: #3a3a3a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-dropdown {
            background-color: #2a2a2a;
            border-color: #666;
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option {
            color: #e0e0e0;
        }

        [data-theme="dark"] .select2-container--bootstrap-5 .select2-results__option--highlighted {
            background-color: #357abd;
            color: #ffffff;
        }

        /* Dark mode overrides */
        [data-theme="dark"] .card-grid-header {
            background-color: #2a2a2a;
            border-bottom: 1px solid #444;
        }

        [data-theme="dark"] .card-grid-column {
            color: #b0b0b0;
        }

        [data-theme="dark"] .order-card {
            background-color: #2a2a2a;
            border: 1px solid #444;
        }

        [data-theme="dark"] .fixed-footer {
            background-color: #2a2a2a;
            border-top: 1px solid #444;
        }

        [data-theme="dark"] .alert-success {
            background-color: #2e7d32;
            border-color: #1b5e20;
            color: #e0e0e0;
        }

        [data-theme="dark"] .alert-danger {
            background-color: #d32f2f;
            border-color: #b71c1c;
            color: #e0e0e0;
        }

        [data-theme="dark"] #newOrderModal .tab-content,
        [data-theme="dark"] #newOrderItemModal .tab-content,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-content,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-content,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-content {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .tab-pane,
        [data-theme="dark"] #newOrderItemModal .tab-pane,
        [data-theme="dark"] [id^="editOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="newOrderItemModal_"] .tab-pane,
        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane,
        [data-theme="dark"] [id^="deleteOrderModal_"] .tab-pane {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .modal-body,
        [data-theme="dark"] #newOrderItemModal .modal-body,
        [data-theme="dark"] [id^="editOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="newOrderItemModal_"] .modal-body,
        [data-theme="dark"] [id^="viewOrderModal_"] .modal-body,
        [data-theme="dark"] [id^="deleteOrderModal_"] .modal-body {
            background-color: #2a2a2a !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control {
            background-color: #333333 !important;
            border-color: #666 !important;
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .form-control:focus {
            background-color: #333333 !important;
            border-color: #888 !important;
            color: #e0e0e0 !important;
            box-shadow: 0 0 0 0.2rem rgba(100, 100, 100, 0.25) !important;
        }

        [data-theme="dark"] .form-control::placeholder {
            color: #aaaaaa !important;
        }

        [data-theme="dark"] .form-label {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] .modal-title {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs {
            background-color: #2a2a2a !important;
            border-bottom: 1px solid #444 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link {
            color: #b0b0b0 !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link:hover,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link:hover {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
        }

        [data-theme="dark"] #newOrderModal .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="editOrderModal_"] .nav-tabs .nav-link.active,
        [data-theme="dark"] [id^="viewOrderModal_"] .nav-tabs .nav-link.active {
            color: #e0e0e0 !important;
            background-color: #3a3a3a !important;
            border-color: #444 #444 #2a2a2a !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .tab-pane > p {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table {
            color: #e0e0e0 !important;
        }

        [data-theme="dark"] [id^="viewOrderModal_"] .table th,
        [data-theme="dark"] [id^="viewOrderModal_"] .table td {
            border-color: #444 !important;
            color: #e0e0e0 !important;
        }
    </style>