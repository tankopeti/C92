@page
@model Cloud9_2.Pages.CRM.Sites.IndexModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Telephelyek";
}

@await Html.PartialAsync("_CRMSidebar")

<div class="right-content">
    <!-- Message Modal -->
    <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="messageModalBody"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezárás</button>
                </div>
            </div>
        </div>
    </div>

    <div class="page-header-fixed-top">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Telephelyek</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Sites.Count of @Model.TotalRecords telephely@(Model.TotalRecords != 1 ? "ek" : "") (Page @Model.CurrentPage of @Model.TotalPages)</li>
                </ol>
            </nav>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createSiteModal">
                    + Új Telephely
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" asp-page="./Index" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Telephely keresése..." id="searchInput" name="searchTerm" value="@Model.SearchTerm">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit">
                        <i class="bi bi-search"></i>
                    </button>
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <a href="@Url.Page("./Index")" class="btn btn-outline-danger">
                            <i class="bi bi-x"></i>
                        </a>
                    }
                </form>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-funnel me-1"></i>Szűrő
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" data-filter="all">Összes Telephely</a></li>
                        <li><a class="dropdown-item" href="#" data-filter="primary">Elsődleges Telephelyek</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
        <table class="table table-striped table-hover">
            <thead class="sticky-top custom-thead">
                <tr>
                    <th class="text-nowrap">Telephely neve</th>
                    <th class="text-nowrap">Partner</th>
                    <th class="text-nowrap">Cím 1</th>
                    <th class="text-nowrap">Cím 2</th>
                    <th class="text-nowrap">Város</th>
                    <th class="text-nowrap">Irányítószám</th>
                    <th class="text-nowrap">Kapcsolattartó 1</th>
                    <th class="text-nowrap">Kapcsolattartó 2</th>
                    <th class="text-nowrap">Kapcsolattartó 3</th>
                    <th class="text-nowrap">Státusz</th>
                    <th class="text-nowrap">Elsődleges</th>
                    <th class="text-nowrap">Műveletek</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Sites.Any())
                {
                    @foreach (var site in Model.Sites)
                    {
                        <tr>
                            <td class="text-nowrap">
                                <i class="bi bi-building me-1"></i>
                                @if (string.IsNullOrEmpty(site.SiteName))
                                {
                                    <span class="text-danger">(Nincs Név - SiteId: @site.SiteId)</span>
                                }
                                else
                                {
                                    @site.SiteName
                                }
                            </td>
                            <td class="text-nowrap">
                                @if (site.Partner != null && !string.IsNullOrEmpty(site.Partner.Name))
                                {
                                    <a asp-page="/CRM/Partners/Index" asp-route-id="@site.PartnerId" class="text-muted">
                                        <i class="bi bi-person me-1"></i> @site.Partner.Name
                                    </a>
                                }
                                else
                                {
                                    <span class="text-warning">Nincs Partner (PartnerId: @site.PartnerId)</span>
                                }
                            </td>
                            <td class="text-nowrap">
                                <i class="bi bi-geo-alt me-1"></i> @(string.IsNullOrEmpty(site.AddressLine1) ? "-" : site.AddressLine1)
                            </td>
                            <td class="text-nowrap">
                                <i class="bi bi-geo-alt me-1"></i> @(string.IsNullOrEmpty(site.AddressLine2) ? "-" : site.AddressLine2)
                            </td>
                            <td class="text-nowrap">
                                <i class="bi bi-geo-alt me-1"></i> @(string.IsNullOrEmpty(site.City) ? "-" : site.City)
                            </td>
                            <td class="text-nowrap">
                                <i class="bi bi-geo-alt me-1"></i> @(string.IsNullOrEmpty(site.PostalCode) ? "-" : site.PostalCode)
                            </td>
                            <td class="text-nowrap">
                                @(string.IsNullOrEmpty(site.ContactPerson1) ? "-" : site.ContactPerson1)
                            </td>
                            <td class="text-nowrap">
                                @(string.IsNullOrEmpty(site.ContactPerson2) ? "-" : site.ContactPerson2)
                            </td>
                            <td class="text-nowrap">
                                @(string.IsNullOrEmpty(site.ContactPerson3) ? "-" : site.ContactPerson3)
                            </td>
                            <td class="text-nowrap">
                                @if (site.Status != null && !string.IsNullOrEmpty(site.Status.Color))
                                {
                                    <span class="badge" style="background-color: @site.Status.Color; color: white;">@site.Status.Name</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td class="text-nowrap">
                                @if (site.IsPrimary)
                                {
                                    <span class="badge bg-primary">Elsődleges</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button"
                                            class="btn btn-outline-info view-site-btn"
                                            data-site-id="@site.SiteId"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewSiteModal_@site.SiteId">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary dropdown-toggle btn-sm" type="button"
                                                data-bs-toggle="dropdown" aria-expanded="false"
                                                data-bs-toggle="tooltip" data-bs-placement="top" title="További Műveletek">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item edit-site-btn" href="#"
                                                   data-site-id="@site.SiteId"
                                                   data-bs-toggle="modal"
                                                   data-bs-target="#editSiteModal_@site.SiteId">
                                                    <i class="bi bi-pencil-square me-2"></i>Szerkesztés
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li>
                                                <a class="dropdown-item text-danger" href="#"
                                                   data-bs-toggle="modal"
                                                   data-bs-target="#deleteSiteModal_@site.SiteId"
                                                   data-site-id="@site.SiteId"
                                                   data-site-name="@(string.IsNullOrEmpty(site.SiteName) ? "ezt a telephelyet" : site.SiteName)">
                                                    <i class="bi bi-trash me-2"></i>Törlés
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="16" class="text-center">
                            <div class="alert alert-warning" role="alert">
                                @if (!string.IsNullOrEmpty(Model.SearchTerm))
                                {
                                    @:Nem található telephely a "@Model.SearchTerm" keresésre.
                                }
                                else
                                {
                                    @:Nem található telephely. <button type="button" class="btn btn-link alert-link p-0 align-baseline" data-bs-toggle="modal" data-bs-target="#createSiteModal">Hozz létre egyet?</button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Inline Pagination -->
    <footer class="fixed-footer">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
            <nav aria-label="Telephelyek lapozás">
                <ul class="pagination justify-content-center my-0">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize" asp-route-searchTerm="@Model.SearchTerm">Előző</a>
                    </li>
                    @{
                        int startPage = Math.Max(1, Model.CurrentPage - 2);
                        int endPage = Math.Min(Model.TotalPages, startPage + 4);
                        if (endPage - startPage + 1 < 5 && startPage > 1) { startPage = Math.Max(1, endPage - 4); }
                        if (Model.TotalPages > 5 && startPage > 1)
                        {
                            <li class="page-item"><a class="page-link" asp-page="./Index" asp-route-currentPage="1" asp-route-pageSize="@Model.PageSize" asp-route-searchTerm="@Model.SearchTerm">1</a></li>
                            if (startPage > 2) { <li class="page-item disabled"><span class="page-link">...</span></li> }
                        }
                    }
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")" aria-current="@(i == Model.CurrentPage ? "page" : null)">
                            <a class="page-link" asp-page="./Index" asp-route-currentPage="@i" asp-route-pageSize="@Model.PageSize" asp-route-searchTerm="@Model.SearchTerm">@i</a>
                        </li>
                    }
                    @{
                        if (Model.TotalPages > 5 && endPage < Model.TotalPages)
                        {
                            if (endPage < Model.TotalPages - 1) { <li class="page-item disabled"><span class="page-link">...</span></li> }
                            <li class="page-item"><a class="page-link" asp-page="./Index" asp-route-currentPage="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" asp-route-searchTerm="@Model.SearchTerm">@Model.TotalPages</a></li>
                        }
                    }
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                        <a class="page-link" asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" asp-route-searchTerm="@Model.SearchTerm">Következő</a>
                    </li>
                </ul>
            </nav>
            <div class="text-center">
                <form method="get" asp-page="./Index" class="d-inline-flex align-items-center gap-1">
                    <label for="pageSize" class="form-label mb-0 small">Oldalanként:</label>
                    <select id="pageSize" name="pageSize" onchange="this.form.submit()" class="form-select form-select-sm" style="width: auto;">
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                        <option value="100" selected="@(Model.PageSize == 100)">100</option>
                    </select>
                    <input type="hidden" name="currentPage" value="1" />
                    <input type="hidden" name="searchTerm" value="@Model.SearchTerm" />
                </form>
            </div>
        </div>
    </footer>

    <!-- Modals -->
    <!-- Create Site Modal -->
    <div class="modal fade" id="createSiteModal" tabindex="-1" aria-labelledby="createSiteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <form method="post" asp-page-handler="CreateSite" class="needs-validation" novalidate>
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="createSiteModalLabel">Új Telephely</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Telephely neve</label>
                            <input type="text" class="form-control" name="siteName" required>
                            <div class="invalid-feedback">A telephely neve kötelező.</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Partner</label>
                            <select id="create-partner-select" class="form-select" name="partnerId" required>
                                <option value="" disabled selected>-- Válasszon partnert --</option>
                            </select>
                            <div class="invalid-feedback">Partner megadása kötelező.</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Cím 1</label>
                            <input type="text" class="form-control" name="addressLine1">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Cím 2</label>
                            <input type="text" class="form-control" name="addressLine2">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Város</label>
                            <input type="text" class="form-control" name="city">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Állam/Megye</label>
                            <input type="text" class="form-control" name="state">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Irányítószám</label>
                            <input type="text" class="form-control" name="postalCode">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Ország</label>
                            <input type="text" class="form-control" name="country">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Kapcsolattartó 1</label>
                            <input type="text" class="form-control" name="contactPerson1">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Kapcsolattartó 2</label>
                            <input type="text" class="form-control" name="contactPerson2">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Kapcsolattartó 3</label>
                            <input type="text" class="form-control" name="contactPerson3">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Megjegyzés 1</label>
                            <textarea class="form-control" name="comment1" rows="4"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Megjegyzés 2</label>
                            <textarea class="form-control" name="comment2" rows="4"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Státusz</label>
                            <select id="create-status-select" class="form-select" name="statusId" required>
                                <option value="" disabled>-- Válasszon státuszt --</option>
                                @foreach (var status in Model.Statuses)
                                {
                                    <option value="@status.Id" selected="@(status.Id == 1)">@status.Name</option>
                                }
                            </select>
                            <div class="invalid-feedback">Státusz megadása kötelező.</div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" name="isPrimary" value="true">
                            <label class="form-check-label">Elsődleges Telephely</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                        <button type="submit" class="btn btn-primary">Létrehozás</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- View Site Modal -->
    @foreach (var site in Model.Sites)
    {
        <div class="modal fade" id="viewSiteModal_@site.SiteId" tabindex="-1" aria-labelledby="viewSiteModalLabel_@site.SiteId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewSiteModalLabel_@site.SiteId">@(string.IsNullOrEmpty(site.SiteName) ? "Nincs Név" : site.SiteName)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Telephely neve:</strong> @(string.IsNullOrEmpty(site.SiteName) ? "-" : site.SiteName)</p>
                        <p><strong>Partner:</strong> @(site.Partner != null ? site.Partner.Name : $"- (PartnerId: {site.PartnerId})")</p>
                        <p><strong>Cím 1:</strong> @(string.IsNullOrEmpty(site.AddressLine1) ? "-" : site.AddressLine1)</p>
                        <p><strong>Cím 2:</strong> @(string.IsNullOrEmpty(site.AddressLine2) ? "-" : site.AddressLine2)</p>
                        <p><strong>Város:</strong> @(string.IsNullOrEmpty(site.City) ? "-" : site.City)</p>
                        <p><strong>Állam/Megye:</strong> @(string.IsNullOrEmpty(site.State) ? "-" : site.State)</p>
                        <p><strong>Irányítószám:</strong> @(string.IsNullOrEmpty(site.PostalCode) ? "-" : site.PostalCode)</p>
                        <p><strong>Ország:</strong> @(string.IsNullOrEmpty(site.Country) ? "-" : site.Country)</p>
                        <p><strong>Kapcsolattartó 1:</strong> @(string.IsNullOrEmpty(site.ContactPerson1) ? "-" : site.ContactPerson1)</p>
                        <p><strong>Kapcsolattartó 2:</strong> @(string.IsNullOrEmpty(site.ContactPerson2) ? "-" : site.ContactPerson2)</p>
                        <p><strong>Kapcsolattartó 3:</strong> @(string.IsNullOrEmpty(site.ContactPerson3) ? "-" : site.ContactPerson3)</p>
                        <p><strong>Megjegyzés 1:</strong> @(string.IsNullOrEmpty(site.Comment1) ? "-" : site.Comment1)</p>
                        <p><strong>Megjegyzés 2:</strong> @(string.IsNullOrEmpty(site.Comment2) ? "-" : site.Comment2)</p>
                        <p><strong>Státusz:</strong>
                            @if (site.Status != null && !string.IsNullOrEmpty(site.Status.Color))
                            {
                                <span class="badge" style="background-color: @site.Status.Color; color: white;">@site.Status.Name</span>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </p>
                        <p><strong>Elsődleges:</strong> @(site.IsPrimary ? "Igen" : "Nem")</p>
                        <p><strong>Létrehozva:</strong> @(site.CreatedDate?.ToString("yyyy-MM-dd") ?? "-")</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Bezárás</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Site Modal -->
        <div class="modal fade" id="editSiteModal_@site.SiteId" tabindex="-1" aria-labelledby="editSiteModalLabel_@site.SiteId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <form method="post" asp-page-handler="EditSite" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="siteId" value="@site.SiteId" />
                        <div class="modal-header">
                            <h5 class="modal-title" id="editSiteModalLabel_@site.SiteId">Szerkesztés @(string.IsNullOrEmpty(site.SiteName) ? "Telephely" : site.SiteName)</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Telephely neve</label>
                                <input type="text" class="form-control" name="siteName" value="@site.SiteName" required>
                                <div class="invalid-feedback">A telephely neve kötelező.</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Partner</label>
                                <select id="edit-partner-select-@site.SiteId" class="form-select" name="partnerId" required data-partner-id="@site.PartnerId">
                                    <option value="" disabled>-- Válasszon partnert --</option>
                                    @if (site.Partner != null && !string.IsNullOrEmpty(site.Partner.Name))
                                    {
                                        <option value="@site.PartnerId" selected>@site.Partner.Name</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Partner megadása kötelező.</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Cím 1</label>
                                <input type="text" class="form-control" name="addressLine1" value="@site.AddressLine1">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Cím 2</label>
                                <input type="text" class="form-control" name="addressLine2" value="@site.AddressLine2">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Város</label>
                                <input type="text" class="form-control" name="city" value="@site.City">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Állam/Megye</label>
                                <input type="text" class="form-control" name="state" value="@site.State">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Irányítószám</label>
                                <input type="text" class="form-control" name="postalCode" value="@site.PostalCode">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Ország</label>
                                <input type="text" class="form-control" name="country" value="@site.Country">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Kapcsolattartó 1</label>
                                <input type="text" class="form-control" name="contactPerson1" value="@site.ContactPerson1">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Kapcsolattartó 2</label>
                                <input type="text" class="form-control" name="contactPerson2" value="@site.ContactPerson2">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Kapcsolattartó 3</label>
                                <input type="text" class="form-control" name="contactPerson3" value="@site.ContactPerson3">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Megjegyzés 1</label>
                                <textarea class="form-control" name="comment1" rows="4">@site.Comment1</textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Megjegyzés 2</label>
                                <textarea class="form-control" name="comment2" rows="4">@site.Comment2</textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Státusz</label>
                                <select id="edit-status-select-@site.SiteId" class="form-select" name="statusId" required data-status-id="@site.StatusId">
                                    <option value="" disabled>-- Válasszon státuszt --</option>
                                    @foreach (var status in Model.Statuses)
                                    {
                                        <option value="@status.Id" selected="@(site.StatusId == status.Id)">@status.Name</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Státusz megadása kötelező.</div>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" name="isPrimary" value="true" checked="@site.IsPrimary">
                                <label class="form-check-label">Elsődleges Telephely</label>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                            <button type="submit" class="btn btn-primary">Mentés</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Delete Site Modal -->
        <div class="modal fade" id="deleteSiteModal_@site.SiteId" tabindex="-1" aria-labelledby="deleteSiteModalLabel_@site.SiteId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <form method="post" asp-page-handler="DeleteSite">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="siteId" value="@site.SiteId" />
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteSiteModalLabel_@site.SiteId">Törlés megerősítése</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Biztosan törölni szeretnéd <strong>@(string.IsNullOrEmpty(site.SiteName) ? "ezt a telephelyet" : site.SiteName)</strong>?</p>
                            <p class="text-danger">Ez a művelet nem vonható vissza.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Mégse</button>
                            <button type="submit" class="btn btn-danger">Telephely törlése</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
$(function () {
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Show message modal for success or error messages
    const successMessage = '@Html.Raw(TempData["SuccessMessage"])';
    const errorMessage = '@Html.Raw(TempData["ErrorMessage"])';
    if (successMessage || errorMessage) {
        const modalEl = document.getElementById('messageModal');
        const modalTitleEl = document.getElementById('messageModalLabel');
        const modalBodyEl = document.getElementById('messageModalBody');
        const modal = new bootstrap.Modal(modalEl, { backdrop: 'static', keyboard: true });

        if (successMessage) {
            modalTitleEl.textContent = 'Siker';
            modalBodyEl.textContent = successMessage;
            modalEl.querySelector('.modal-content').classList.add('text-bg-success');
        } else if (errorMessage) {
            modalTitleEl.textContent = 'Hiba';
            modalBodyEl.textContent = errorMessage;
            modalEl.querySelector('.modal-content').classList.add('text-bg-danger');
        }
        modal.show();
    }

    // Create dictionaries for SiteId to PartnerId and PartnerName mappings
    const sitePartnerMap = @Json.Serialize(Model.Sites.ToDictionary(s => s.SiteId, s => new { partnerId = s.PartnerId, partnerName = s.Partner != null ? s.Partner.Name : $"Partner {s.PartnerId}" }));
    console.log('sitePartnerMap:', sitePartnerMap);

    // TomSelect initialization function
    function initializePartnerTomSelect(element, modalId, context, preselectedId, preselectedText) {
        return new Promise((resolve, reject) => {
            try {
                console.log(`Initializing TomSelect for ${modalId}, context: ${context}, preselectedId: ${preselectedId}, preselectedText: ${preselectedText}`);

                // Prepare fallback options from sitePartnerMap if API fails
                const fallbackOptions = Object.values(sitePartnerMap).map(p => ({
                    id: p.partnerId,
                    text: p.partnerName
                }));

                const tomSelect = new TomSelect(element, {
                    valueField: 'id',
                    labelField: 'text',
                    searchField: ['text'],
                    maxItems: 1,
                    maxOptions: 50,
                    placeholder: '-- Válasszon partnert --',
                    load: function (query, callback) {
                        const url = `/api/partners/select?search=${encodeURIComponent(query)}`;
                        console.log(`Fetching partners from ${url}`);
                        $.ajax({
                            url: url,
                            type: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Authorization': 'Bearer ' + getAuthToken() // Adjust based on your auth mechanism
                            },
                            success: function (response) {
                                console.log(`API response data for ${url}:`, response);
                                callback(response);
                            },
                            error: function (xhr, status, error) {
                                console.error(`Failed to load partners for ${modalId}:`, error);
                                callback(fallbackOptions); // Fallback to sitePartnerMap options
                            }
                        });
                    },
                    render: {
                        option: function (item, escape) {
                            return `<div>${escape(item.text)}</div>`;
                        },
                        item: function (item, escape) {
                            return `<div>${escape(item.text)}</div>`;
                        }
                    },
                    onInitialize: function () {
                        if (preselectedId && preselectedText) {
                            console.log(`Adding preselected option for ${modalId}: id=${preselectedId}, text=${preselectedText}`);
                            this.addOption({ id: preselectedId, text: preselectedText });
                            this.addItem(preselectedId);
                        }
                    }
                });

                resolve(tomSelect);
            } catch (error) {
                console.error(`Error initializing TomSelect for ${modalId}:`, error);
                element.innerHTML = `<option value="${preselectedId || ''}" selected>${preselectedText || 'Nincs elérhető partner'}</option>`;
                reject(error);
            }
        });
    }

    // Initialize TomSelect for both create and edit modals
    $('.modal').on('shown.bs.modal', function (e) {
        const modal = $(this);
        const partnerSelect = modal.find('select[name="partnerId"]');

        if (partnerSelect.length) {
            let modalId, context, preselectedId, preselectedText;

            if (modal.attr('id') === 'createSiteModal') {
                modalId = 'createSiteModal';
                context = 'site-create';
                preselectedId = null;
                preselectedText = null;
            } else if (partnerSelect.attr('id').startsWith('edit-partner-select-')) {
                const siteId = parseInt(partnerSelect.attr('id').replace('edit-partner-select-', ''), 10);
                const preselectedPartner = sitePartnerMap[siteId] || { partnerId: null, partnerName: null };
                modalId = `editSiteModal_${siteId}`;
                context = 'site-edit';
                preselectedId = preselectedPartner.partnerId;
                preselectedText = preselectedPartner.partnerName;
            } else {
                return; // Skip if not a partner select modal
            }

            console.log(`Modal shown for ${modalId}, PreselectedId: ${preselectedId}, PreselectedText: ${preselectedText}`);

            if (partnerSelect[0].tomselect) {
                partnerSelect[0].tomselect.destroy();
                console.log(`Destroyed existing Partner TomSelect for ${modalId}`);
            }

            initializePartnerTomSelect(
                partnerSelect[0],
                modalId,
                context,
                preselectedId,
                preselectedText
            ).then(tomSelect => {
                console.log(`Partner select initialized for ${modalId}`);
            }).catch(err => {
                console.error(`Failed to initialize partner select for ${modalId}:`, err);
                partnerSelect.html(`<option value="${preselectedId || ''}" selected>${preselectedText || 'Nincs partner'}</option>`);
            });
        }

        // Ensure status selects remain native
        const statusSelect = modal.find('select[name="statusId"]');
        if (statusSelect.length && statusSelect.attr('id').startsWith('edit-status-select-')) {
            const siteId = parseInt(statusSelect.attr('id').replace('edit-status-select-', ''), 10);
            console.log(`Native status select for SiteId: ${siteId}`);
            if (statusSelect[0].tomselect) {
                statusSelect[0].tomselect.destroy();
                console.log(`Destroyed stray TomSelect on status select for SiteId: ${siteId}`);
            }
        }
    });

    // Form validation for modals
    document.querySelectorAll('.modal form').forEach(form => {
        form.addEventListener('submit', function (event) {
            const formData = new FormData(this);
            console.log('Form data:', Object.fromEntries(formData));
            if (!this.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.classList.add('was-validated');
        }, false);
    });

    // Search form handling
    document.addEventListener('DOMContentLoaded', function () {
        const searchForm = document.querySelector('form[method="get"]');
        if (searchForm) {
            searchForm.addEventListener('submit', function (e) {
                const searchInput = document.getElementById('searchInput');
                if (searchInput.value.trim() === '') {
                    e.preventDefault();
                    window.location.href = window.location.pathname;
                }
            });
        }

        document.querySelectorAll('[data-filter]').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                const filter = this.getAttribute('data-filter');
                console.log('Filter by:', filter);
                // Add actual filter logic here if needed
            });
        });
    });

    // Debug clicks on status selects
    $('select[id="create-status-select"], select[id^="edit-status-select-"]').on('click', function (e) {
        console.log('Native status select clicked:', this.id);
    });

    // Function to get auth token (implement based on your auth setup)
    function getAuthToken() {
        // Replace with your method to retrieve the JWT token (e.g., from localStorage, session, or cookie)
        // Example: return localStorage.getItem('jwtToken');
        return ''; // Placeholder
    }
});
</script>
    }