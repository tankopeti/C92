@page
@using Cloud9_2.Models
@using Cloud9_2.Data
@using Cloud9_2.Services
@model Cloud9_2.Pages.DocManagement.Doc.IndexModel
@using System.Globalization
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Dokumentumok";
    Layout = "_Layout";
}
@section Styles {
    <link rel="stylesheet" href="~/css/Quotes.css" />
}

@functions {
    public string GetAntiForgeryToken()
    {
        var antiForgery = PageContext.HttpContext.RequestServices.GetService<IAntiforgery>();
        var tokenSet = antiForgery?.GetAndStoreTokens(PageContext.HttpContext);
        return tokenSet?.RequestToken ?? string.Empty;
    }
}

@await Html.PartialAsync("_DocManSidebar")

<div class="right-content">
    <div class="page-header-fixed-top">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-body-tertiary rounded-3 p-2 mb-0">
                    <li class="breadcrumb-item"><a href="../../">Főoldal</a></li>
                    <li class="breadcrumb-item"><a href="../">CRM Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Dokumentumok</li>
                </ol>
            </nav>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <button type="button" id="createDocumentBtn" class="btn-new" data-bs-toggle="modal" data-bs-target="#createDocumentModal" aria-label="Új dokumentum létrehozása">
                    <i class="bi bi-plus-circle me-1"></i>Új dokumentum
                </button>
            </div>
            <div class="d-flex align-items-center gap-2">
                <form method="get" class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" class="form-control" placeholder="Keresés..." id="searchInput" name="SearchTerm" value="@Model.SearchTerm" autocomplete="off" aria-label="Keresés dokumentumok között">
                    <input type="hidden" name="pageSize" value="@Model.PageSize" />
                    <button class="btn btn-outline-secondary" type="submit" aria-label="Keresés indítása">
                        <i class="bi bi-search"></i>
                    </button>
                </form>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Rendezési és szűrési opciók">
                        <i class="bi bi-funnel me-1"></i>Rendezés/Szűrés
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=uploaddate">Összes dokumentum (Legújabb elöl)</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=Beérkezett">Beérkezett</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=Függőben">Függőben</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=Elfogadott">Elfogadott</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=Lezárt">Lezárt</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=Jóváhagyandó">Jóváhagyandó</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=documentid">Rendezés: Dokumentum ID</a></li>
                        <li><a class="dropdown-item" href="?SearchTerm=@Model.SearchTerm&PageSize=@Model.PageSize&StatusFilter=all&SortBy=filename">Rendezés: Fájlnév</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="card-grid-header">
            <div class="card-grid-row">
                <div class="card-grid-column col">Dokumentum ID</div>
                <div class="card-grid-column col">Fájlnév</div>
                <div class="card-grid-column col">Partner</div>
                <div class="card-grid-column col">Dátum</div>
                <div class="card-grid-column col">Státusz</div>
                <div class="card-grid-column col">Műveletek</div>
            </div>
        </div>
    </div>
    <div class="scrollable-card-container">
        <div class="card-grid-body">
            @if (Model.Documents != null && Model.Documents.Any())
            {
                @foreach (var doc in Model.Documents)
                {
                    <div class="card partner-card mb-3" data-document-id="@doc.DocumentId">
                        <div class="card-body p-2">
                            <div class="card-grid-row align-items-center">
                                <div class="card-grid-cell col">
                                    <div class="document-info">
                                        <div class="fw-bold">@doc.DocumentId</div>
                                    </div>
                                </div>
                                <div class="card-grid-cell col">
                                    <div class="document-filename text-muted small">
                                        <i class="bi bi-file-earmark me-1"></i>
                                        <a href="/file/@doc.DocumentId" target="_blank" aria-label="Dokumentum megnyitása: @doc.FileName">
                                            @(doc.FileName != null && doc.FileName.Length > 40 ? doc.FileName.Substring(0, 40) + "..." : doc.FileName ?? "N/A")
                                        </a>
                                    </div>
                                </div>
                                <div class="card-grid-cell col">
                                    <div class="document-partner text-muted small">
                                        <i class="bi bi-person me-1"></i>@(doc.PartnerName ?? "N/A")
                                    </div>
                                </div>
                                <div class="card-grid-cell col">
                                    <div class="document-date text-muted small">
                                        <i class="bi bi-calendar me-1"></i>@(doc.UploadDate?.ToString("d MMMM yyyy", CultureInfo.CreateSpecificCulture("hu-HU")) ?? "N/A")
                                    </div>
                                </div>
                                <div class="card-grid-cell col">
                                    <span class="badge bg-secondary">@(Model.StatusDisplayNames.ContainsKey(doc.Status.ToString()) ? Model.StatusDisplayNames[doc.Status.ToString()] : "N/A")</span>
                                </div>
                                <div class="btn-group btn-group-sm col" role="group">
                                    <button type="button" class="btn btn-outline-info btn-sm view-document-btn"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewDocumentModal_@doc.DocumentId"
                                            aria-label="Dokumentum részleteinek megtekintése">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                                id="actionsDropdown_@doc.DocumentId"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false"
                                                aria-label="További műveletek">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionsDropdown_@doc.DocumentId">
                                            <li>
                                                <form asp-page="./Index" asp-page-handler="UpdateStatus" method="post">
                                                    <input type="hidden" name="documentId" value="@doc.DocumentId" />
                                                    <input type="hidden" name="returnUrl" value="@Request.Path@Request.QueryString" />
                                                    @Html.AntiForgeryToken()
                                                    <select name="status" class="form-select form-select-sm me-2" onchange="this.form.submit()">
                                                        <option value="">Státusz módosítása</option>
                                                        @foreach (var status in Enum.GetValues(typeof(DocumentStatusEnum)))
                                                        {
                                                            <option value="@status" selected="@(doc.Status.ToString() == status.ToString())">@Model.StatusDisplayNames[status.ToString()]</option>
                                                        }
                                                    </select>
                                                </form>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li>
                                                <form asp-page="./Index" asp-page-handler="Delete" method="post" onsubmit="return confirm('Biztosan törli a dokumentumot?');">
                                                    <input type="hidden" name="documentId" value="@doc.DocumentId" />
                                                    <input type="hidden" name="returnUrl" value="@Request.Path@Request.QueryString" />
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="dropdown-item text-danger">
                                                        <i class="bi bi-trash me-2"></i>Törlés
                                                    </button>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning text-center mt-3" role="alert">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        @:Nem található dokumentum a "@Model.SearchTerm" keresési kifejezésre az @Model.CurrentPage. oldalon.
                    }
                    else if (Model.TotalRecords > 0)
                    {
                        @:Nem található dokumentum az @Model.CurrentPage. oldalon, de @Model.TotalRecords dokumentum létezik. Próbáljon másik oldalt vagy szűrőt.
                    }
                    else
                    {
                        @:Nem található dokumentum.
                    }
                    <div class="mt-2 small text-muted">
                        @* Debug: Page=@Model.CurrentPage, PageSize=@Model.PageSize, TotalRecords=@Model.TotalRecords, DistinctDocumentIdCount=@Model.DistinctDocumentIdCount, SearchTerm="@Model.SearchTerm" *@
                    </div>
                </div>
            }
        </div>
    </div>
    @await Html.PartialAsync("_PaginationFooter", new PaginationViewModel
    {
        CurrentPage = Model.CurrentPage,
        TotalPages = Model.TotalPages,
        PageSize = Model.PageSize,
        SearchTerm = Model.SearchTerm,
        PageRoute = "./Index",
        EntityName = "Documents"
    })
    <!-- Render Creation Modal -->
    @await Html.PartialAsync("_Modals", ViewData["ModalViewModel"])
    <!-- Render View Modals for Documents -->
    @foreach (var doc in Model.Documents ?? new List<DocumentDto>())
    {
        @await Html.PartialAsync("_Modals", new DocumentModalViewModel { Document = doc })
    }
    <form id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>
    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/css/tom-select.bootstrap5.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.4.3/dist/js/tom-select.complete.min.js"></script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="/js/utils.js"></script>
    <script src="/js/tomSelectUtils.js"></script>
    <script>
        $(document).ready(function () {
            // Function to fetch sites for a given partnerId
            async function fetchSitesForPartner(partnerId) {
                try {
                    const searchUrl = `/api/sites/by-partner/${partnerId}?search=`;
                    console.log(`Fetching sites from: ${searchUrl}`);
                    const headers = {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    };
                    const token = localStorage.getItem('token');
                    if (token) {
                        headers['Authorization'] = `Bearer ${token}`;
                    }

                    const response = await fetch(searchUrl, { headers, credentials: 'include' });
                    if (!response.ok) {
                        const errorText = await response.text().catch(() => 'Unknown error');
                        console.error('Fetch sites failed:', { status: response.status, error: errorText, searchUrl });
                        return [{ id: null, text: response.status === 404 ? 'Telephely API nem elérhető' : 'Nincs találat' }];
                    }

                    const searchData = await response.json();
                    console.log('Search sites response:', searchData);
                    return searchData.map(item => ({
                        id: item.id,
                        text: (item.text && item.text.trim() !== '') ? item.text.trim() : `Site ${item.id}`
                    })).filter(item => item.text && item.text.trim() !== '');
                } catch (error) {
                    console.error('Error fetching sites:', error);
                    window.c92.showToast('error', `Hiba a telephelyek betöltése közben: ${error.message}`);
                    return [{ id: null, text: 'Hiba a betöltés során' }];
                }
            }

            // Initialize TomSelect for Partner dropdown in Create Modal
            window.c92.initializePartnerTomSelect(
                document.querySelector('#docPartnerId'),
                'create',
                'document'
            ).then(function (tomSelect) {
                console.log('Partner TomSelect initialized for create modal:', tomSelect);
            }).catch(function (error) {
                console.error('Failed to initialize Partner TomSelect:', error);
                showToast('error', 'Hiba a partnerek betöltése közben: ' + error.message);
            });

            // Initialize TomSelect for Site dropdown in Create Modal
            const siteSelect = document.querySelector('#docSiteId');
            window.c92.initializeSiteTomSelect(
                siteSelect,
                'create',
                'document'
            ).then(async function (tomSelect) {
                console.log('Site TomSelect initialized for create modal:', tomSelect);
                // Override the load function to use the correct endpoint
                tomSelect.load = async function (query, callback) {
                    try {
                        const partnerSelect = document.querySelector('#docPartnerId');
                        const partnerId = partnerSelect?.value ? parseInt(partnerSelect.value) : null;
                        if (!partnerId) {
                            console.log('No partner selected, skipping site fetch');
                            callback([{ id: null, text: 'Válasszon partnert előbb' }]);
                            return;
                        }

                        const searchUrl = `/api/sites/by-partner/${partnerId}?search=${encodeURIComponent(query)}`;
                        console.log(`Searching sites from: ${searchUrl}`);
                        const headers = {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        };
                        const token = localStorage.getItem('token');
                        if (token) {
                            headers['Authorization'] = `Bearer ${token}`;
                        }

                        const response = await fetch(searchUrl, { headers, credentials: 'include' });
                        if (!response.ok) {
                            const errorText = await response.text().catch(() => 'Unknown error');
                            console.error('Fetch sites failed:', { status: response.status, error: errorText, searchUrl });
                            callback([{ id: null, text: response.status === 404 ? 'Telephely API nem elérhető' : 'Nincs találat' }]);
                            return;
                        }

                        const searchData = await response.json();
                        console.log('Search sites response:', searchData);
                        const mappedData = searchData.map(item => ({
                            id: item.id,
                            text: (item.text && item.text.trim() !== '') ? item.text.trim() : `Site ${item.id}`
                        })).filter(item => item.text && item.text.trim() !== '');
                        callback(mappedData.length ? mappedData : [{ id: null, text: 'Nincs találat' }]);
                    } catch (error) {
                        console.error('Error searching sites:', error);
                        window.c92.showToast('error', `Hiba a telephelyek betöltése közben: ${error.message}`);
                        callback([{ id: null, text: 'Hiba a betöltés során' }]);
                    }
                };

                // Set initial options to avoid incorrect endpoint fetch
                tomSelect.clearOptions();
                tomSelect.addOption({ id: null, text: 'Válasszon partnert előbb' });
                tomSelect.disable();
            }).catch(function (error) {
                console.error('Failed to initialize Site TomSelect:', error);
                showToast('error', 'Hiba a telephelyek betöltése közben: ' + error.message);
            });

            // Handle Partner change to reinitialize Site dropdown
            document.querySelector('#docPartnerId').addEventListener('change', async function () {
                const partnerId = this.value;
                console.log('Partner changed, partnerId:', partnerId);
                const siteSelect = document.querySelector('#docSiteId');
                if (siteSelect.tomselect) {
                    siteSelect.tomselect.destroy();
                    siteSelect.dataset.tomSelectInitialized = 'false';
                }

                if (partnerId) {
                    // Fetch sites for the selected partner
                    const initialOptions = await fetchSitesForPartner(partnerId);
                    console.log('Fetched sites for partner:', initialOptions);

                    // Reinitialize Site TomSelect with fetched options
                    window.c92.initializeSiteTomSelect(siteSelect, 'create', 'document').then(function (tomSelect) {
                        // Override load function to use correct endpoint
                        tomSelect.load = async function (query, callback) {
                            try {
                                const partnerId = document.querySelector('#docPartnerId')?.value ? parseInt(document.querySelector('#docPartnerId').value) : null;
                                if (!partnerId) {
                                    callback([{ id: null, text: 'Válasszon partnert előbb' }]);
                                    return;
                                }

                                const searchUrl = `/api/sites/by-partner/${partnerId}?search=${encodeURIComponent(query)}`;
                                console.log(`Searching sites from: ${searchUrl}`);
                                const headers = {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                                };
                                const token = localStorage.getItem('token');
                                if (token) {
                                    headers['Authorization'] = `Bearer ${token}`;
                                }

                                const response = await fetch(searchUrl, { headers, credentials: 'include' });
                                if (!response.ok) {
                                    const errorText = await response.text().catch(() => 'Unknown error');
                                    console.error('Fetch sites failed:', { status: response.status, error: errorText, searchUrl });
                                    callback([{ id: null, text: response.status === 404 ? 'Telephely API nem elérhető' : 'Nincs találat' }]);
                                    return;
                                }

                                const searchData = await response.json();
                                console.log('Search sites response:', searchData);
                                const mappedData = searchData.map(item => ({
                                    id: item.id,
                                    text: (item.text && item.text.trim() !== '') ? item.text.trim() : `Site ${item.id}`
                                })).filter(item => item.text && item.text.trim() !== '');
                                callback(mappedData.length ? mappedData : [{ id: null, text: 'Nincs találat' }]);
                            } catch (error) {
                                console.error('Error searching sites:', error);
                                window.c92.showToast('error', `Hiba a telephelyek betöltése közben: ${error.message}`);
                                callback([{ id: null, text: 'Hiba a betöltés során' }]);
                            }
                        };

                        // Set initial options and enable dropdown
                        tomSelect.clearOptions();
                        if (initialOptions.length && initialOptions[0].id !== null) {
                            tomSelect.addOptions(initialOptions);
                            tomSelect.enable();
                            siteSelect.disabled = false;
                            tomSelect.refreshOptions();
                        } else {
                            tomSelect.addOption({ id: null, text: 'Nincs találat' });
                            tomSelect.disable();
                            siteSelect.disabled = true;
                        }
                    }).catch(function (error) {
                        console.error('Failed to reinitialize Site TomSelect:', error);
                        showToast('error', 'Hiba a telephelyek betöltése közben: ' + error.message);
                    });
                } else {
                    // Clear and disable Site dropdown
                    window.c92.initializeSiteTomSelect(siteSelect, 'create', 'document').then(function (tomSelect) {
                        tomSelect.clearOptions();
                        tomSelect.addOption({ id: null, text: 'Válasszon partnert előbb' });
                        tomSelect.disable();
                        siteSelect.disabled = true;
                    });
                }
            });

            // Initialize TomSelect for DocumentType
            new TomSelect('#docDocumentTypeId', {
                maxOptions: 50,
                placeholder: 'Válasszon típust'
            });

            @if (TempData["SuccessMessage"] != null)
            {
                @:showToast('success', '@TempData["SuccessMessage"]');
            }
            @if (TempData["ErrorMessage"] != null)
            {
                @:showToast('error', '@TempData["ErrorMessage"]');
            }
        });
    </script>
}
